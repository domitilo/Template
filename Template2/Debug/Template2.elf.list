
Template2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080030e8  080030e8  000130e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003104  08003104  00013104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  08003108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  7 .bss          00000120  20000084  20000084  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200001a4  200001a4  00020084  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ba84  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ce4  00000000  00000000  0002bb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c60  00000000  00000000  0002d820  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b58  00000000  00000000  0002e480  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000052f2  00000000  00000000  0002efd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003d01  00000000  00000000  000342ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00037fcb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000031c8  00000000  00000000  0003804c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003b214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080030d0 	.word	0x080030d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	080030d0 	.word	0x080030d0

080001c8 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); /* set CP10 and CP11 Full Access */
 80001cc:	4a16      	ldr	r2, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80001dc:	4a13      	ldr	r2, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <SystemInit+0x64>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <SystemInit+0x64>)
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <SystemInit+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <SystemInit+0x64>)
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <SystemInit+0x68>)
 8000202:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <SystemInit+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b04      	ldr	r3, [pc, #16]	; (8000228 <SystemInit+0x60>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00
 800022c:	40023800 	.word	0x40023800
 8000230:	24003010 	.word	0x24003010

08000234 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop

08000244 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000248:	e7fe      	b.n	8000248 <HardFault_Handler+0x4>
 800024a:	bf00      	nop

0800024c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler+0x4>
 8000252:	bf00      	nop

08000254 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000258:	e7fe      	b.n	8000258 <BusFault_Handler+0x4>
 800025a:	bf00      	nop

0800025c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000260:	e7fe      	b.n	8000260 <UsageFault_Handler+0x4>
 8000262:	bf00      	nop

08000264 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop

08000294 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000298:	f002 f88c 	bl	80023b4 <HAL_IncTick>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  /* --------------------------- System Clocks Configuration -----------------*/
  /* TIM4 clock enable */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80002a8:	2300      	movs	r3, #0
 80002aa:	613b      	str	r3, [r7, #16]
 80002ac:	4a17      	ldr	r2, [pc, #92]	; (800030c <HAL_TIM_PWM_MspInit+0x6c>)
 80002ae:	4b17      	ldr	r3, [pc, #92]	; (800030c <HAL_TIM_PWM_MspInit+0x6c>)
 80002b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6413      	str	r3, [r2, #64]	; 0x40
 80002b8:	4b14      	ldr	r3, [pc, #80]	; (800030c <HAL_TIM_PWM_MspInit+0x6c>)
 80002ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002bc:	f003 0304 	and.w	r3, r3, #4
 80002c0:	613b      	str	r3, [r7, #16]
 80002c2:	693b      	ldr	r3, [r7, #16]

  /* GPIOD clock enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	4a10      	ldr	r2, [pc, #64]	; (800030c <HAL_TIM_PWM_MspInit+0x6c>)
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <HAL_TIM_PWM_MspInit+0x6c>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6313      	str	r3, [r2, #48]	; 0x30
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <HAL_TIM_PWM_MspInit+0x6c>)
 80002d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d8:	f003 0308 	and.w	r3, r3, #8
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fb      	ldr	r3, [r7, #12]

  /*-------------------------- GPIO Configuration ----------------------------*/
  /* GPIOD Configuration: Pins 12, 13, 14 and 15 in output push-pull */
  GPIO_InitStructure.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 80002e0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80002e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80002e6:	2302      	movs	r3, #2
 80002e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80002ea:	2300      	movs	r3, #0
 80002ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80002ee:	2303      	movs	r3, #3
 80002f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = GPIO_AF2_TIM4;
 80002f2:	2302      	movs	r3, #2
 80002f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4619      	mov	r1, r3
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <HAL_TIM_PWM_MspInit+0x70>)
 80002fe:	f001 fd8f 	bl	8001e20 <HAL_GPIO_Init>
}
 8000302:	bf00      	nop
 8000304:	3728      	adds	r7, #40	; 0x28
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	40020c00 	.word	0x40020c00

08000314 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop

08000324 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000324:	f8df d034 	ldr.w	sp, [pc, #52]	; 800035c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000328:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800032a:	e003      	b.n	8000334 <LoopCopyDataInit>

0800032c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800032c:	4b0c      	ldr	r3, [pc, #48]	; (8000360 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800032e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000330:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000332:	3104      	adds	r1, #4

08000334 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000334:	480b      	ldr	r0, [pc, #44]	; (8000364 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000336:	4b0c      	ldr	r3, [pc, #48]	; (8000368 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000338:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800033a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800033c:	d3f6      	bcc.n	800032c <CopyDataInit>
  ldr  r2, =_sbss
 800033e:	4a0b      	ldr	r2, [pc, #44]	; (800036c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000340:	e002      	b.n	8000348 <LoopFillZerobss>

08000342 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000342:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000344:	f842 3b04 	str.w	r3, [r2], #4

08000348 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800034a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800034c:	d3f9      	bcc.n	8000342 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800034e:	f7ff ff3b 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000352:	f002 fe97 	bl	8003084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000356:	f000 f85b 	bl	8000410 <main>
  bx  lr    
 800035a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800035c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000360:	08003108 	.word	0x08003108
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000364:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000368:	20000084 	.word	0x20000084
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800036c:	20000084 	.word	0x20000084
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000370:	200001a4 	.word	0x200001a4

08000374 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000374:	e7fe      	b.n	8000374 <ADC_IRQHandler>
	...

08000378 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	6039      	str	r1, [r7, #0]
 8000382:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000388:	2b00      	cmp	r3, #0
 800038a:	da0b      	bge.n	80003a4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800038c:	490d      	ldr	r1, [pc, #52]	; (80003c4 <NVIC_SetPriority+0x4c>)
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f003 030f 	and.w	r3, r3, #15
 8000394:	3b04      	subs	r3, #4
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	b2d2      	uxtb	r2, r2
 800039a:	0112      	lsls	r2, r2, #4
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	440b      	add	r3, r1
 80003a0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80003a2:	e009      	b.n	80003b8 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80003a4:	4908      	ldr	r1, [pc, #32]	; (80003c8 <NVIC_SetPriority+0x50>)
 80003a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003aa:	683a      	ldr	r2, [r7, #0]
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	0112      	lsls	r2, r2, #4
 80003b0:	b2d2      	uxtb	r2, r2
 80003b2:	440b      	add	r3, r1
 80003b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000ed00 	.word	0xe000ed00
 80003c8:	e000e100 	.word	0xe000e100

080003cc <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003da:	d301      	bcc.n	80003e0 <SysTick_Config+0x14>
 80003dc:	2301      	movs	r3, #1
 80003de:	e011      	b.n	8000404 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80003e0:	4a0a      	ldr	r2, [pc, #40]	; (800040c <SysTick_Config+0x40>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80003e8:	3b01      	subs	r3, #1
 80003ea:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80003ec:	210f      	movs	r1, #15
 80003ee:	f04f 30ff 	mov.w	r0, #4294967295
 80003f2:	f7ff ffc1 	bl	8000378 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80003f6:	4b05      	ldr	r3, [pc, #20]	; (800040c <SysTick_Config+0x40>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <SysTick_Config+0x40>)
 80003fe:	2207      	movs	r2, #7
 8000400:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000402:	2300      	movs	r3, #0
}
 8000404:	4618      	mov	r0, r3
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	e000e010 	.word	0xe000e010

08000410 <main>:
	static void SystemClock_Config(void);
	static void TIM4_Config(void);
	static void Error_Handler(void);


int main(void) {
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0

	HAL_Init();
 8000414:	f001 ffb2 	bl	800237c <HAL_Init>
	BSP_LED_Init(LED3);
 8000418:	2001      	movs	r0, #1
 800041a:	f002 f893 	bl	8002544 <BSP_LED_Init>
	SystemClock_Config();
 800041e:	f000 f8af 	bl	8000580 <SystemClock_Config>
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8000422:	2101      	movs	r1, #1
 8000424:	2000      	movs	r0, #0
 8000426:	f002 f937 	bl	8002698 <BSP_PB_Init>

	Func1();
 800042a:	f000 f801 	bl	8000430 <Func1>

	while(1){
	}
 800042e:	e7fe      	b.n	800042e <main+0x1e>

08000430 <Func1>:

}

static void Func1(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	 uint8_t togglecounter = 0x00;
 8000436:	2300      	movs	r3, #0
 8000438:	71fb      	strb	r3, [r7, #7]

	  /* Initialize Accelerometer MEMS */
	  if(BSP_ACCELERO_Init() != HAL_OK)
 800043a:	f001 fff7 	bl	800242c <BSP_ACCELERO_Init>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d001      	beq.n	8000448 <Func1+0x18>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8000444:	f000 f896 	bl	8000574 <Error_Handler>
	  }

	  BSP_LED_Init(LED3);
 8000448:	2001      	movs	r0, #1
 800044a:	f002 f87b 	bl	8002544 <BSP_LED_Init>
	  /* SysTick end of count event each 10ms */
	  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800044e:	f001 fc65 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8000452:	4602      	mov	r2, r0
 8000454:	4b10      	ldr	r3, [pc, #64]	; (8000498 <Func1+0x68>)
 8000456:	601a      	str	r2, [r3, #0]
	  SysTick_Config(SystemCoreClock / 100);
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <Func1+0x68>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a0f      	ldr	r2, [pc, #60]	; (800049c <Func1+0x6c>)
 800045e:	fba2 2303 	umull	r2, r3, r2, r3
 8000462:	095b      	lsrs	r3, r3, #5
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ffb1 	bl	80003cc <SysTick_Config>

	  /* Turn OFF all LEDs */
	  BSP_LED_On(LED3);
 800046a:	2001      	movs	r0, #1
 800046c:	f002 f8e2 	bl	8002634 <BSP_LED_On>

	  while (togglecounter<=10)
 8000470:	e008      	b.n	8000484 <Func1+0x54>
	      {
	        /* Toggle LED3 */
	        BSP_LED_Toggle(LED3);
 8000472:	2001      	movs	r0, #1
 8000474:	f002 f8f8 	bl	8002668 <BSP_LED_Toggle>
	        HAL_Delay(100);
 8000478:	2064      	movs	r0, #100	; 0x64
 800047a:	f001 ffb5 	bl	80023e8 <HAL_Delay>
	        togglecounter ++;
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	3301      	adds	r3, #1
 8000482:	71fb      	strb	r3, [r7, #7]
	  SysTick_Config(SystemCoreClock / 100);

	  /* Turn OFF all LEDs */
	  BSP_LED_On(LED3);

	  while (togglecounter<=10)
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b0a      	cmp	r3, #10
 8000488:	d9f3      	bls.n	8000472 <Func1+0x42>
	        HAL_Delay(100);
	        togglecounter ++;
	      }

	    /* TIM4 channels configuration */
	    TIM4_Config();
 800048a:	f000 f809 	bl	80004a0 <TIM4_Config>

}
 800048e:	bf00      	nop
 8000490:	3708      	adds	r7, #8
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000000 	.word	0x20000000
 800049c:	51eb851f 	.word	0x51eb851f

080004a0 <TIM4_Config>:


static void TIM4_Config(void){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0

	  ==> TIM4_CCRx = TIM4_ARR/2 = 1000  (where x = 1, 2, 3 and 4).
	  ----------------------------------------------------------------------- */

	  /* Compute the prescaler value */
	 PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <TIM4_Config+0xbc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2d      	ldr	r2, [pc, #180]	; (8000560 <TIM4_Config+0xc0>)
 80004aa:	fba2 2303 	umull	r2, r3, r2, r3
 80004ae:	0a1b      	lsrs	r3, r3, #8
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	3b01      	subs	r3, #1
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	4b2b      	ldr	r3, [pc, #172]	; (8000564 <TIM4_Config+0xc4>)
 80004b8:	801a      	strh	r2, [r3, #0]

	  /* Time base configuration */
	  htim4.Instance             = TIM4;
 80004ba:	4b2b      	ldr	r3, [pc, #172]	; (8000568 <TIM4_Config+0xc8>)
 80004bc:	4a2b      	ldr	r2, [pc, #172]	; (800056c <TIM4_Config+0xcc>)
 80004be:	601a      	str	r2, [r3, #0]
	  htim4.Init.Period          = TIM_ARR;
 80004c0:	4b29      	ldr	r3, [pc, #164]	; (8000568 <TIM4_Config+0xc8>)
 80004c2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80004c6:	60da      	str	r2, [r3, #12]
	  htim4.Init.Prescaler       = PrescalerValue;
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <TIM4_Config+0xc4>)
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b26      	ldr	r3, [pc, #152]	; (8000568 <TIM4_Config+0xc8>)
 80004d0:	605a      	str	r2, [r3, #4]
	  htim4.Init.ClockDivision   = 0;
 80004d2:	4b25      	ldr	r3, [pc, #148]	; (8000568 <TIM4_Config+0xc8>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
	  htim4.Init.CounterMode     = TIM_COUNTERMODE_UP;
 80004d8:	4b23      	ldr	r3, [pc, #140]	; (8000568 <TIM4_Config+0xc8>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
	  if(HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80004de:	4822      	ldr	r0, [pc, #136]	; (8000568 <TIM4_Config+0xc8>)
 80004e0:	f000 f98c 	bl	80007fc <HAL_TIM_PWM_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <TIM4_Config+0x4e>
	  {
	    /* Initialization Error */
	    Error_Handler();
 80004ea:	f000 f843 	bl	8000574 <Error_Handler>
	  }

	  /* TIM PWM1 Mode configuration: Channel */
	  /* Output Compare Timing Mode configuration: Channel1 */
	  sConfigTim4.OCMode = TIM_OCMODE_PWM1;
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <TIM4_Config+0xd0>)
 80004f0:	2260      	movs	r2, #96	; 0x60
 80004f2:	601a      	str	r2, [r3, #0]
	  sConfigTim4.OCIdleState = TIM_CCx_ENABLE;
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <TIM4_Config+0xd0>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	615a      	str	r2, [r3, #20]
	  sConfigTim4.Pulse = TIM_CCR;
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <TIM4_Config+0xd0>)
 80004fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000500:	605a      	str	r2, [r3, #4]
	  sConfigTim4.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000502:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <TIM4_Config+0xd0>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]

	  /* Output Compare PWM1 Mode configuration: Channel1 */
	  if(HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigTim4, TIM_CHANNEL_1) != HAL_OK)
 8000508:	2200      	movs	r2, #0
 800050a:	4919      	ldr	r1, [pc, #100]	; (8000570 <TIM4_Config+0xd0>)
 800050c:	4816      	ldr	r0, [pc, #88]	; (8000568 <TIM4_Config+0xc8>)
 800050e:	f000 faa9 	bl	8000a64 <HAL_TIM_PWM_ConfigChannel>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <TIM4_Config+0x7c>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8000518:	f000 f82c 	bl	8000574 <Error_Handler>
	  }

	  /* Output Compare PWM1 Mode configuration: Channel2 */
	  if(HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigTim4, TIM_CHANNEL_2) != HAL_OK)
 800051c:	2204      	movs	r2, #4
 800051e:	4914      	ldr	r1, [pc, #80]	; (8000570 <TIM4_Config+0xd0>)
 8000520:	4811      	ldr	r0, [pc, #68]	; (8000568 <TIM4_Config+0xc8>)
 8000522:	f000 fa9f 	bl	8000a64 <HAL_TIM_PWM_ConfigChannel>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <TIM4_Config+0x90>
	  {
	    /* Initialization Error */
	    Error_Handler();
 800052c:	f000 f822 	bl	8000574 <Error_Handler>
	  }

	  /* Output Compare PWM1 Mode configuration: Channel3 */
	  if(HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigTim4, TIM_CHANNEL_3) != HAL_OK)
 8000530:	2208      	movs	r2, #8
 8000532:	490f      	ldr	r1, [pc, #60]	; (8000570 <TIM4_Config+0xd0>)
 8000534:	480c      	ldr	r0, [pc, #48]	; (8000568 <TIM4_Config+0xc8>)
 8000536:	f000 fa95 	bl	8000a64 <HAL_TIM_PWM_ConfigChannel>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <TIM4_Config+0xa4>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8000540:	f000 f818 	bl	8000574 <Error_Handler>
	  }
	  /* Output Compare PWM1 Mode configuration: Channel4 */
	  if(HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigTim4, TIM_CHANNEL_4) != HAL_OK)
 8000544:	220c      	movs	r2, #12
 8000546:	490a      	ldr	r1, [pc, #40]	; (8000570 <TIM4_Config+0xd0>)
 8000548:	4807      	ldr	r0, [pc, #28]	; (8000568 <TIM4_Config+0xc8>)
 800054a:	f000 fa8b 	bl	8000a64 <HAL_TIM_PWM_ConfigChannel>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <TIM4_Config+0xb8>
	  {
	    /* Initialization Error */
	    Error_Handler();
 8000554:	f000 f80e 	bl	8000574 <Error_Handler>





}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	20000000 	.word	0x20000000
 8000560:	10624dd3 	.word	0x10624dd3
 8000564:	200000a0 	.word	0x200000a0
 8000568:	20000100 	.word	0x20000100
 800056c:	40000800 	.word	0x40000800
 8000570:	2000013c 	.word	0x2000013c

08000574 <Error_Handler>:




static void Error_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* Turn LED4 on */
  BSP_LED_On(LED4);
 8000578:	2000      	movs	r0, #0
 800057a:	f002 f85b 	bl	8002634 <BSP_LED_On>
  while(1)
  {
  }
 800057e:	e7fe      	b.n	800057e <Error_Handler+0xa>

08000580 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4a2a      	ldr	r2, [pc, #168]	; (8000634 <SystemClock_Config+0xb4>)
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <SystemClock_Config+0xb4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000594:	6413      	str	r3, [r2, #64]	; 0x40
 8000596:	4b27      	ldr	r3, [pc, #156]	; (8000634 <SystemClock_Config+0xb4>)
 8000598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4a24      	ldr	r2, [pc, #144]	; (8000638 <SystemClock_Config+0xb8>)
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <SystemClock_Config+0xb8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	4b21      	ldr	r3, [pc, #132]	; (8000638 <SystemClock_Config+0xb8>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005be:	2301      	movs	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d0:	2308      	movs	r3, #8
 80005d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005da:	2302      	movs	r3, #2
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005de:	2307      	movs	r3, #7
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fff2 	bl	80015d0 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80005ec:	230f      	movs	r3, #15
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000604:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000608:	2105      	movs	r1, #5
 800060a:	4618      	mov	r0, r3
 800060c:	f001 fa0a 	bl	8001a24 <HAL_RCC_ClockConfig>

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 8000610:	f001 ff00 	bl	8002414 <HAL_GetREVID>
 8000614:	4602      	mov	r2, r0
 8000616:	f241 0301 	movw	r3, #4097	; 0x1001
 800061a:	429a      	cmp	r2, r3
 800061c:	d105      	bne.n	800062a <SystemClock_Config+0xaa>
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <SystemClock_Config+0xbc>)
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <SystemClock_Config+0xbc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000628:	6013      	str	r3, [r2, #0]
  }
}
 800062a:	bf00      	nop
 800062c:	3750      	adds	r7, #80	; 0x50
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000
 800063c:	40023c00 	.word	0x40023c00

08000640 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000648:	2300      	movs	r3, #0
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000650:	2200      	movs	r2, #0
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	2036      	movs	r0, #54	; 0x36
 8000656:	f001 fe67 	bl	8002328 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800065a:	2036      	movs	r0, #54	; 0x36
 800065c:	f001 fe80 	bl	8002360 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4a24      	ldr	r2, [pc, #144]	; (80006f8 <HAL_InitTick+0xb8>)
 8000666:	4b24      	ldr	r3, [pc, #144]	; (80006f8 <HAL_InitTick+0xb8>)
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <HAL_InitTick+0xb8>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 0310 	and.w	r3, r3, #16
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800067c:	f107 020c 	add.w	r2, r7, #12
 8000680:	f107 0310 	add.w	r3, r7, #16
 8000684:	4611      	mov	r1, r2
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fb98 	bl	8001dbc <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000692:	2b00      	cmp	r3, #0
 8000694:	d103      	bne.n	800069e <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000696:	f001 fb6b 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 800069a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800069c:	e004      	b.n	80006a8 <HAL_InitTick+0x68>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800069e:	f001 fb67 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 80006a2:	4603      	mov	r3, r0
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <HAL_InitTick+0xbc>)
 80006ac:	fba2 2303 	umull	r2, r3, r2, r3
 80006b0:	0c9b      	lsrs	r3, r3, #18
 80006b2:	3b01      	subs	r3, #1
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0xc0>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <HAL_InitTick+0xc4>)
 80006ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_InitTick+0xc0>)
 80006be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006c2:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80006c4:	4a0e      	ldr	r2, [pc, #56]	; (8000700 <HAL_InitTick+0xc0>)
 80006c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c8:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_InitTick+0xc0>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <HAL_InitTick+0xc0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 80006d6:	480a      	ldr	r0, [pc, #40]	; (8000700 <HAL_InitTick+0xc0>)
 80006d8:	f000 f83e 	bl	8000758 <HAL_TIM_Base_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d104      	bne.n	80006ec <HAL_InitTick+0xac>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 80006e2:	4807      	ldr	r0, [pc, #28]	; (8000700 <HAL_InitTick+0xc0>)
 80006e4:	f000 f86e 	bl	80007c4 <HAL_TIM_Base_Start_IT>
 80006e8:	4603      	mov	r3, r0
 80006ea:	e000      	b.n	80006ee <HAL_InitTick+0xae>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3730      	adds	r7, #48	; 0x30
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40023800 	.word	0x40023800
 80006fc:	431bde83 	.word	0x431bde83
 8000700:	20000164 	.word	0x20000164
 8000704:	40001000 	.word	0x40001000

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8000710:	f001 fe50 	bl	80023b4 <HAL_IncTick>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <TIM6_DAC_IRQHandler+0x10>)
 8000722:	f000 f897 	bl	8000854 <HAL_TIM_IRQHandler>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000164 	.word	0x20000164

08000730 <HAL_TIMEx_CommutationCallback>:
 * @brief  Hall commutation changed callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim) {
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIMEx_CommutationCallback could be implemented in the user file
	 */
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr

08000744 <HAL_TIMEx_BreakCallback>:
 * @brief  Hall Break detection callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim) {
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIMEx_BreakCallback could be implemented in the user file
	 */
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr

08000758 <HAL_TIM_Base_Init>:
 *         parameters in the TIM_HandleTypeDef and create the associated handle.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e01d      	b.n	80007a6 <HAL_TIM_Base_Init+0x4e>
	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

	if (htim->State == HAL_TIM_STATE_RESET) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d106      	bne.n	8000784 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 f816 	bl	80007b0 <HAL_TIM_Base_MspInit>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2202      	movs	r2, #2
 8000788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3304      	adds	r3, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4610      	mov	r0, r2
 8000798:	f000 fa52 	bl	8000c40 <TIM_Base_SetConfig>

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop

080007b0 <HAL_TIM_Base_MspInit>:
 * @brief  Initializes the TIM Base MSP.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIM_Base_MspInit could be implemented in the user file
	 */
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <HAL_TIM_Base_Start_IT>:
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Enable the TIM Update interrupt */
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	6812      	ldr	r2, [r2, #0]
 80007d4:	68d2      	ldr	r2, [r2, #12]
 80007d6:	f042 0201 	orr.w	r2, r2, #1
 80007da:	60da      	str	r2, [r3, #12]

	/* Enable the Peripheral */
	__HAL_TIM_ENABLE(htim);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	687a      	ldr	r2, [r7, #4]
 80007e2:	6812      	ldr	r2, [r2, #0]
 80007e4:	6812      	ldr	r2, [r2, #0]
 80007e6:	f042 0201 	orr.w	r2, r2, #1
 80007ea:	601a      	str	r2, [r3, #0]

	/* Return function status */
	return HAL_OK;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <HAL_TIM_PWM_Init>:
 *         parameters in the TIM_HandleTypeDef and create the associated handle.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d101      	bne.n	800080e <HAL_TIM_PWM_Init+0x12>
		return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e01d      	b.n	800084a <HAL_TIM_PWM_Init+0x4e>
	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

	if (htim->State == HAL_TIM_STATE_RESET) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d106      	bne.n	8000828 <HAL_TIM_PWM_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_TIM_PWM_MspInit(htim);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff fd3c 	bl	80002a0 <HAL_TIM_PWM_MspInit>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2202      	movs	r2, #2
 800082c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	/* Init the base time for the PWM */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3304      	adds	r3, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4610      	mov	r0, r2
 800083c:	f000 fa00 	bl	8000c40 <TIM_Base_SetConfig>

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2201      	movs	r2, #1
 8000844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop

08000854 <HAL_TIM_IRQHandler>:
 * @brief  This function handles TIM interrupts requests.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	/* Capture compare 1 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	691b      	ldr	r3, [r3, #16]
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d022      	beq.n	80008b0 <HAL_TIM_IRQHandler+0x5c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	f003 0302 	and.w	r3, r3, #2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d01b      	beq.n	80008b0 <HAL_TIM_IRQHandler+0x5c>
			{
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f06f 0202 	mvn.w	r2, #2
 8000880:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	761a      	strb	r2, [r3, #24]

				/* Input capture event */
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	f003 0303 	and.w	r3, r3, #3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d003      	beq.n	800089e <HAL_TIM_IRQHandler+0x4a>
					HAL_TIM_IC_CaptureCallback(htim);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f9b4 	bl	8000c04 <HAL_TIM_IC_CaptureCallback>
 800089c:	e005      	b.n	80008aa <HAL_TIM_IRQHandler+0x56>
				}
				/* Output compare event */
				else {
					HAL_TIM_OC_DelayElapsedCallback(htim);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 f9a6 	bl	8000bf0 <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f9b7 	bl	8000c18 <HAL_TIM_PWM_PulseFinishedCallback>
				}
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	761a      	strb	r2, [r3, #24]
			}
		}
	}
	/* Capture compare 2 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d022      	beq.n	8000904 <HAL_TIM_IRQHandler+0xb0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	f003 0304 	and.w	r3, r3, #4
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d01b      	beq.n	8000904 <HAL_TIM_IRQHandler+0xb0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f06f 0204 	mvn.w	r2, #4
 80008d4:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2202      	movs	r2, #2
 80008da:	761a      	strb	r2, [r3, #24]
			/* Input capture event */
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d003      	beq.n	80008f2 <HAL_TIM_IRQHandler+0x9e>
				HAL_TIM_IC_CaptureCallback(htim);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f000 f98a 	bl	8000c04 <HAL_TIM_IC_CaptureCallback>
 80008f0:	e005      	b.n	80008fe <HAL_TIM_IRQHandler+0xaa>
			}
			/* Output compare event */
			else {
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 f97c 	bl	8000bf0 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 f98d 	bl	8000c18 <HAL_TIM_PWM_PulseFinishedCallback>
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2200      	movs	r2, #0
 8000902:	761a      	strb	r2, [r3, #24]
		}
	}
	/* Capture compare 3 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	2b00      	cmp	r3, #0
 8000910:	d022      	beq.n	8000958 <HAL_TIM_IRQHandler+0x104>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	f003 0308 	and.w	r3, r3, #8
 800091c:	2b00      	cmp	r3, #0
 800091e:	d01b      	beq.n	8000958 <HAL_TIM_IRQHandler+0x104>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f06f 0208 	mvn.w	r2, #8
 8000928:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2204      	movs	r2, #4
 800092e:	761a      	strb	r2, [r3, #24]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d003      	beq.n	8000946 <HAL_TIM_IRQHandler+0xf2>
				HAL_TIM_IC_CaptureCallback(htim);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f960 	bl	8000c04 <HAL_TIM_IC_CaptureCallback>
 8000944:	e005      	b.n	8000952 <HAL_TIM_IRQHandler+0xfe>
			}
			/* Output compare event */
			else {
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f000 f952 	bl	8000bf0 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 f963 	bl	8000c18 <HAL_TIM_PWM_PulseFinishedCallback>
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	2200      	movs	r2, #0
 8000956:	761a      	strb	r2, [r3, #24]
		}
	}
	/* Capture compare 4 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	f003 0310 	and.w	r3, r3, #16
 8000962:	2b00      	cmp	r3, #0
 8000964:	d022      	beq.n	80009ac <HAL_TIM_IRQHandler+0x158>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	2b00      	cmp	r3, #0
 8000972:	d01b      	beq.n	80009ac <HAL_TIM_IRQHandler+0x158>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f06f 0210 	mvn.w	r2, #16
 800097c:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2208      	movs	r2, #8
 8000982:	761a      	strb	r2, [r3, #24]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	69db      	ldr	r3, [r3, #28]
 800098a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800098e:	2b00      	cmp	r3, #0
 8000990:	d003      	beq.n	800099a <HAL_TIM_IRQHandler+0x146>
				HAL_TIM_IC_CaptureCallback(htim);
 8000992:	6878      	ldr	r0, [r7, #4]
 8000994:	f000 f936 	bl	8000c04 <HAL_TIM_IC_CaptureCallback>
 8000998:	e005      	b.n	80009a6 <HAL_TIM_IRQHandler+0x152>
			}
			/* Output compare event */
			else {
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 f928 	bl	8000bf0 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 f939 	bl	8000c18 <HAL_TIM_PWM_PulseFinishedCallback>
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	761a      	strb	r2, [r3, #24]
		}
	}
	/* TIM Update event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	691b      	ldr	r3, [r3, #16]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00e      	beq.n	80009d8 <HAL_TIM_IRQHandler+0x184>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d007      	beq.n	80009d8 <HAL_TIM_IRQHandler+0x184>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f06f 0201 	mvn.w	r2, #1
 80009d0:	611a      	str	r2, [r3, #16]
			HAL_TIM_PeriodElapsedCallback(htim);
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f7ff fe98 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
		}
	}
	/* TIM Break input event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	691b      	ldr	r3, [r3, #16]
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00e      	beq.n	8000a04 <HAL_TIM_IRQHandler+0x1b0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d007      	beq.n	8000a04 <HAL_TIM_IRQHandler+0x1b0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80009fc:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_BreakCallback(htim);
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f7ff fea0 	bl	8000744 <HAL_TIMEx_BreakCallback>
		}
	}
	/* TIM Trigger detection event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	691b      	ldr	r3, [r3, #16]
 8000a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00e      	beq.n	8000a30 <HAL_TIM_IRQHandler+0x1dc>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d007      	beq.n	8000a30 <HAL_TIM_IRQHandler+0x1dc>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000a28:	611a      	str	r2, [r3, #16]
			HAL_TIM_TriggerCallback(htim);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f000 f8fe 	bl	8000c2c <HAL_TIM_TriggerCallback>
		}
	}
	/* TIM commutation event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	f003 0320 	and.w	r3, r3, #32
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00e      	beq.n	8000a5c <HAL_TIM_IRQHandler+0x208>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	f003 0320 	and.w	r3, r3, #32
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d007      	beq.n	8000a5c <HAL_TIM_IRQHandler+0x208>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f06f 0220 	mvn.w	r2, #32
 8000a54:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_CommutationCallback(htim);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f7ff fe6a 	bl	8000730 <HAL_TIMEx_CommutationCallback>
		}
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <HAL_TIM_PWM_ConfigChannel>:
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
		TIM_OC_InitTypeDef* sConfig, uint32_t Channel) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	__HAL_LOCK(htim);
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d101      	bne.n	8000a7e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e0b4      	b.n	8000be8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2201      	movs	r2, #1
 8000a82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	assert_param(IS_TIM_CHANNELS(Channel));
	assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
	assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
	assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

	htim->State = HAL_TIM_STATE_BUSY;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2202      	movs	r2, #2
 8000a8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	switch (Channel) {
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0c      	cmp	r3, #12
 8000a92:	f200 809f 	bhi.w	8000bd4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8000a96:	a201      	add	r2, pc, #4	; (adr r2, 8000a9c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8000a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9c:	08000ad1 	.word	0x08000ad1
 8000aa0:	08000bd5 	.word	0x08000bd5
 8000aa4:	08000bd5 	.word	0x08000bd5
 8000aa8:	08000bd5 	.word	0x08000bd5
 8000aac:	08000b11 	.word	0x08000b11
 8000ab0:	08000bd5 	.word	0x08000bd5
 8000ab4:	08000bd5 	.word	0x08000bd5
 8000ab8:	08000bd5 	.word	0x08000bd5
 8000abc:	08000b53 	.word	0x08000b53
 8000ac0:	08000bd5 	.word	0x08000bd5
 8000ac4:	08000bd5 	.word	0x08000bd5
 8000ac8:	08000bd5 	.word	0x08000bd5
 8000acc:	08000b93 	.word	0x08000b93
	case TIM_CHANNEL_1: {
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
		/* Configure the Channel 1 in PWM mode */
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f9d4 	bl	8000e84 <TIM_OC1_SetConfig>

		/* Set the Preload enable bit for channel1 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	6992      	ldr	r2, [r2, #24]
 8000ae6:	f042 0208 	orr.w	r2, r2, #8
 8000aea:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	6812      	ldr	r2, [r2, #0]
 8000af4:	6992      	ldr	r2, [r2, #24]
 8000af6:	f022 0204 	bic.w	r2, r2, #4
 8000afa:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	6812      	ldr	r2, [r2, #0]
 8000b04:	6991      	ldr	r1, [r2, #24]
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	6912      	ldr	r2, [r2, #16]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	619a      	str	r2, [r3, #24]
	}
		break;
 8000b0e:	e062      	b.n	8000bd6 <HAL_TIM_PWM_ConfigChannel+0x172>

	case TIM_CHANNEL_2: {
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
		/* Configure the Channel 2 in PWM mode */
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f93c 	bl	8000d94 <TIM_OC2_SetConfig>

		/* Set the Preload enable bit for channel2 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	68fa      	ldr	r2, [r7, #12]
 8000b22:	6812      	ldr	r2, [r2, #0]
 8000b24:	6992      	ldr	r2, [r2, #24]
 8000b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b2a:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	6992      	ldr	r2, [r2, #24]
 8000b36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b3a:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68fa      	ldr	r2, [r7, #12]
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	6991      	ldr	r1, [r2, #24]
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	6912      	ldr	r2, [r2, #16]
 8000b4a:	0212      	lsls	r2, r2, #8
 8000b4c:	430a      	orrs	r2, r1
 8000b4e:	619a      	str	r2, [r3, #24]
	}
		break;
 8000b50:	e041      	b.n	8000bd6 <HAL_TIM_PWM_ConfigChannel+0x172>

	case TIM_CHANNEL_3: {
		assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
		/* Configure the Channel 3 in PWM mode */
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	68b9      	ldr	r1, [r7, #8]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 fa07 	bl	8000f6c <TIM_OC3_SetConfig>

		/* Set the Preload enable bit for channel3 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68fa      	ldr	r2, [r7, #12]
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	69d2      	ldr	r2, [r2, #28]
 8000b68:	f042 0208 	orr.w	r2, r2, #8
 8000b6c:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	6812      	ldr	r2, [r2, #0]
 8000b76:	69d2      	ldr	r2, [r2, #28]
 8000b78:	f022 0204 	bic.w	r2, r2, #4
 8000b7c:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	69d1      	ldr	r1, [r2, #28]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	6912      	ldr	r2, [r2, #16]
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	61da      	str	r2, [r3, #28]
	}
		break;
 8000b90:	e021      	b.n	8000bd6 <HAL_TIM_PWM_ConfigChannel+0x172>

	case TIM_CHANNEL_4: {
		assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
		/* Configure the Channel 4 in PWM mode */
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68b9      	ldr	r1, [r7, #8]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fa5f 	bl	800105c <TIM_OC4_SetConfig>

		/* Set the Preload enable bit for channel4 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	6812      	ldr	r2, [r2, #0]
 8000ba6:	69d2      	ldr	r2, [r2, #28]
 8000ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000bac:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68fa      	ldr	r2, [r7, #12]
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	69d2      	ldr	r2, [r2, #28]
 8000bb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bbc:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	6812      	ldr	r2, [r2, #0]
 8000bc6:	69d1      	ldr	r1, [r2, #28]
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	6912      	ldr	r2, [r2, #16]
 8000bcc:	0212      	lsls	r2, r2, #8
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	61da      	str	r2, [r3, #28]
	}
		break;
 8000bd2:	e000      	b.n	8000bd6 <HAL_TIM_PWM_ConfigChannel+0x172>

	default:
		break;
 8000bd4:	bf00      	nop
	}

	htim->State = HAL_TIM_STATE_READY;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	__HAL_UNLOCK(htim);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2200      	movs	r2, #0
 8000be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return HAL_OK;
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3710      	adds	r7, #16
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_TIM_OC_DelayElapsedCallback>:
 * @brief  Output Compare callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
	 */
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_TIM_IC_CaptureCallback>:
 * @brief  Input Capture callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <HAL_TIM_PWM_PulseFinishedCallback>:
 * @brief  PWM Pulse finished callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
	 */
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_TIM_TriggerCallback>:
 * @brief  Hall Trigger detection callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIM_TriggerCallback could be implemented in the user file
	 */
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx: TIM peripheral
 * @param  Structure: pointer on TIM Time Base required parameters  
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1 = 0U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
	tmpcr1 = TIMx->CR1;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a44      	ldr	r2, [pc, #272]	; (8000d68 <TIM_Base_SetConfig+0x128>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d013      	beq.n	8000c84 <TIM_Base_SetConfig+0x44>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c62:	d00f      	beq.n	8000c84 <TIM_Base_SetConfig+0x44>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	4a41      	ldr	r2, [pc, #260]	; (8000d6c <TIM_Base_SetConfig+0x12c>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d00b      	beq.n	8000c84 <TIM_Base_SetConfig+0x44>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a40      	ldr	r2, [pc, #256]	; (8000d70 <TIM_Base_SetConfig+0x130>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d007      	beq.n	8000c84 <TIM_Base_SetConfig+0x44>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4a3f      	ldr	r2, [pc, #252]	; (8000d74 <TIM_Base_SetConfig+0x134>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d003      	beq.n	8000c84 <TIM_Base_SetConfig+0x44>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4a3e      	ldr	r2, [pc, #248]	; (8000d78 <TIM_Base_SetConfig+0x138>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d101      	bne.n	8000c88 <TIM_Base_SetConfig+0x48>
 8000c84:	2301      	movs	r3, #1
 8000c86:	e000      	b.n	8000c8a <TIM_Base_SetConfig+0x4a>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d008      	beq.n	8000ca0 <TIM_Base_SetConfig+0x60>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c94:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a31      	ldr	r2, [pc, #196]	; (8000d68 <TIM_Base_SetConfig+0x128>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d02b      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cae:	d027      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a2e      	ldr	r2, [pc, #184]	; (8000d6c <TIM_Base_SetConfig+0x12c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d023      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a2d      	ldr	r2, [pc, #180]	; (8000d70 <TIM_Base_SetConfig+0x130>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d01f      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a2c      	ldr	r2, [pc, #176]	; (8000d74 <TIM_Base_SetConfig+0x134>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d01b      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a2b      	ldr	r2, [pc, #172]	; (8000d78 <TIM_Base_SetConfig+0x138>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d017      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a2a      	ldr	r2, [pc, #168]	; (8000d7c <TIM_Base_SetConfig+0x13c>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d013      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a29      	ldr	r2, [pc, #164]	; (8000d80 <TIM_Base_SetConfig+0x140>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d00f      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a28      	ldr	r2, [pc, #160]	; (8000d84 <TIM_Base_SetConfig+0x144>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d00b      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <TIM_Base_SetConfig+0x148>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d007      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a26      	ldr	r2, [pc, #152]	; (8000d8c <TIM_Base_SetConfig+0x14c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d003      	beq.n	8000d00 <TIM_Base_SetConfig+0xc0>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <TIM_Base_SetConfig+0x150>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d101      	bne.n	8000d04 <TIM_Base_SetConfig+0xc4>
 8000d00:	2301      	movs	r3, #1
 8000d02:	e000      	b.n	8000d06 <TIM_Base_SetConfig+0xc6>
 8000d04:	2300      	movs	r3, #0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d008      	beq.n	8000d1c <TIM_Base_SetConfig+0xdc>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d10:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
	}

	TIMx->CR1 = tmpcr1;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	601a      	str	r2, [r3, #0]

	/* Set the Auto-reload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = (uint32_t) Structure->Prescaler;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a0c      	ldr	r2, [pc, #48]	; (8000d68 <TIM_Base_SetConfig+0x128>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d003      	beq.n	8000d42 <TIM_Base_SetConfig+0x102>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	; (8000d78 <TIM_Base_SetConfig+0x138>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d101      	bne.n	8000d46 <TIM_Base_SetConfig+0x106>
 8000d42:	2301      	movs	r3, #1
 8000d44:	e000      	b.n	8000d48 <TIM_Base_SetConfig+0x108>
 8000d46:	2300      	movs	r3, #0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <TIM_Base_SetConfig+0x114>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler 
	 and the repetition counter(only for TIM1 and TIM8) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	615a      	str	r2, [r3, #20]
}
 8000d5a:	bf00      	nop
 8000d5c:	3714      	adds	r7, #20
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	40000400 	.word	0x40000400
 8000d70:	40000800 	.word	0x40000800
 8000d74:	40000c00 	.word	0x40000c00
 8000d78:	40010400 	.word	0x40010400
 8000d7c:	40014000 	.word	0x40014000
 8000d80:	40014400 	.word	0x40014400
 8000d84:	40014800 	.word	0x40014800
 8000d88:	40001800 	.word	0x40001800
 8000d8c:	40001c00 	.word	0x40001c00
 8000d90:	40002000 	.word	0x40002000

08000d94 <TIM_OC2_SetConfig>:
 * @brief  Time Output Compare 2 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config: The output configuration structure
 * @retval None
 */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8000d94:	b480      	push	{r7}
 8000d96:	b087      	sub	sp, #28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx = 0U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
	uint32_t tmpccer = 0U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
	uint32_t tmpcr2 = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a1b      	ldr	r3, [r3, #32]
 8000dae:	f023 0210 	bic.w	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a1b      	ldr	r3, [r3, #32]
 8000dba:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000dce:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000dd6:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	021b      	lsls	r3, r3, #8
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC2P;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f023 0320 	bic.w	r3, r3, #32
 8000dea:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	617b      	str	r3, [r7, #20]

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <TIM_OC2_SetConfig+0xe8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d003      	beq.n	8000e08 <TIM_OC2_SetConfig+0x74>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <TIM_OC2_SetConfig+0xec>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d101      	bne.n	8000e0c <TIM_OC2_SetConfig+0x78>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <TIM_OC2_SetConfig+0x7a>
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d021      	beq.n	8000e56 <TIM_OC2_SetConfig+0xc2>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC2NP;
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000e18:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC2NE;
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000e2c:	617b      	str	r3, [r7, #20]

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS2;
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e34:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e3c:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR2 = OC_Config->Pulse;
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	639a      	str	r2, [r3, #56]	; 0x38

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	621a      	str	r2, [r3, #32]
}
 8000e70:	bf00      	nop
 8000e72:	371c      	adds	r7, #28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	40010400 	.word	0x40010400

08000e84 <TIM_OC1_SetConfig>:
 * @brief  Time Output Compare 1 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config: The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx = 0U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
	uint32_t tmpccer = 0U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
	uint32_t tmpcr2 = 0U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	f023 0201 	bic.w	r2, r3, #1
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ebe:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f023 0303 	bic.w	r3, r3, #3
 8000ec6:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f023 0302 	bic.w	r3, r3, #2
 8000ed8:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <TIM_OC1_SetConfig+0xe0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d003      	beq.n	8000ef4 <TIM_OC1_SetConfig+0x70>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <TIM_OC1_SetConfig+0xe4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d101      	bne.n	8000ef8 <TIM_OC1_SetConfig+0x74>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <TIM_OC1_SetConfig+0x76>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d01e      	beq.n	8000f3c <TIM_OC1_SetConfig+0xb8>
		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f023 0308 	bic.w	r3, r3, #8
 8000f04:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC1NE;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f023 0304 	bic.w	r3, r3, #4
 8000f16:	617b      	str	r3, [r7, #20]

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS1;
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f1e:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f26:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	621a      	str	r2, [r3, #32]
}
 8000f56:	bf00      	nop
 8000f58:	371c      	adds	r7, #28
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40010000 	.word	0x40010000
 8000f68:	40010400 	.word	0x40010400

08000f6c <TIM_OC3_SetConfig>:
 * @brief  Time Output Compare 3 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config: The output configuration structure
 * @retval None
 */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
	uint32_t tmpccer = 0U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
	uint32_t tmpcr2 = 0U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fa6:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f023 0303 	bic.w	r3, r3, #3
 8000fae:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000fc0:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a20      	ldr	r2, [pc, #128]	; (8001054 <TIM_OC3_SetConfig+0xe8>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d003      	beq.n	8000fde <TIM_OC3_SetConfig+0x72>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <TIM_OC3_SetConfig+0xec>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d101      	bne.n	8000fe2 <TIM_OC3_SetConfig+0x76>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <TIM_OC3_SetConfig+0x78>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d021      	beq.n	800102c <TIM_OC3_SetConfig+0xc0>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fee:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	697a      	ldr	r2, [r7, #20]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC3NE;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001002:	617b      	str	r3, [r7, #20]

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS3;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800100a:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001012:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68fa      	ldr	r2, [r7, #12]
 8001036:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	621a      	str	r2, [r3, #32]
}
 8001046:	bf00      	nop
 8001048:	371c      	adds	r7, #28
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40010000 	.word	0x40010000
 8001058:	40010400 	.word	0x40010400

0800105c <TIM_OC4_SetConfig>:
 * @brief  Time Output Compare 4 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config: The output configuration structure
 * @retval None
 */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx = 0U;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
	uint32_t tmpccer = 0U;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
	uint32_t tmpcr2 = 0U;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a1b      	ldr	r3, [r3, #32]
 8001082:	60fb      	str	r3, [r7, #12]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	617b      	str	r3, [r7, #20]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	613b      	str	r3, [r7, #16]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001096:	613b      	str	r3, [r7, #16]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800109e:	613b      	str	r3, [r7, #16]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010b2:	60fb      	str	r3, [r7, #12]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	031b      	lsls	r3, r3, #12
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]

	/*if((TIMx == TIM1) || (TIMx == TIM8))*/
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a14      	ldr	r2, [pc, #80]	; (8001114 <TIM_OC4_SetConfig+0xb8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d003      	beq.n	80010d0 <TIM_OC4_SetConfig+0x74>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a13      	ldr	r2, [pc, #76]	; (8001118 <TIM_OC4_SetConfig+0xbc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <TIM_OC4_SetConfig+0x78>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <TIM_OC4_SetConfig+0x7a>
 80010d4:	2300      	movs	r3, #0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d009      	beq.n	80010ee <TIM_OC4_SetConfig+0x92>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010e0:	617b      	str	r3, [r7, #20]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	019b      	lsls	r3, r3, #6
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	617b      	str	r3, [r7, #20]
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68fa      	ldr	r2, [r7, #12]
 8001106:	621a      	str	r2, [r3, #32]
}
 8001108:	bf00      	nop
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	40010000 	.word	0x40010000
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e055      	b.n	80011da <HAL_SPI_Init+0xbe>
	if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
	{
		assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
	}
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
#endif

	if (hspi->State == HAL_SPI_STATE_RESET) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800113a:	b2db      	uxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	d106      	bne.n	800114e <HAL_SPI_Init+0x32>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f873 	bl	8001234 <HAL_SPI_MspInit>
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2202      	movs	r2, #2
 8001152:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001164:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6851      	ldr	r1, [r2, #4]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6892      	ldr	r2, [r2, #8]
 8001172:	4311      	orrs	r1, r2
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	68d2      	ldr	r2, [r2, #12]
 8001178:	4311      	orrs	r1, r2
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6912      	ldr	r2, [r2, #16]
 800117e:	4311      	orrs	r1, r2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6952      	ldr	r2, [r2, #20]
 8001184:	4311      	orrs	r1, r2
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6992      	ldr	r2, [r2, #24]
 800118a:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800118e:	4311      	orrs	r1, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	69d2      	ldr	r2, [r2, #28]
 8001194:	4311      	orrs	r1, r2
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	6a12      	ldr	r2, [r2, #32]
 800119a:	4311      	orrs	r1, r2
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
					| (hspi->Init.NSS & SPI_CR1_SSM)
					| hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit
					| hspi->Init.CRCCalculation));

	/* Configure : NSS management */
	WRITE_REG(hspi->Instance->CR2,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6992      	ldr	r2, [r2, #24]
 80011ac:	0c12      	lsrs	r2, r2, #16
 80011ae:	f002 0104 	and.w	r1, r2, #4
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011b6:	430a      	orrs	r2, r1
 80011b8:	605a      	str	r2, [r3, #4]
	}
#endif

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	69d2      	ldr	r2, [r2, #28]
 80011c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011c8:	61da      	str	r2, [r3, #28]
#endif

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->State = HAL_SPI_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop

080011e4 <HAL_SPI_DeInit>:
 * @brief  De Initialize the SPI peripheral.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_SPI_DeInit+0x12>
		return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e01a      	b.n	800122c <HAL_SPI_DeInit+0x48>
	}

	/* Check SPI Instance parameter */
	assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

	hspi->State = HAL_SPI_STATE_BUSY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2202      	movs	r2, #2
 80011fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Disable the SPI Peripheral Clock */
	__HAL_SPI_DISABLE(hspi);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	6812      	ldr	r2, [r2, #0]
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800120c:	601a      	str	r2, [r3, #0]

	/* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
	HAL_SPI_MspDeInit(hspi);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f81a 	bl	8001248 <HAL_SPI_MspDeInit>

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->State = HAL_SPI_STATE_RESET;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Release Lock */
	__HAL_UNLOCK(hspi);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_SPI_MspInit>:
 * @brief  Initialize the SPI MSP.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval None
 */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hspi);
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SPI_MspInit should be implemented in the user file
	 */
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_SPI_MspDeInit>:
 * @brief  De-Initialize the SPI MSP.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval None
 */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hspi);
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SPI_MspDeInit should be implemented in the user file
	 */
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <HAL_SPI_TransmitReceive>:
 * @param  Size: amount of data to be sent and received
 * @param  Timeout: Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi,
		uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	60b9      	str	r1, [r7, #8]
 8001266:	607a      	str	r2, [r7, #4]
 8001268:	807b      	strh	r3, [r7, #2]
#ifdef USE_SPI_CRC
	__IO uint16_t tmpreg = 0U;
#endif
	uint32_t tickstart = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef errorcode = HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	75fb      	strb	r3, [r7, #23]

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_SPI_TransmitReceive+0x24>
 800127c:	2302      	movs	r3, #2
 800127e:	e113      	b.n	80014a8 <HAL_SPI_TransmitReceive+0x24c>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Init tickstart for timeout managment*/
	tickstart = HAL_GetTick();
 8001288:	f001 f8a2 	bl	80023d0 <HAL_GetTick>
 800128c:	6138      	str	r0, [r7, #16]

	if (!((hspi->State == HAL_SPI_STATE_READY)
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2b01      	cmp	r3, #1
 8001298:	d011      	beq.n	80012be <HAL_SPI_TransmitReceive+0x62>
			|| ((hspi->Init.Mode == SPI_MODE_MASTER)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	685b      	ldr	r3, [r3, #4]
	__HAL_LOCK(hspi);

	/* Init tickstart for timeout managment*/
	tickstart = HAL_GetTick();

	if (!((hspi->State == HAL_SPI_STATE_READY)
 800129e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80012a2:	d109      	bne.n	80012b8 <HAL_SPI_TransmitReceive+0x5c>
			|| ((hspi->Init.Mode == SPI_MODE_MASTER)
					&& (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d105      	bne.n	80012b8 <HAL_SPI_TransmitReceive+0x5c>
					&& (hspi->State == HAL_SPI_STATE_BUSY_RX)))) {
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d002      	beq.n	80012be <HAL_SPI_TransmitReceive+0x62>
		errorcode = HAL_BUSY;
 80012b8:	2302      	movs	r3, #2
 80012ba:	75fb      	strb	r3, [r7, #23]
		goto error;
 80012bc:	e0eb      	b.n	8001496 <HAL_SPI_TransmitReceive+0x23a>
	}

	if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d005      	beq.n	80012d0 <HAL_SPI_TransmitReceive+0x74>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <HAL_SPI_TransmitReceive+0x74>
 80012ca:	887b      	ldrh	r3, [r7, #2]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <HAL_SPI_TransmitReceive+0x7a>
		errorcode = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	75fb      	strb	r3, [r7, #23]
		goto error;
 80012d4:	e0df      	b.n	8001496 <HAL_SPI_TransmitReceive+0x23a>
	}

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State == HAL_SPI_STATE_READY) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d103      	bne.n	80012ea <HAL_SPI_TransmitReceive+0x8e>
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	}

	/* Set the transaction information */
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	2200      	movs	r2, #0
 80012ee:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->pRxBuffPtr = (uint8_t *) pRxData;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->RxXferCount = Size;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	887a      	ldrh	r2, [r7, #2]
 80012fa:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi->RxXferSize = Size;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->pTxBuffPtr = (uint8_t *) pTxData;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	68ba      	ldr	r2, [r7, #8]
 8001306:	631a      	str	r2, [r3, #48]	; 0x30
	hspi->TxXferCount = Size;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	86da      	strh	r2, [r3, #54]	; 0x36
	hspi->TxXferSize = Size;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	887a      	ldrh	r2, [r7, #2]
 8001312:	869a      	strh	r2, [r3, #52]	; 0x34

	/*Init field not used in handle to zero */
	hspi->RxISR = NULL;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->TxISR = NULL;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	645a      	str	r2, [r3, #68]	; 0x44
		SPI_RESET_CRC(hspi);
	}
#endif

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132a:	2b00      	cmp	r3, #0
 800132c:	d107      	bne.n	800133e <HAL_SPI_TransmitReceive+0xe2>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800133c:	601a      	str	r2, [r3, #0]
	}

	/* Transmit and Receive data in 16 Bit mode */
	if (hspi->Init.DataSize == SPI_DATASIZE_16BIT) {
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001346:	f040 808e 	bne.w	8001466 <HAL_SPI_TransmitReceive+0x20a>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 800134a:	e041      	b.n	80013d0 <HAL_SPI_TransmitReceive+0x174>
			/* Check TXE flag */
			if ((hspi->TxXferCount > 0U)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001350:	2b00      	cmp	r3, #0
 8001352:	d014      	beq.n	800137e <HAL_SPI_TransmitReceive+0x122>
					&& (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))) {
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00d      	beq.n	800137e <HAL_SPI_TransmitReceive+0x122>
				hspi->Instance->DR = *((uint16_t *) pTxData);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	8812      	ldrh	r2, [r2, #0]
 800136a:	60da      	str	r2, [r3, #12]
				pTxData += sizeof(uint16_t);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	3302      	adds	r3, #2
 8001370:	60bb      	str	r3, [r7, #8]
				hspi->TxXferCount--;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001376:	3b01      	subs	r3, #1
 8001378:	b29a      	uxth	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	86da      	strh	r2, [r3, #54]	; 0x36
				}
#endif
			}

			/* Check RXNE flag */
			if ((hspi->RxXferCount > 0U)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001382:	2b00      	cmp	r3, #0
 8001384:	d015      	beq.n	80013b2 <HAL_SPI_TransmitReceive+0x156>
					&& (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))) {
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00e      	beq.n	80013b2 <HAL_SPI_TransmitReceive+0x156>
				*((uint16_t *) pRxData) = hspi->Instance->DR;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	b29a      	uxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	801a      	strh	r2, [r3, #0]
				pRxData += sizeof(uint16_t);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3302      	adds	r3, #2
 80013a4:	607b      	str	r3, [r7, #4]
				hspi->RxXferCount--;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013aa:	3b01      	subs	r3, #1
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
			if ((Timeout != HAL_MAX_DELAY)
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b8:	d00a      	beq.n	80013d0 <HAL_SPI_TransmitReceive+0x174>
					&& ((HAL_GetTick() - tickstart) >= Timeout)) {
 80013ba:	f001 f809 	bl	80023d0 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad2      	subs	r2, r2, r3
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d302      	bcc.n	80013d0 <HAL_SPI_TransmitReceive+0x174>
				errorcode = HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	75fb      	strb	r3, [r7, #23]
				goto error;
 80013ce:	e062      	b.n	8001496 <HAL_SPI_TransmitReceive+0x23a>
		__HAL_SPI_ENABLE(hspi);
	}

	/* Transmit and Receive data in 16 Bit mode */
	if (hspi->Init.DataSize == SPI_DATASIZE_16BIT) {
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d1b9      	bne.n	800134c <HAL_SPI_TransmitReceive+0xf0>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1b5      	bne.n	800134c <HAL_SPI_TransmitReceive+0xf0>
 80013e0:	e049      	b.n	8001476 <HAL_SPI_TransmitReceive+0x21a>
	}
	/* Transmit and Receive data in 8 Bit mode */
	else {
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
			/* check TXE flag */
			if ((hspi->TxXferCount > 0U)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d015      	beq.n	8001416 <HAL_SPI_TransmitReceive+0x1ba>
					&& (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))) {
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00e      	beq.n	8001416 <HAL_SPI_TransmitReceive+0x1ba>
				*(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f103 020c 	add.w	r2, r3, #12
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c59      	adds	r1, r3, #1
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	7013      	strb	r3, [r2, #0]
				hspi->TxXferCount--;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	86da      	strh	r2, [r3, #54]	; 0x36
				}
#endif
			}

			/* Wait until RXNE flag is reset */
			if ((hspi->RxXferCount > 0U)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800141a:	2b00      	cmp	r3, #0
 800141c:	d014      	beq.n	8001448 <HAL_SPI_TransmitReceive+0x1ec>
					&& (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))) {
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00d      	beq.n	8001448 <HAL_SPI_TransmitReceive+0x1ec>
				(*(uint8_t *) pRxData++) = hspi->Instance->DR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	68d2      	ldr	r2, [r2, #12]
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	701a      	strb	r2, [r3, #0]
				hspi->RxXferCount--;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001440:	3b01      	subs	r3, #1
 8001442:	b29a      	uxth	r2, r3
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
			if ((Timeout != HAL_MAX_DELAY)
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144e:	d00a      	beq.n	8001466 <HAL_SPI_TransmitReceive+0x20a>
					&& ((HAL_GetTick() - tickstart) >= Timeout)) {
 8001450:	f000 ffbe 	bl	80023d0 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad2      	subs	r2, r2, r3
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	429a      	cmp	r2, r3
 800145e:	d302      	bcc.n	8001466 <HAL_SPI_TransmitReceive+0x20a>
				errorcode = HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	75fb      	strb	r3, [r7, #23]
				goto error;
 8001464:	e017      	b.n	8001496 <HAL_SPI_TransmitReceive+0x23a>
			}
		}
	}
	/* Transmit and Receive data in 8 Bit mode */
	else {
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1b9      	bne.n	80013e2 <HAL_SPI_TransmitReceive+0x186>
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1b5      	bne.n	80013e2 <HAL_SPI_TransmitReceive+0x186>
		errorcode = HAL_ERROR;
	}
#endif

	/* Check the end of the transaction */
	if (SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK) {
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	6a39      	ldr	r1, [r7, #32]
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 f88a 	bl	8001594 <SPI_CheckFlag_BSY>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_SPI_TransmitReceive+0x23a>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148a:	f043 0220 	orr.w	r2, r3, #32
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	655a      	str	r2, [r3, #84]	; 0x54
		errorcode = HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	__HAL_UNLOCK(hspi);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return errorcode;
 80014a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_SPI_GetState>:
 * @brief  Return the SPI handle state.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval SPI state
 */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi) {
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	/* Return SPI handle state */
	return hspi->State;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80014be:	b2db      	uxtb	r3, r3
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SPI_WaitFlagStateUntilTimeout>:
 * @param Timeout: Timeout duration
 * @param Tickstart: tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
 80014d8:	603b      	str	r3, [r7, #0]
	while ((hspi->Instance->SR & Flag) != State) {
 80014da:	e04d      	b.n	8001578 <SPI_WaitFlagStateUntilTimeout+0xac>
		if (Timeout != HAL_MAX_DELAY) {
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e2:	d049      	beq.n	8001578 <SPI_WaitFlagStateUntilTimeout+0xac>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout)) {
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <SPI_WaitFlagStateUntilTimeout+0x2e>
 80014ea:	f000 ff71 	bl	80023d0 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	1ad2      	subs	r2, r2, r3
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d33e      	bcc.n	8001578 <SPI_WaitFlagStateUntilTimeout+0xac>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	6852      	ldr	r2, [r2, #4]
 8001504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001508:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001512:	d111      	bne.n	8001538 <SPI_WaitFlagStateUntilTimeout+0x6c>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800151c:	d004      	beq.n	8001528 <SPI_WaitFlagStateUntilTimeout+0x5c>
								|| (hspi->Init.Direction
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001526:	d107      	bne.n	8001538 <SPI_WaitFlagStateUntilTimeout+0x6c>
										== SPI_DIRECTION_2LINES_RXONLY))) {
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001536:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001540:	d110      	bne.n	8001564 <SPI_WaitFlagStateUntilTimeout+0x98>
					SPI_RESET_CRC(hspi);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6819      	ldr	r1, [r3, #0]
 800154c:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8001550:	400b      	ands	r3, r1
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	6812      	ldr	r2, [r2, #0]
 800155e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001562:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e008      	b.n	800158a <SPI_WaitFlagStateUntilTimeout+0xbe>
 * @param Tickstart: tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart) {
	while ((hspi->Instance->SR & Flag) != State) {
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	401a      	ands	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	d1a9      	bne.n	80014dc <SPI_WaitFlagStateUntilTimeout+0x10>
				return HAL_TIMEOUT;
			}
		}
	}

	return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop

08001594 <SPI_CheckFlag_BSY>:
 * @param Timeout: Timeout duration
 * @param Tickstart: tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi,
		uint32_t Timeout, uint32_t Tickstart) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af02      	add	r7, sp, #8
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
	/* Control the BSY flag */
	if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2200      	movs	r2, #0
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7ff ff8e 	bl	80014cc <SPI_WaitFlagStateUntilTimeout>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <SPI_CheckFlag_BSY+0x32>
			Tickstart) != HAL_OK) {
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ba:	f043 0220 	orr.w	r2, r3, #32
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	655a      	str	r2, [r3, #84]	; 0x54
		return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e000      	b.n	80015c8 <SPI_CheckFlag_BSY+0x34>
	}
	return HAL_OK;
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_RCC_OscConfig>:
 *         first and then HSE On or HSE Bypass.
 
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b098      	sub	sp, #96	; 0x60
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 80015d8:	2300      	movs	r3, #0
 80015da:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d04f      	beq.n	8001688 <HAL_RCC_OscConfig+0xb8>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015e8:	4ba4      	ldr	r3, [pc, #656]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 030c 	and.w	r3, r3, #12
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d00b      	beq.n	800160c <HAL_RCC_OscConfig+0x3c>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015f4:	4ba1      	ldr	r3, [pc, #644]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d111      	bne.n	8001624 <HAL_RCC_OscConfig+0x54>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001600:	4b9e      	ldr	r3, [pc, #632]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00b      	beq.n	8001624 <HAL_RCC_OscConfig+0x54>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160c:	4b9b      	ldr	r3, [pc, #620]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d036      	beq.n	8001686 <HAL_RCC_OscConfig+0xb6>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d132      	bne.n	8001686 <HAL_RCC_OscConfig+0xb6>
				return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e1f6      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001624:	4a96      	ldr	r2, [pc, #600]	; (8001880 <HAL_RCC_OscConfig+0x2b0>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	7013      	strb	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d013      	beq.n	800165e <HAL_RCC_OscConfig+0x8e>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001636:	f000 fecb 	bl	80023d0 <HAL_GetTick>
 800163a:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x80>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 800163e:	f000 fec7 	bl	80023d0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x80>
						return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e1e0      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001650:	4b8a      	ldr	r3, [pc, #552]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x6e>
 800165c:	e014      	b.n	8001688 <HAL_RCC_OscConfig+0xb8>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800165e:	f000 feb7 	bl	80023d0 <HAL_GetTick>
 8001662:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001664:	e008      	b.n	8001678 <HAL_RCC_OscConfig+0xa8>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001666:	f000 feb3 	bl	80023d0 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	2b64      	cmp	r3, #100	; 0x64
 8001672:	d901      	bls.n	8001678 <HAL_RCC_OscConfig+0xa8>
						return HAL_TIMEOUT;
 8001674:	2303      	movs	r3, #3
 8001676:	e1cc      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001678:	4b80      	ldr	r3, [pc, #512]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f0      	bne.n	8001666 <HAL_RCC_OscConfig+0x96>
 8001684:	e000      	b.n	8001688 <HAL_RCC_OscConfig+0xb8>
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 8082 	beq.w	800179a <HAL_RCC_OscConfig+0x1ca>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001696:	4b79      	ldr	r3, [pc, #484]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00b      	beq.n	80016ba <HAL_RCC_OscConfig+0xea>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016a2:	4b76      	ldr	r3, [pc, #472]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d12b      	bne.n	8001706 <HAL_RCC_OscConfig+0x136>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80016ae:	4b73      	ldr	r3, [pc, #460]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d125      	bne.n	8001706 <HAL_RCC_OscConfig+0x136>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ba:	4b70      	ldr	r3, [pc, #448]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x102>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x102>
				return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e19f      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80016d2:	486a      	ldr	r0, [pc, #424]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	4b69      	ldr	r3, [pc, #420]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	21f8      	movs	r1, #248	; 0xf8
 80016e2:	64f9      	str	r1, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80016e6:	fa91 f1a1 	rbit	r1, r1
 80016ea:	62f9      	str	r1, [r7, #44]	; 0x2c
   return(result);
 80016ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ee:	6379      	str	r1, [r7, #52]	; 0x34
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80016f2:	fab1 f181 	clz	r1, r1
 80016f6:	f887 1033 	strb.w	r1, [r7, #51]	; 0x33
  return(result);
 80016fa:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 80016fe:	408b      	lsls	r3, r1
 8001700:	4313      	orrs	r3, r2
 8001702:	6003      	str	r3, [r0, #0]
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001704:	e049      	b.n	800179a <HAL_RCC_OscConfig+0x1ca>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d02f      	beq.n	800176e <HAL_RCC_OscConfig+0x19e>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800170e:	4b5d      	ldr	r3, [pc, #372]	; (8001884 <HAL_RCC_OscConfig+0x2b4>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001714:	f000 fe5c 	bl	80023d0 <HAL_GetTick>
 8001718:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x15e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800171c:	f000 fe58 	bl	80023d0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x15e>
						return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e171      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800172e:	4b53      	ldr	r3, [pc, #332]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x14c>
						return HAL_TIMEOUT;
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800173a:	4850      	ldr	r0, [pc, #320]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 800173c:	4b4f      	ldr	r3, [pc, #316]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	21f8      	movs	r1, #248	; 0xf8
 800174a:	6579      	str	r1, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800174c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800174e:	fa91 f1a1 	rbit	r1, r1
 8001752:	6279      	str	r1, [r7, #36]	; 0x24
   return(result);
 8001754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001756:	6539      	str	r1, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001758:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800175a:	fab1 f181 	clz	r1, r1
 800175e:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
  return(result);
 8001762:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8001766:	408b      	lsls	r3, r1
 8001768:	4313      	orrs	r3, r2
 800176a:	6003      	str	r3, [r0, #0]
 800176c:	e015      	b.n	800179a <HAL_RCC_OscConfig+0x1ca>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 800176e:	4b45      	ldr	r3, [pc, #276]	; (8001884 <HAL_RCC_OscConfig+0x2b4>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001774:	f000 fe2c 	bl	80023d0 <HAL_GetTick>
 8001778:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x1be>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800177c:	f000 fe28 	bl	80023d0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x1be>
						return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e141      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800178e:	4b3b      	ldr	r3, [pc, #236]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x1ac>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d030      	beq.n	8001808 <HAL_RCC_OscConfig+0x238>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d016      	beq.n	80017dc <HAL_RCC_OscConfig+0x20c>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 80017ae:	4b36      	ldr	r3, [pc, #216]	; (8001888 <HAL_RCC_OscConfig+0x2b8>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80017b4:	f000 fe0c 	bl	80023d0 <HAL_GetTick>
 80017b8:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x1fe>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80017bc:	f000 fe08 	bl	80023d0 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x1fe>
					return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e121      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>

			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 80017d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x1ec>
 80017da:	e015      	b.n	8001808 <HAL_RCC_OscConfig+0x238>
					return HAL_TIMEOUT;
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80017dc:	4b2a      	ldr	r3, [pc, #168]	; (8001888 <HAL_RCC_OscConfig+0x2b8>)
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80017e2:	f000 fdf5 	bl	80023d0 <HAL_GetTick>
 80017e6:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x22c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80017ea:	f000 fdf1 	bl	80023d0 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x22c>
					return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e10a      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>

			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1f0      	bne.n	80017ea <HAL_RCC_OscConfig+0x21a>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d066      	beq.n	80018e2 <HAL_RCC_OscConfig+0x312>
			== RCC_OSCILLATORTYPE_LSE) {
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	4a18      	ldr	r2, [pc, #96]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001822:	6413      	str	r3, [r2, #64]	; 0x40
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_RCC_OscConfig+0x2ac>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <HAL_RCC_OscConfig+0x2bc>)
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <HAL_RCC_OscConfig+0x2bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183a:	6013      	str	r3, [r2, #0]

		/* Wait for Backup domain Write protection enable */
		tickstart = HAL_GetTick();
 800183c:	f000 fdc8 	bl	80023d0 <HAL_GetTick>
 8001840:	65f8      	str	r0, [r7, #92]	; 0x5c

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x286>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8001844:	f000 fdc4 	bl	80023d0 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x286>
				return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0dd      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>
		PWR->CR |= PWR_CR_DBP;

		/* Wait for Backup domain Write protection enable */
		tickstart = HAL_GetTick();

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_RCC_OscConfig+0x2bc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x274>
				return HAL_TIMEOUT;
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <HAL_RCC_OscConfig+0x2c0>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	7013      	strb	r3, [r2, #0]
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d021      	beq.n	80018b8 <HAL_RCC_OscConfig+0x2e8>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001874:	f000 fdac 	bl	80023d0 <HAL_GetTick>
 8001878:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800187a:	e016      	b.n	80018aa <HAL_RCC_OscConfig+0x2da>
 800187c:	40023800 	.word	0x40023800
 8001880:	40023802 	.word	0x40023802
 8001884:	42470000 	.word	0x42470000
 8001888:	42470e80 	.word	0x42470e80
 800188c:	40007000 	.word	0x40007000
 8001890:	40023870 	.word	0x40023870
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001894:	f000 fd9c 	bl	80023d0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x2da>
					return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0b3      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80018aa:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <HAL_RCC_OscConfig+0x44c>)
 80018ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0ee      	beq.n	8001894 <HAL_RCC_OscConfig+0x2c4>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x312>
					return HAL_TIMEOUT;
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80018b8:	f000 fd8a 	bl	80023d0 <HAL_GetTick>
 80018bc:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80018be:	e00a      	b.n	80018d6 <HAL_RCC_OscConfig+0x306>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80018c0:	f000 fd86 	bl	80023d0 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x306>
					return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e09d      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80018d6:	4b51      	ldr	r3, [pc, #324]	; (8001a1c <HAL_RCC_OscConfig+0x44c>)
 80018d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ee      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2f0>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8092 	beq.w	8001a10 <HAL_RCC_OscConfig+0x440>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 80018ec:	4b4b      	ldr	r3, [pc, #300]	; (8001a1c <HAL_RCC_OscConfig+0x44c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	f000 8089 	beq.w	8001a0c <HAL_RCC_OscConfig+0x43c>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d16d      	bne.n	80019de <HAL_RCC_OscConfig+0x40e>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001902:	4b47      	ldr	r3, [pc, #284]	; (8001a20 <HAL_RCC_OscConfig+0x450>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001908:	f000 fd62 	bl	80023d0 <HAL_GetTick>
 800190c:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x352>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001910:	f000 fd5e 	bl	80023d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x352>
						return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e077      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001922:	4b3e      	ldr	r3, [pc, #248]	; (8001a1c <HAL_RCC_OscConfig+0x44c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 800192e:	483b      	ldr	r0, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x44c>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a1b      	ldr	r3, [r3, #32]
 8001938:	431a      	orrs	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001942:	64b9      	str	r1, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001946:	fa91 f1a1 	rbit	r1, r1
 800194a:	60f9      	str	r1, [r7, #12]
   return(result);
 800194c:	68f9      	ldr	r1, [r7, #12]
 800194e:	6479      	str	r1, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001950:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001952:	fab1 f181 	clz	r1, r1
 8001956:	74f9      	strb	r1, [r7, #19]
  return(result);
 8001958:	7cf9      	ldrb	r1, [r7, #19]
 800195a:	408b      	lsls	r3, r1
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	3b01      	subs	r3, #1
 8001966:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800196a:	6439      	str	r1, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800196e:	fa91 f1a1 	rbit	r1, r1
 8001972:	6179      	str	r1, [r7, #20]
   return(result);
 8001974:	6979      	ldr	r1, [r7, #20]
 8001976:	63f9      	str	r1, [r7, #60]	; 0x3c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800197a:	fab1 f181 	clz	r1, r1
 800197e:	76f9      	strb	r1, [r7, #27]
  return(result);
 8001980:	7ef9      	ldrb	r1, [r7, #27]
 8001982:	408b      	lsls	r3, r1
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800198e:	63b9      	str	r1, [r7, #56]	; 0x38
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001992:	fa91 f1a1 	rbit	r1, r1
 8001996:	61f9      	str	r1, [r7, #28]
   return(result);
 8001998:	69f9      	ldr	r1, [r7, #28]
 800199a:	65b9      	str	r1, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800199c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800199e:	fab1 f181 	clz	r1, r1
 80019a2:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
  return(result);
 80019a6:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80019aa:	408b      	lsls	r3, r1
 80019ac:	4313      	orrs	r3, r2
 80019ae:	6043      	str	r3, [r0, #4]
								| (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)
										<< POSITION_VAL(RCC_PLLCFGR_PLLP))
								| (RCC_OscInitStruct->PLL.PLLQ
										<< POSITION_VAL(RCC_PLLCFGR_PLLQ))));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x450>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80019b6:	f000 fd0b 	bl	80023d0 <HAL_GetTick>
 80019ba:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x400>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80019be:	f000 fd07 	bl	80023d0 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x400>
						return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e020      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_RCC_OscConfig+0x44c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0f0      	beq.n	80019be <HAL_RCC_OscConfig+0x3ee>
 80019dc:	e018      	b.n	8001a10 <HAL_RCC_OscConfig+0x440>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_RCC_OscConfig+0x450>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80019e4:	f000 fcf4 	bl	80023d0 <HAL_GetTick>
 80019e8:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x42e>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80019ec:	f000 fcf0 	bl	80023d0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x42e>
						return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_RCC_OscConfig+0x44c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x41c>
 8001a0a:	e001      	b.n	8001a10 <HAL_RCC_OscConfig+0x440>
						return HAL_TIMEOUT;
					}
				}
			}
		} else {
			return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x442>
		}
	}
	return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3760      	adds	r7, #96	; 0x60
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	42470060 	.word	0x42470060

08001a24 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
	 must be correctly programmed according to the frequency of the CPU clock 
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > (FLASH->ACR & FLASH_ACR_LATENCY)) {
 8001a32:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <HAL_RCC_ClockConfig+0x1dc>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 020f 	and.w	r2, r3, #15
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d20c      	bcs.n	8001a5a <HAL_RCC_ClockConfig+0x36>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001a40:	4b6f      	ldr	r3, [pc, #444]	; (8001c00 <HAL_RCC_ClockConfig+0x1dc>)
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8001a48:	4b6d      	ldr	r3, [pc, #436]	; (8001c00 <HAL_RCC_ClockConfig+0x1dc>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 020f 	and.w	r2, r3, #15
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x36>
			return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0ce      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d4>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d008      	beq.n	8001a78 <HAL_RCC_ClockConfig+0x54>
			== RCC_CLOCKTYPE_HCLK) {
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a66:	4967      	ldr	r1, [pc, #412]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001a68:	4b66      	ldr	r3, [pc, #408]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8082 	beq.w	8001b8a <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x7a>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_ClockConfig+0xaa>
				return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e0ac      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d4>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_ClockConfig+0x8a>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0x9a>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001aae:	4b55      	ldr	r3, [pc, #340]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xaa>
				return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e09c      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d4>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001abe:	4b51      	ldr	r3, [pc, #324]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xaa>
				return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e094      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d4>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	494d      	ldr	r1, [pc, #308]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f023 0203 	bic.w	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]
		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8001ae0:	f000 fc76 	bl	80023d0 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d112      	bne.n	8001b14 <HAL_RCC_ClockConfig+0xf0>
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE) {
 8001aee:	e00a      	b.n	8001b06 <HAL_RCC_ClockConfig+0xe2>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001af0:	f000 fc6e 	bl	80023d0 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_ClockConfig+0xe2>
					return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e078      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d4>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
		/* Get Start Tick*/
		tickstart = HAL_GetTick();

		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE) {
 8001b06:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d1ee      	bne.n	8001af0 <HAL_RCC_ClockConfig+0xcc>
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x166>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d112      	bne.n	8001b42 <HAL_RCC_ClockConfig+0x11e>
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001b1c:	e00a      	b.n	8001b34 <HAL_RCC_ClockConfig+0x110>
					!= RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001b1e:	f000 fc57 	bl	80023d0 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_ClockConfig+0x110>
					return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e061      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d4>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001b34:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d1ee      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xfa>
 8001b40:	e023      	b.n	8001b8a <HAL_RCC_ClockConfig+0x166>
					!= RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_ClockConfig+0x15a>
				== RCC_SYSCLKSOURCE_PLLRCLK) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001b4a:	e00a      	b.n	8001b62 <HAL_RCC_ClockConfig+0x13e>
					!= RCC_SYSCLKSOURCE_STATUS_PLLRCLK) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001b4c:	f000 fc40 	bl	80023d0 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_ClockConfig+0x13e>
					return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e04a      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d4>
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource
				== RCC_SYSCLKSOURCE_PLLRCLK) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	e7f1      	b.n	8001b4c <HAL_RCC_ClockConfig+0x128>
					return HAL_TIMEOUT;
				}
			}
		} else {
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001b68:	f000 fc32 	bl	80023d0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x15a>
					return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e03c      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d4>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else {
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1ee      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x144>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < (FLASH->ACR & FLASH_ACR_LATENCY)) {
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_RCC_ClockConfig+0x1dc>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 020f 	and.w	r2, r3, #15
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d90c      	bls.n	8001bb2 <HAL_RCC_ClockConfig+0x18e>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_ClockConfig+0x1dc>)
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8001ba0:	4b17      	ldr	r3, [pc, #92]	; (8001c00 <HAL_RCC_ClockConfig+0x1dc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 020f 	and.w	r2, r3, #15
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d001      	beq.n	8001bb2 <HAL_RCC_ClockConfig+0x18e>
			return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e022      	b.n	8001bf8 <HAL_RCC_ClockConfig+0x1d4>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x1ac>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8001bbe:	4911      	ldr	r1, [pc, #68]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x1cc>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8001bdc:	4909      	ldr	r1, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_ClockConfig+0x1e0>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(TICK_INT_PRIORITY);
 8001bf0:	200f      	movs	r0, #15
 8001bf2:	f7fe fd25 	bl	8000640 <HAL_InitTick>

	return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023c00 	.word	0x40023c00
 8001c04:	40023800 	.word	0x40023800

08001c08 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *         
 *               
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8001c08:	b480      	push	{r7}
 8001c0a:	b091      	sub	sp, #68	; 0x44
 8001c0c:	af00      	add	r7, sp, #0
uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
 8001c12:	2300      	movs	r3, #0
 8001c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c16:	2300      	movs	r3, #0
 8001c18:	633b      	str	r3, [r7, #48]	; 0x30
uint32_t sysclockfreq = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38

/* Get SYSCLK source -------------------------------------------------------*/
switch (RCC->CFGR & RCC_CFGR_SWS) {
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d006      	beq.n	8001c38 <HAL_RCC_GetSysClockFreq+0x30>
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d007      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0x36>
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d163      	bne.n	8001cfa <HAL_RCC_GetSysClockFreq+0xf2>
case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
{
sysclockfreq = HSI_VALUE;
 8001c32:	4b38      	ldr	r3, [pc, #224]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8001c36:	e063      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0xf8>
}
case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
{
sysclockfreq = HSE_VALUE;
 8001c38:	4b37      	ldr	r3, [pc, #220]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c3a:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8001c3c:	e060      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0xf8>
}
case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
{
/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 SYSCLK = PLL_VCO / PLLP */
pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c3e:	4b34      	ldr	r3, [pc, #208]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8001c48:	4b31      	ldr	r3, [pc, #196]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d01b      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x84>
	/* HSE used as PLL clock source */
	pllvco = ((HSE_VALUE / pllm)
 8001c54:	4a30      	ldr	r2, [pc, #192]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c58:	fbb2 f2f3 	udiv	r2, r2, r3
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001c5c:	4b2c      	ldr	r3, [pc, #176]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	6859      	ldr	r1, [r3, #4]
 8001c60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c64:	400b      	ands	r3, r1
 8001c66:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001c6a:	62b9      	str	r1, [r7, #40]	; 0x28
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c6e:	fa91 f1a1 	rbit	r1, r1
 8001c72:	6139      	str	r1, [r7, #16]
   return(result);
 8001c74:	6939      	ldr	r1, [r7, #16]
 8001c76:	61b9      	str	r1, [r7, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	69b9      	ldr	r1, [r7, #24]
 8001c7a:	fab1 f181 	clz	r1, r1
 8001c7e:	75f9      	strb	r1, [r7, #23]
  return(result);
 8001c80:	7df9      	ldrb	r1, [r7, #23]
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001c82:	40cb      	lsrs	r3, r1
/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 SYSCLK = PLL_VCO / PLLP */
pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
	/* HSE used as PLL clock source */
	pllvco = ((HSE_VALUE / pllm)
 8001c84:	fb03 f302 	mul.w	r3, r3, r2
 8001c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c8a:	e01a      	b.n	8001cc2 <HAL_RCC_GetSysClockFreq+0xba>
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
} else {
	/* HSI used as PLL clock source */
	pllvco = ((HSI_VALUE / pllm)
 8001c8c:	4a21      	ldr	r2, [pc, #132]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c90:	fbb2 f2f3 	udiv	r2, r2, r3
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001c94:	4b1e      	ldr	r3, [pc, #120]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c96:	6859      	ldr	r1, [r3, #4]
 8001c98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001ca2:	6239      	str	r1, [r7, #32]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	fa91 f1a1 	rbit	r1, r1
 8001caa:	60b9      	str	r1, [r7, #8]
   return(result);
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	62f9      	str	r1, [r7, #44]	; 0x2c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cb2:	fab1 f181 	clz	r1, r1
 8001cb6:	73f9      	strb	r1, [r7, #15]
  return(result);
 8001cb8:	7bf9      	ldrb	r1, [r7, #15]
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001cba:	40cb      	lsrs	r3, r1
	pllvco = ((HSE_VALUE / pllm)
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
} else {
	/* HSI used as PLL clock source */
	pllvco = ((HSI_VALUE / pllm)
 8001cbc:	fb03 f302 	mul.w	r3, r3, r2
 8001cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
}
pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP))
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001cce:	61fa      	str	r2, [r7, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	fa92 f2a2 	rbit	r2, r2
 8001cd6:	603a      	str	r2, [r7, #0]
   return(result);
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	627a      	str	r2, [r7, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cde:	fab2 f282 	clz	r2, r2
 8001ce2:	71fa      	strb	r2, [r7, #7]
  return(result);
 8001ce4:	79fa      	ldrb	r2, [r7, #7]
 8001ce6:	40d3      	lsrs	r3, r2
		+ 1U) * 2U);
 8001ce8:	3301      	adds	r3, #1
	/* HSI used as PLL clock source */
	pllvco = ((HSI_VALUE / pllm)
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
}
pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP))
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
		+ 1U) * 2U);

sysclockfreq = pllvco / pllp;
 8001cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8001cf8:	e002      	b.n	8001d00 <HAL_RCC_GetSysClockFreq+0xf8>
}
default: {
sysclockfreq = HSI_VALUE;
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8001cfe:	bf00      	nop
}
}
return sysclockfreq;
 8001d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3744      	adds	r7, #68	; 0x44
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	00f42400 	.word	0x00f42400
 8001d18:	007a1200 	.word	0x007a1200

08001d1c <HAL_RCC_GetHCLKFreq>:
 * 
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001d22:	f7ff ff71 	bl	8001c08 <HAL_RCC_GetSysClockFreq>
 8001d26:	4601      	mov	r1, r0
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 8001d28:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <HAL_RCC_GetHCLKFreq+0x48>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d30:	22f0      	movs	r2, #240	; 0xf0
 8001d32:	60fa      	str	r2, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	fa92 f2a2 	rbit	r2, r2
 8001d3a:	603a      	str	r2, [r7, #0]
   return(result);
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	60ba      	str	r2, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	fab2 f282 	clz	r2, r2
 8001d46:	71fa      	strb	r2, [r7, #7]
  return(result);
 8001d48:	79fa      	ldrb	r2, [r7, #7]
			>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001d4a:	40d3      	lsrs	r3, r2
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
SystemCoreClock = HAL_RCC_GetSysClockFreq()
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	fa21 f303 	lsr.w	r3, r1, r3
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001d54:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8001d56:	6013      	str	r3, [r2, #0]
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
			>> POSITION_VAL(RCC_CFGR_HPRE)];
return SystemCoreClock;
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_RCC_GetHCLKFreq+0x50>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	080030e8 	.word	0x080030e8
 8001d6c:	20000000 	.word	0x20000000

08001d70 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency     
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
return (HAL_RCC_GetHCLKFreq()
 8001d76:	f7ff ffd1 	bl	8001d1c <HAL_RCC_GetHCLKFreq>
 8001d7a:	4601      	mov	r1, r0
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_RCC_GetPCLK1Freq+0x44>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d84:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001d88:	60fa      	str	r2, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	fa92 f2a2 	rbit	r2, r2
 8001d90:	603a      	str	r2, [r7, #0]
   return(result);
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	60ba      	str	r2, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	68ba      	ldr	r2, [r7, #8]
 8001d98:	fab2 f282 	clz	r2, r2
 8001d9c:	71fa      	strb	r2, [r7, #7]
  return(result);
 8001d9e:	79fa      	ldrb	r2, [r7, #7]
			>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001da0:	40d3      	lsrs	r3, r2
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
return (HAL_RCC_GetHCLKFreq()
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)
 8001da2:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <HAL_RCC_GetPCLK1Freq+0x48>)
 8001da4:	5cd3      	ldrb	r3, [r2, r3]
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
return (HAL_RCC_GetHCLKFreq()
 8001da6:	fa21 f303 	lsr.w	r3, r1, r3
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)
			>> POSITION_VAL(RCC_CFGR_PPRE1)]);
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	080030e8 	.word	0x080030e8

08001dbc <HAL_RCC_GetClockConfig>:
 * will be configured.
 * @param  pFLatency: Pointer on the Flash Latency.
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
uint32_t *pFLatency) {
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
/* Set all possible values for the Clock type parameter --------------------*/
RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	220f      	movs	r2, #15
 8001dca:	601a      	str	r2, [r3, #0]
	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

/* Get the SYSCLK configuration --------------------------------------------*/
RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]

/* Get the HCLK configuration ----------------------------------------------*/
RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	609a      	str	r2, [r3, #8]

/* Get the APB1 configuration ----------------------------------------------*/
RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	60da      	str	r2, [r3, #12]

/* Get the APB2 configuration ----------------------------------------------*/
RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001df8:	08da      	lsrs	r2, r3, #3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]
	>> 3U);

/* Get the Flash Wait State (Latency) configuration ------------------------*/
*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <HAL_RCC_GetClockConfig+0x60>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 020f 	and.w	r2, r3, #15
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40023c00 	.word	0x40023c00

08001e20 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	; 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e171      	b.n	8002120 <HAL_GPIO_Init+0x300>
		/* Get the IO position */
		ioposition = ((uint32_t) 0x01U) << position;
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	f040 8160 	bne.w	800211a <HAL_GPIO_Init+0x2fa>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode == GPIO_MODE_AF_PP)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x4a>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d123      	bne.n	8001eb2 <HAL_GPIO_Init+0x92>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) 0xFU
						<< ((uint32_t) (position & (uint32_t) 0x07U) * 4U));
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
				temp &= ~((uint32_t) 0xFU
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
						<< ((uint32_t) (position & (uint32_t) 0x07U) * 4U));
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & (uint32_t) 0x07U) * 4U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
				temp &= ~((uint32_t) 0xFU
						<< ((uint32_t) (position & (uint32_t) 0x07U) * 4U));
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
						<< (((uint32_t) position & (uint32_t) 0x07U) * 4U));
				GPIOx->AFR[position >> 3U] = temp;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	69b9      	ldr	r1, [r7, #24]
 8001eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	601a      	str	r2, [r3, #0]

			/* In case of Output or Alternate function mode selection */
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d00b      	beq.n	8001f06 <HAL_GPIO_Init+0xe6>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_PP)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d007      	beq.n	8001f06 <HAL_GPIO_Init+0xe6>
					|| (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b11      	cmp	r3, #17
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0xe6>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d130      	bne.n	8001f68 <HAL_GPIO_Init+0x148>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68da      	ldr	r2, [r3, #12]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
				GPIOx->OSPEEDR = temp;

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
				temp &= ~(GPIO_OTYPER_OT_0 << position);
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U)
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
						<< position);
				GPIOx->OTYPER = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	605a      	str	r2, [r3, #4]
			}

			/* Activate the Pull-up or Pull down resistor for the current IO */
			temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
			GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	60da      	str	r2, [r3, #12]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	f000 80ba 	beq.w	800211a <HAL_GPIO_Init+0x2fa>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	4a62      	ldr	r2, [pc, #392]	; (8002134 <HAL_GPIO_Init+0x314>)
 8001fac:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_GPIO_Init+0x314>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb6:	4b5f      	ldr	r3, [pc, #380]	; (8002134 <HAL_GPIO_Init+0x314>)
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 8001fc2:	4a5d      	ldr	r2, [pc, #372]	; (8002138 <HAL_GPIO_Init+0x318>)
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	3302      	adds	r3, #2
 8001fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fce:	61bb      	str	r3, [r7, #24]
				temp &= ~(((uint32_t) 0x0FU) << (4U * (position & 0x03U)));
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	220f      	movs	r2, #15
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a54      	ldr	r2, [pc, #336]	; (800213c <HAL_GPIO_Init+0x31c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d031      	beq.n	8002052 <HAL_GPIO_Init+0x232>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a53      	ldr	r2, [pc, #332]	; (8002140 <HAL_GPIO_Init+0x320>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d02b      	beq.n	800204e <HAL_GPIO_Init+0x22e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_GPIO_Init+0x324>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d025      	beq.n	800204a <HAL_GPIO_Init+0x22a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a51      	ldr	r2, [pc, #324]	; (8002148 <HAL_GPIO_Init+0x328>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d01f      	beq.n	8002046 <HAL_GPIO_Init+0x226>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a50      	ldr	r2, [pc, #320]	; (800214c <HAL_GPIO_Init+0x32c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d019      	beq.n	8002042 <HAL_GPIO_Init+0x222>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4f      	ldr	r2, [pc, #316]	; (8002150 <HAL_GPIO_Init+0x330>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d013      	beq.n	800203e <HAL_GPIO_Init+0x21e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4e      	ldr	r2, [pc, #312]	; (8002154 <HAL_GPIO_Init+0x334>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d00d      	beq.n	800203a <HAL_GPIO_Init+0x21a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4d      	ldr	r2, [pc, #308]	; (8002158 <HAL_GPIO_Init+0x338>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d007      	beq.n	8002036 <HAL_GPIO_Init+0x216>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4c      	ldr	r2, [pc, #304]	; (800215c <HAL_GPIO_Init+0x33c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d101      	bne.n	8002032 <HAL_GPIO_Init+0x212>
 800202e:	2308      	movs	r3, #8
 8002030:	e010      	b.n	8002054 <HAL_GPIO_Init+0x234>
 8002032:	2309      	movs	r3, #9
 8002034:	e00e      	b.n	8002054 <HAL_GPIO_Init+0x234>
 8002036:	2307      	movs	r3, #7
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x234>
 800203a:	2306      	movs	r3, #6
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x234>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x234>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x234>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x234>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x234>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x234>
 8002052:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2U];
				temp &= ~(((uint32_t) 0x0FU) << (4U * (position & 0x03U)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
						<< (4U * (position & 0x03U)));
				SYSCFG->EXTICR[position >> 2U] = temp;
 8002064:	4934      	ldr	r1, [pc, #208]	; (8002138 <HAL_GPIO_Init+0x318>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8002072:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_GPIO_Init+0x340>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x276>
					temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 8002096:	4a32      	ldr	r2, [pc, #200]	; (8002160 <HAL_GPIO_Init+0x340>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6013      	str	r3, [r2, #0]

				temp = EXTI->EMR;
 800209c:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_GPIO_Init+0x340>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x2a0>
					temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 80020c0:	4a27      	ldr	r2, [pc, #156]	; (8002160 <HAL_GPIO_Init+0x340>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	6053      	str	r3, [r2, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 80020c6:	4b26      	ldr	r3, [pc, #152]	; (8002160 <HAL_GPIO_Init+0x340>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2ca>
					temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 80020ea:	4a1d      	ldr	r2, [pc, #116]	; (8002160 <HAL_GPIO_Init+0x340>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 80020f0:	4b1b      	ldr	r3, [pc, #108]	; (8002160 <HAL_GPIO_Init+0x340>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2f4>
					temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 8002114:	4a12      	ldr	r2, [pc, #72]	; (8002160 <HAL_GPIO_Init+0x340>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	60d3      	str	r3, [r2, #12]
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	f67f ae8a 	bls.w	8001e3c <HAL_GPIO_Init+0x1c>
				}
				EXTI->FTSR = temp;
			}
		}
	}
}
 8002128:	bf00      	nop
 800212a:	3724      	adds	r7, #36	; 0x24
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40022000 	.word	0x40022000
 8002160:	40013c00 	.word	0x40013c00

08002164 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
		GPIOx->BSRR = GPIO_Pin;
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	619a      	str	r2, [r3, #24]
	}
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop

08002198 <HAL_GPIO_TogglePin>:
 * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral for STM32F429X device or
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Pin: Specifies the pins to be toggled.
 * @retval None
 */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	GPIOx->ODR ^= GPIO_Pin;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	405a      	eors	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	615a      	str	r2, [r3, #20]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <NVIC_SetPriorityGrouping+0x44>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d8:	4013      	ands	r3, r2
 80021da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80021e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ec:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80021ee:	4a04      	ldr	r2, [pc, #16]	; (8002200 <NVIC_SetPriorityGrouping+0x44>)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	60d3      	str	r3, [r2, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002208:	4b04      	ldr	r3, [pc, #16]	; (800221c <NVIC_GetPriorityGrouping+0x18>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002210:	0a1b      	lsrs	r3, r3, #8
}
 8002212:	4618      	mov	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800222a:	4909      	ldr	r1, [pc, #36]	; (8002250 <NVIC_EnableIRQ+0x30>)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	79fa      	ldrb	r2, [r7, #7]
 8002234:	f002 021f 	and.w	r2, r2, #31
 8002238:	2001      	movs	r0, #1
 800223a:	fa00 f202 	lsl.w	r2, r0, r2
 800223e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100

08002254 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	6039      	str	r1, [r7, #0]
 800225e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002264:	2b00      	cmp	r3, #0
 8002266:	da0b      	bge.n	8002280 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002268:	490d      	ldr	r1, [pc, #52]	; (80022a0 <NVIC_SetPriority+0x4c>)
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	3b04      	subs	r3, #4
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800227e:	e009      	b.n	8002294 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002280:	4908      	ldr	r1, [pc, #32]	; (80022a4 <NVIC_SetPriority+0x50>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b089      	sub	sp, #36	; 0x24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f1c3 0307 	rsb	r3, r3, #7
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	bf28      	it	cs
 80022c6:	2304      	movcs	r3, #4
 80022c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d902      	bls.n	80022d8 <NVIC_EncodePriority+0x30>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3b03      	subs	r3, #3
 80022d6:	e000      	b.n	80022da <NVIC_EncodePriority+0x32>
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80022dc:	2201      	movs	r2, #1
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	461a      	mov	r2, r3
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	401a      	ands	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80022f0:	2101      	movs	r1, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa01 f303 	lsl.w	r3, r1, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	4619      	mov	r1, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8002300:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 8002302:	4618      	mov	r0, r3
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop

08002310 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff4f 	bl	80021bc <NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop

08002328 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 800233a:	f7ff ff63 	bl	8002204 <NVIC_GetPriorityGrouping>
 800233e:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	68b9      	ldr	r1, [r7, #8]
 8002344:	6978      	ldr	r0, [r7, #20]
 8002346:	f7ff ffaf 	bl	80022a8 <NVIC_EncodePriority>
 800234a:	4602      	mov	r2, r0
 800234c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff7e 	bl	8002254 <NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002358:	bf00      	nop
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 800236a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff ff56 	bl	8002220 <NVIC_EnableIRQ>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002380:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <HAL_Init+0x34>)
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_Init+0x34>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 800238c:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_Init+0x34>)
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_Init+0x34>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002396:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002398:	2003      	movs	r0, #3
 800239a:	f7ff ffb9 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 800239e:	200f      	movs	r0, #15
 80023a0:	f7fe f94e 	bl	8000640 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 80023a4:	f7fd ffb6 	bl	8000314 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00

080023b4 <HAL_IncTick>:
 *       in Systick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
	uwTick++;
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_IncTick+0x18>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	4a03      	ldr	r2, [pc, #12]	; (80023cc <HAL_IncTick+0x18>)
 80023c0:	6013      	str	r3, [r2, #0]
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	200001a0 	.word	0x200001a0

080023d0 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
	return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	200001a0 	.word	0x200001a0

080023e8 <HAL_Delay>:
 *       implementations in user file.
 * @param Delay: specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]
	tickstart = HAL_GetTick();
 80023f4:	f7ff ffec 	bl	80023d0 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]
	while((HAL_GetTick() - tickstart) < Delay)
 80023fa:	bf00      	nop
 80023fc:	f7ff ffe8 	bl	80023d0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad2      	subs	r2, r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	429a      	cmp	r2, r3
 800240a:	d3f7      	bcc.n	80023fc <HAL_Delay+0x14>
	{
	}
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_GetREVID>:

/**
 * @brief  Returns the device revision identifier.
 * @retval Device revision identifier
 */
uint32_t HAL_GetREVID(void) {
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
	return ((DBGMCU->IDCODE) >> 16U);
 8002418:	4b03      	ldr	r3, [pc, #12]	; (8002428 <HAL_GetREVID+0x14>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0c1b      	lsrs	r3, r3, #16
}
 800241e:	4618      	mov	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e0042000 	.word	0xe0042000

0800242c <BSP_ACCELERO_Init>:

/**
 * @brief  Setx Accelerometer Initialization.
 * @retval ACCELERO_OK if no problem during initialization
 */
uint8_t BSP_ACCELERO_Init(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
	uint8_t ret = ACCELERO_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
	uint16_t ctrl = 0x0000;
 8002436:	2300      	movs	r3, #0
 8002438:	82bb      	strh	r3, [r7, #20]
	LIS302DL_InitTypeDef lis302dl_initstruct;
	LIS302DL_FilterConfigTypeDef lis302dl_filter = { 0, 0, 0 };
 800243a:	2300      	movs	r3, #0
 800243c:	723b      	strb	r3, [r7, #8]
 800243e:	2300      	movs	r3, #0
 8002440:	727b      	strb	r3, [r7, #9]
 8002442:	2300      	movs	r3, #0
 8002444:	72bb      	strb	r3, [r7, #10]
	LIS3DSH_InitTypeDef l1s3dsh_InitStruct;

	if (Lis302dlDrv.ReadID() == I_AM_LIS302DL) {
 8002446:	4b3c      	ldr	r3, [pc, #240]	; (8002538 <BSP_ACCELERO_Init+0x10c>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4798      	blx	r3
 800244c:	4603      	mov	r3, r0
 800244e:	2b3b      	cmp	r3, #59	; 0x3b
 8002450:	d138      	bne.n	80024c4 <BSP_ACCELERO_Init+0x98>
		/* Initialize the accelerometer driver structure */
		AcceleroDrv = &Lis302dlDrv;
 8002452:	4b3a      	ldr	r3, [pc, #232]	; (800253c <BSP_ACCELERO_Init+0x110>)
 8002454:	4a38      	ldr	r2, [pc, #224]	; (8002538 <BSP_ACCELERO_Init+0x10c>)
 8002456:	601a      	str	r2, [r3, #0]

		/* Set configuration of LIS302DL MEMS Accelerometer *********************/
		lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8002458:	2340      	movs	r3, #64	; 0x40
 800245a:	733b      	strb	r3, [r7, #12]
		lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 800245c:	2300      	movs	r3, #0
 800245e:	737b      	strb	r3, [r7, #13]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 8002460:	2307      	movs	r3, #7
 8002462:	73bb      	strb	r3, [r7, #14]
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8002464:	2300      	movs	r3, #0
 8002466:	73fb      	strb	r3, [r7, #15]
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8002468:	2300      	movs	r3, #0
 800246a:	743b      	strb	r3, [r7, #16]

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 800246c:	7b7a      	ldrb	r2, [r7, #13]
				| lis302dl_initstruct.Power_Mode
 800246e:	7b3b      	ldrb	r3, [r7, #12]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 8002470:	4313      	orrs	r3, r2
 8002472:	b2da      	uxtb	r2, r3
				| lis302dl_initstruct.Power_Mode
				| lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test
 8002474:	7bfb      	ldrb	r3, [r7, #15]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 8002476:	4313      	orrs	r3, r2
 8002478:	b2da      	uxtb	r2, r3
				| lis302dl_initstruct.Power_Mode
				| lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test
 800247a:	7c3b      	ldrb	r3, [r7, #16]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 800247c:	4313      	orrs	r3, r2
 800247e:	b2da      	uxtb	r2, r3
				| lis302dl_initstruct.Power_Mode
				| lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test
				| lis302dl_initstruct.Axes_Enable);
 8002480:	7bbb      	ldrb	r3, [r7, #14]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 8002482:	4313      	orrs	r3, r2
 8002484:	b2db      	uxtb	r3, r3
 8002486:	82bb      	strh	r3, [r7, #20]
				| lis302dl_initstruct.Power_Mode
				| lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test
				| lis302dl_initstruct.Axes_Enable);

		/* Configure the accelerometer main parameters */
		AcceleroDrv->Init(ctrl);
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <BSP_ACCELERO_Init+0x110>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	8aba      	ldrh	r2, [r7, #20]
 8002490:	4610      	mov	r0, r2
 8002492:	4798      	blx	r3

		/* MEMS High Pass Filter configuration */
		lis302dl_filter.HighPassFilter_Data_Selection =
 8002494:	2320      	movs	r3, #32
 8002496:	723b      	strb	r3, [r7, #8]
				LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
		lis302dl_filter.HighPassFilter_CutOff_Frequency =
 8002498:	2301      	movs	r3, #1
 800249a:	727b      	strb	r3, [r7, #9]
				LIS302DL_HIGHPASSFILTER_LEVEL_1;
		lis302dl_filter.HighPassFilter_Interrupt =
 800249c:	230c      	movs	r3, #12
 800249e:	72bb      	strb	r3, [r7, #10]
				LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;

		/* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */
		ctrl = (uint8_t) (lis302dl_filter.HighPassFilter_Data_Selection
 80024a0:	7a3a      	ldrb	r2, [r7, #8]
				| lis302dl_filter.HighPassFilter_CutOff_Frequency
 80024a2:	7a7b      	ldrb	r3, [r7, #9]
				LIS302DL_HIGHPASSFILTER_LEVEL_1;
		lis302dl_filter.HighPassFilter_Interrupt =
				LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;

		/* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */
		ctrl = (uint8_t) (lis302dl_filter.HighPassFilter_Data_Selection
 80024a4:	4313      	orrs	r3, r2
 80024a6:	b2da      	uxtb	r2, r3
				| lis302dl_filter.HighPassFilter_CutOff_Frequency
				| lis302dl_filter.HighPassFilter_Interrupt);
 80024a8:	7abb      	ldrb	r3, [r7, #10]
				LIS302DL_HIGHPASSFILTER_LEVEL_1;
		lis302dl_filter.HighPassFilter_Interrupt =
				LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;

		/* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */
		ctrl = (uint8_t) (lis302dl_filter.HighPassFilter_Data_Selection
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	82bb      	strh	r3, [r7, #20]
				| lis302dl_filter.HighPassFilter_CutOff_Frequency
				| lis302dl_filter.HighPassFilter_Interrupt);

		/* Configure the accelerometer LPF main parameters */
		AcceleroDrv->FilterConfig(ctrl);
 80024b0:	4b22      	ldr	r3, [pc, #136]	; (800253c <BSP_ACCELERO_Init+0x110>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b6:	8aba      	ldrh	r2, [r7, #20]
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	4610      	mov	r0, r2
 80024bc:	4798      	blx	r3

		ret = ACCELERO_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	75fb      	strb	r3, [r7, #23]
 80024c2:	e034      	b.n	800252e <BSP_ACCELERO_Init+0x102>
	} else if (Lis3dshDrv.ReadID() == I_AM_LIS3DSH) {
 80024c4:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <BSP_ACCELERO_Init+0x114>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	4798      	blx	r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b3f      	cmp	r3, #63	; 0x3f
 80024ce:	d12c      	bne.n	800252a <BSP_ACCELERO_Init+0xfe>
		/* Initialize the accelerometer driver structure */
		AcceleroDrv = &Lis3dshDrv;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <BSP_ACCELERO_Init+0x110>)
 80024d2:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <BSP_ACCELERO_Init+0x114>)
 80024d4:	601a      	str	r2, [r3, #0]

		/* Set configuration of LIS3DSH MEMS Accelerometer **********************/
		l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 80024d6:	2360      	movs	r3, #96	; 0x60
 80024d8:	703b      	strb	r3, [r7, #0]
		l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 80024da:	2307      	movs	r3, #7
 80024dc:	707b      	strb	r3, [r7, #1]
		l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 80024de:	2300      	movs	r3, #0
 80024e0:	70bb      	strb	r3, [r7, #2]
		l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	70fb      	strb	r3, [r7, #3]
		l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 80024e6:	2300      	movs	r3, #0
 80024e8:	713b      	strb	r3, [r7, #4]
		l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 80024ea:	2300      	movs	r3, #0
 80024ec:	717b      	strb	r3, [r7, #5]

		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
 80024ee:	783a      	ldrb	r2, [r7, #0]
				| l1s3dsh_InitStruct.Axes_Enable);
 80024f0:	787b      	ldrb	r3, [r7, #1]
		l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
		l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
		l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;

		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	82bb      	strh	r3, [r7, #20]
				| l1s3dsh_InitStruct.Axes_Enable);

		/* Configure MEMS: full scale and self test */
		ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire
 80024f8:	78ba      	ldrb	r2, [r7, #2]
				| l1s3dsh_InitStruct.Self_Test | l1s3dsh_InitStruct.Full_Scale
 80024fa:	78fb      	ldrb	r3, [r7, #3]
		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
				| l1s3dsh_InitStruct.Axes_Enable);

		/* Configure MEMS: full scale and self test */
		ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire
 80024fc:	4313      	orrs	r3, r2
 80024fe:	b2da      	uxtb	r2, r3
				| l1s3dsh_InitStruct.Self_Test | l1s3dsh_InitStruct.Full_Scale
 8002500:	793b      	ldrb	r3, [r7, #4]
		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
				| l1s3dsh_InitStruct.Axes_Enable);

		/* Configure MEMS: full scale and self test */
		ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire
 8002502:	4313      	orrs	r3, r2
 8002504:	b2da      	uxtb	r2, r3
				| l1s3dsh_InitStruct.Self_Test | l1s3dsh_InitStruct.Full_Scale
				| l1s3dsh_InitStruct.Filter_BW) << 8);
 8002506:	797b      	ldrb	r3, [r7, #5]
		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
				| l1s3dsh_InitStruct.Axes_Enable);

		/* Configure MEMS: full scale and self test */
		ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire
 8002508:	4313      	orrs	r3, r2
 800250a:	b2db      	uxtb	r3, r3
 800250c:	b29b      	uxth	r3, r3
 800250e:	021b      	lsls	r3, r3, #8
 8002510:	b29a      	uxth	r2, r3
 8002512:	8abb      	ldrh	r3, [r7, #20]
 8002514:	4313      	orrs	r3, r2
 8002516:	82bb      	strh	r3, [r7, #20]
				| l1s3dsh_InitStruct.Self_Test | l1s3dsh_InitStruct.Full_Scale
				| l1s3dsh_InitStruct.Filter_BW) << 8);

		/* Configure the accelerometer main parameters */
		AcceleroDrv->Init(ctrl);
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <BSP_ACCELERO_Init+0x110>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	8aba      	ldrh	r2, [r7, #20]
 8002520:	4610      	mov	r0, r2
 8002522:	4798      	blx	r3

		ret = ACCELERO_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	75fb      	strb	r3, [r7, #23]
 8002528:	e001      	b.n	800252e <BSP_ACCELERO_Init+0x102>
	}

	else {
		ret = ACCELERO_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
	}
	return ret;
 800252e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000050 	.word	0x20000050
 800253c:	200000a4 	.word	0x200000a4
 8002540:	2000001c 	.word	0x2000001c

08002544 <BSP_LED_Init>:
 *     @arg LED4
 *     @arg LED3
 *     @arg LED5
 *     @arg LED6
 */
void BSP_LED_Init(Led_TypeDef Led) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the GPIO_LED Clock */
	LEDx_GPIO_CLK_ENABLE(Led);
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10e      	bne.n	8002572 <BSP_LED_Init+0x2e>
 8002554:	2300      	movs	r3, #0
 8002556:	61bb      	str	r3, [r7, #24]
 8002558:	4a33      	ldr	r2, [pc, #204]	; (8002628 <BSP_LED_Init+0xe4>)
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <BSP_LED_Init+0xe4>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	f043 0308 	orr.w	r3, r3, #8
 8002562:	6313      	str	r3, [r2, #48]	; 0x30
 8002564:	4b30      	ldr	r3, [pc, #192]	; (8002628 <BSP_LED_Init+0xe4>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	e034      	b.n	80025dc <BSP_LED_Init+0x98>
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d10e      	bne.n	8002596 <BSP_LED_Init+0x52>
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <BSP_LED_Init+0xe4>)
 800257e:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <BSP_LED_Init+0xe4>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f043 0308 	orr.w	r3, r3, #8
 8002586:	6313      	str	r3, [r2, #48]	; 0x30
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <BSP_LED_Init+0xe4>)
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	e022      	b.n	80025dc <BSP_LED_Init+0x98>
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d10e      	bne.n	80025ba <BSP_LED_Init+0x76>
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	4a21      	ldr	r2, [pc, #132]	; (8002628 <BSP_LED_Init+0xe4>)
 80025a2:	4b21      	ldr	r3, [pc, #132]	; (8002628 <BSP_LED_Init+0xe4>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	f043 0308 	orr.w	r3, r3, #8
 80025aa:	6313      	str	r3, [r2, #48]	; 0x30
 80025ac:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <BSP_LED_Init+0xe4>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	e010      	b.n	80025dc <BSP_LED_Init+0x98>
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d10d      	bne.n	80025dc <BSP_LED_Init+0x98>
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	4a18      	ldr	r2, [pc, #96]	; (8002628 <BSP_LED_Init+0xe4>)
 80025c6:	4b18      	ldr	r3, [pc, #96]	; (8002628 <BSP_LED_Init+0xe4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f043 0308 	orr.w	r3, r3, #8
 80025ce:	6313      	str	r3, [r2, #48]	; 0x30
 80025d0:	4b15      	ldr	r3, [pc, #84]	; (8002628 <BSP_LED_Init+0xe4>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	60fb      	str	r3, [r7, #12]
 80025da:	68fb      	ldr	r3, [r7, #12]

	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	4a13      	ldr	r2, [pc, #76]	; (800262c <BSP_LED_Init+0xe8>)
 80025e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025e4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e6:	2301      	movs	r3, #1
 80025e8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80025ee:	2302      	movs	r3, #2
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <BSP_LED_Init+0xec>)
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	f107 021c 	add.w	r2, r7, #28
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fc0d 	bl	8001e20 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <BSP_LED_Init+0xec>)
 800260a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800260e:	79fb      	ldrb	r3, [r7, #7]
 8002610:	4a06      	ldr	r2, [pc, #24]	; (800262c <BSP_LED_Init+0xe8>)
 8002612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002616:	2200      	movs	r2, #0
 8002618:	4619      	mov	r1, r3
 800261a:	f7ff fda3 	bl	8002164 <HAL_GPIO_WritePin>
}
 800261e:	bf00      	nop
 8002620:	3730      	adds	r7, #48	; 0x30
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	080030f8 	.word	0x080030f8
 8002630:	20000004 	.word	0x20000004

08002634 <BSP_LED_On>:
 *     @arg LED4
 *     @arg LED3
 *     @arg LED5
 *     @arg LED6  
 */
void BSP_LED_On(Led_TypeDef Led) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4a07      	ldr	r2, [pc, #28]	; (8002660 <BSP_LED_On+0x2c>)
 8002642:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4a06      	ldr	r2, [pc, #24]	; (8002664 <BSP_LED_On+0x30>)
 800264a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800264e:	2201      	movs	r2, #1
 8002650:	4619      	mov	r1, r3
 8002652:	f7ff fd87 	bl	8002164 <HAL_GPIO_WritePin>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000004 	.word	0x20000004
 8002664:	080030f8 	.word	0x080030f8

08002668 <BSP_LED_Toggle>:
 *     @arg LED4
 *     @arg LED3
 *     @arg LED5
 *     @arg LED6  
 */
void BSP_LED_Toggle(Led_TypeDef Led) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <BSP_LED_Toggle+0x28>)
 8002676:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	4a05      	ldr	r2, [pc, #20]	; (8002694 <BSP_LED_Toggle+0x2c>)
 800267e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002682:	4619      	mov	r1, r3
 8002684:	f7ff fd88 	bl	8002198 <HAL_GPIO_TogglePin>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20000004 	.word	0x20000004
 8002694:	080030f8 	.word	0x080030f8

08002698 <BSP_PB_Init>:
 *   This parameter can be one of following parameters:   
 *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
 *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
 *                            generation capability  
 */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Mode) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	460a      	mov	r2, r1
 80026a2:	71fb      	strb	r3, [r7, #7]
 80026a4:	4613      	mov	r3, r2
 80026a6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the BUTTON Clock */
	BUTTONx_GPIO_CLK_ENABLE(Button);
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <BSP_PB_Init+0x32>
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	4a23      	ldr	r2, [pc, #140]	; (8002740 <BSP_PB_Init+0xa8>)
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <BSP_PB_Init+0xa8>)
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <BSP_PB_Init+0xa8>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]

	if (Mode == BUTTON_MODE_GPIO) {
 80026ca:	79bb      	ldrb	r3, [r7, #6]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d111      	bne.n	80026f4 <BSP_PB_Init+0x5c>
		/* Configure Button pin as input */
		GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80026d0:	2301      	movs	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80026dc:	2302      	movs	r3, #2
 80026de:	61bb      	str	r3, [r7, #24]

		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <BSP_PB_Init+0xac>)
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	f107 020c 	add.w	r2, r7, #12
 80026ec:	4611      	mov	r1, r2
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fb96 	bl	8001e20 <HAL_GPIO_Init>
	}

	if (Mode == BUTTON_MODE_EXTI) {
 80026f4:	79bb      	ldrb	r3, [r7, #6]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d11d      	bne.n	8002736 <BSP_PB_Init+0x9e>
		/* Configure Button pin as input with External interrupt */
		GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80026fa:	2301      	movs	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002702:	2302      	movs	r3, #2
 8002704:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <BSP_PB_Init+0xb0>)
 8002708:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <BSP_PB_Init+0xac>)
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	f107 020c 	add.w	r2, r7, #12
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fb81 	bl	8001e20 <HAL_GPIO_Init>

		/* Enable and set Button EXTI Interrupt to the lowest priority */
		HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 800271e:	2306      	movs	r3, #6
 8002720:	b25b      	sxtb	r3, r3
 8002722:	2200      	movs	r2, #0
 8002724:	210f      	movs	r1, #15
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fdfe 	bl	8002328 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800272c:	2306      	movs	r3, #6
 800272e:	b25b      	sxtb	r3, r3
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fe15 	bl	8002360 <HAL_NVIC_EnableIRQ>
	}
}
 8002736:	bf00      	nop
 8002738:	3720      	adds	r7, #32
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	20000014 	.word	0x20000014
 8002748:	10110000 	.word	0x10110000

0800274c <SPIx_Init>:
/******************************* SPI Routines *********************************/

/**
 * @brief  SPIx Bus initialization
 */
static void SPIx_Init(void) {
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET) {
 8002750:	4819      	ldr	r0, [pc, #100]	; (80027b8 <SPIx_Init+0x6c>)
 8002752:	f7fe fead 	bl	80014b0 <HAL_SPI_GetState>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d12a      	bne.n	80027b2 <SPIx_Init+0x66>
		/* SPI configuration -----------------------------------------------------*/
		SpiHandle.Instance = DISCOVERY_SPIx;
 800275c:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <SPIx_Init+0x6c>)
 800275e:	4a17      	ldr	r2, [pc, #92]	; (80027bc <SPIx_Init+0x70>)
 8002760:	601a      	str	r2, [r3, #0]
		SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002762:	4b15      	ldr	r3, [pc, #84]	; (80027b8 <SPIx_Init+0x6c>)
 8002764:	2218      	movs	r2, #24
 8002766:	61da      	str	r2, [r3, #28]
		SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <SPIx_Init+0x6c>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
		SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800276e:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <SPIx_Init+0x6c>)
 8002770:	2200      	movs	r2, #0
 8002772:	615a      	str	r2, [r3, #20]
		SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <SPIx_Init+0x6c>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
		SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <SPIx_Init+0x6c>)
 800277c:	2200      	movs	r2, #0
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
		SpiHandle.Init.CRCPolynomial = 7;
 8002780:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <SPIx_Init+0x6c>)
 8002782:	2207      	movs	r2, #7
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c
		SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <SPIx_Init+0x6c>)
 8002788:	2200      	movs	r2, #0
 800278a:	60da      	str	r2, [r3, #12]
		SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <SPIx_Init+0x6c>)
 800278e:	2200      	movs	r2, #0
 8002790:	621a      	str	r2, [r3, #32]
		SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <SPIx_Init+0x6c>)
 8002794:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002798:	619a      	str	r2, [r3, #24]
		SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <SPIx_Init+0x6c>)
 800279c:	2200      	movs	r2, #0
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
		SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <SPIx_Init+0x6c>)
 80027a2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027a6:	605a      	str	r2, [r3, #4]

		SPIx_MspInit();
 80027a8:	f000 f836 	bl	8002818 <SPIx_MspInit>
		HAL_SPI_Init(&SpiHandle);
 80027ac:	4802      	ldr	r0, [pc, #8]	; (80027b8 <SPIx_Init+0x6c>)
 80027ae:	f7fe fcb5 	bl	800111c <HAL_SPI_Init>
	}
}
 80027b2:	bf00      	nop
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	200000a8 	.word	0x200000a8
 80027bc:	40013000 	.word	0x40013000

080027c0 <SPIx_WriteRead>:
 * @brief  Sends a Byte through the SPI interface and return the Byte received 
 *         from the SPI bus.
 * @param  Byte: Byte send.
 * @retval The received byte value
 */
static uint8_t SPIx_WriteRead(uint8_t Byte) {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]

	/* Send a Byte through the SPI peripheral */
	/* Read byte from the SPI bus */
	if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte,
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <SPIx_WriteRead+0x38>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f107 020f 	add.w	r2, r7, #15
 80027d6:	1df9      	adds	r1, r7, #7
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	2301      	movs	r3, #1
 80027dc:	4807      	ldr	r0, [pc, #28]	; (80027fc <SPIx_WriteRead+0x3c>)
 80027de:	f7fe fd3d 	bl	800125c <HAL_SPI_TransmitReceive>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <SPIx_WriteRead+0x2c>
			(uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK) {
		SPIx_Error();
 80027e8:	f000 f80a 	bl	8002800 <SPIx_Error>
	}

	return receivedbyte;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000018 	.word	0x20000018
 80027fc:	200000a8 	.word	0x200000a8

08002800 <SPIx_Error>:

/**
 * @brief  SPIx error treatment function.
 */
static void SPIx_Error(void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	/* De-initialize the SPI communication bus */
	HAL_SPI_DeInit(&SpiHandle);
 8002804:	4803      	ldr	r0, [pc, #12]	; (8002814 <SPIx_Error+0x14>)
 8002806:	f7fe fced 	bl	80011e4 <HAL_SPI_DeInit>

	/* Re-Initialize the SPI communication bus */
	SPIx_Init();
 800280a:	f7ff ff9f 	bl	800274c <SPIx_Init>
}
 800280e:	bf00      	nop
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	200000a8 	.word	0x200000a8

08002818 <SPIx_MspInit>:

/**
 * @brief  SPI MSP Init.
 */
static void SPIx_MspInit(void) {
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable the SPI peripheral */
	DISCOVERY_SPIx_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	4a17      	ldr	r2, [pc, #92]	; (8002880 <SPIx_MspInit+0x68>)
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <SPIx_MspInit+0x68>)
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800282c:	6453      	str	r3, [r2, #68]	; 0x44
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <SPIx_MspInit+0x68>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002836:	60bb      	str	r3, [r7, #8]
 8002838:	68bb      	ldr	r3, [r7, #8]

	/* Enable SCK, MOSI and MISO GPIO clocks */
	DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	4a10      	ldr	r2, [pc, #64]	; (8002880 <SPIx_MspInit+0x68>)
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <SPIx_MspInit+0x68>)
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	6313      	str	r3, [r2, #48]	; 0x30
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <SPIx_MspInit+0x68>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]

	/* SPI SCK, MOSI, MISO pin configuration */
	GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN
 8002856:	23e0      	movs	r3, #224	; 0xe0
 8002858:	60fb      	str	r3, [r7, #12]
			| DISCOVERY_SPIx_MOSI_PIN);
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800285a:	2302      	movs	r3, #2
 800285c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800285e:	2302      	movs	r3, #2
 8002860:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002862:	2301      	movs	r3, #1
 8002864:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002866:	2305      	movs	r3, #5
 8002868:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800286a:	f107 030c 	add.w	r3, r7, #12
 800286e:	4619      	mov	r1, r3
 8002870:	4804      	ldr	r0, [pc, #16]	; (8002884 <SPIx_MspInit+0x6c>)
 8002872:	f7ff fad5 	bl	8001e20 <HAL_GPIO_Init>
}
 8002876:	bf00      	nop
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	40020000 	.word	0x40020000

08002888 <ACCELERO_IO_Init>:
/***************************** LINK ACCELEROMETER *****************************/

/**
 * @brief  Configures the Accelerometer SPI interface.
 */
void ACCELERO_IO_Init(void) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the Accelerometer Control pins --------------------------------*/
	/* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */
	ACCELERO_CS_GPIO_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	603b      	str	r3, [r7, #0]
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <ACCELERO_IO_Init+0x54>)
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <ACCELERO_IO_Init+0x54>)
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	f043 0310 	orr.w	r3, r3, #16
 800289c:	6313      	str	r3, [r2, #48]	; 0x30
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <ACCELERO_IO_Init+0x54>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	683b      	ldr	r3, [r7, #0]

	/* Configure GPIO PIN for LIS Chip select */
	GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 80028aa:	2308      	movs	r3, #8
 80028ac:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80028ae:	2301      	movs	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80028b6:	2301      	movs	r3, #1
 80028b8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	4619      	mov	r1, r3
 80028be:	4808      	ldr	r0, [pc, #32]	; (80028e0 <ACCELERO_IO_Init+0x58>)
 80028c0:	f7ff faae 	bl	8001e20 <HAL_GPIO_Init>

	/* Deselect: Chip Select high */
	ACCELERO_CS_HIGH();
 80028c4:	2201      	movs	r2, #1
 80028c6:	2108      	movs	r1, #8
 80028c8:	4805      	ldr	r0, [pc, #20]	; (80028e0 <ACCELERO_IO_Init+0x58>)
 80028ca:	f7ff fc4b 	bl	8002164 <HAL_GPIO_WritePin>

	SPIx_Init();
 80028ce:	f7ff ff3d 	bl	800274c <SPIx_Init>
}
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40021000 	.word	0x40021000

080028e4 <ACCELERO_IO_ITConfig>:

/**
 * @brief  Configures the Accelerometer INT2.
 *         EXTI0 is already used by user button so INT1 is not configured here.
 */
void ACCELERO_IO_ITConfig(void) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
	ACCELERO_INT_GPIO_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <ACCELERO_IO_ITConfig+0x54>)
 80028f0:	4b11      	ldr	r3, [pc, #68]	; (8002938 <ACCELERO_IO_ITConfig+0x54>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f043 0310 	orr.w	r3, r3, #16
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b0f      	ldr	r3, [pc, #60]	; (8002938 <ACCELERO_IO_ITConfig+0x54>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	683b      	ldr	r3, [r7, #0]

	/* Configure GPIO PINs to detect Interrupts */
	GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8002906:	2302      	movs	r3, #2
 8002908:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 800290a:	4b0c      	ldr	r3, [pc, #48]	; (800293c <ACCELERO_IO_ITConfig+0x58>)
 800290c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800290e:	2302      	movs	r3, #2
 8002910:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	4619      	mov	r1, r3
 800291a:	4809      	ldr	r0, [pc, #36]	; (8002940 <ACCELERO_IO_ITConfig+0x5c>)
 800291c:	f7ff fa80 	bl	8001e20 <HAL_GPIO_Init>

	/* Enable and set Accelerometer INT2 to the lowest priority */
	HAL_NVIC_SetPriority((IRQn_Type) ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 8002920:	2200      	movs	r2, #0
 8002922:	210f      	movs	r1, #15
 8002924:	2007      	movs	r0, #7
 8002926:	f7ff fcff 	bl	8002328 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ((IRQn_Type) ACCELERO_INT2_EXTI_IRQn);
 800292a:	2007      	movs	r0, #7
 800292c:	f7ff fd18 	bl	8002360 <HAL_NVIC_EnableIRQ>
}
 8002930:	bf00      	nop
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40023800 	.word	0x40023800
 800293c:	10110000 	.word	0x10110000
 8002940:	40021000 	.word	0x40021000

08002944 <ACCELERO_IO_Write>:
 * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
 * @param  WriteAddr: Accelerometer's internal address to write to.
 * @param  NumByteToWrite: Number of bytes to write.
 */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr,
		uint16_t NumByteToWrite) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
 8002950:	4613      	mov	r3, r2
 8002952:	803b      	strh	r3, [r7, #0]
	/* Configure the MS bit: 
	 - When 0, the address will remain unchanged in multiple read/write commands.
	 - When 1, the address will be auto incremented in multiple read/write commands.
	 */
	if (NumByteToWrite > 0x01) {
 8002954:	883b      	ldrh	r3, [r7, #0]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d903      	bls.n	8002962 <ACCELERO_IO_Write+0x1e>
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002960:	70fb      	strb	r3, [r7, #3]
	}
	/* Set chip select Low at the start of the transmission */
	ACCELERO_CS_LOW();
 8002962:	2200      	movs	r2, #0
 8002964:	2108      	movs	r1, #8
 8002966:	480f      	ldr	r0, [pc, #60]	; (80029a4 <ACCELERO_IO_Write+0x60>)
 8002968:	f7ff fbfc 	bl	8002164 <HAL_GPIO_WritePin>

	/* Send the Address of the indexed register */
	SPIx_WriteRead(WriteAddr);
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff26 	bl	80027c0 <SPIx_WriteRead>

	/* Send the data that will be written into the device (MSB First) */
	while (NumByteToWrite >= 0x01) {
 8002974:	e00a      	b.n	800298c <ACCELERO_IO_Write+0x48>
		SPIx_WriteRead(*pBuffer);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff20 	bl	80027c0 <SPIx_WriteRead>
		NumByteToWrite--;
 8002980:	883b      	ldrh	r3, [r7, #0]
 8002982:	3b01      	subs	r3, #1
 8002984:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3301      	adds	r3, #1
 800298a:	607b      	str	r3, [r7, #4]

	/* Send the Address of the indexed register */
	SPIx_WriteRead(WriteAddr);

	/* Send the data that will be written into the device (MSB First) */
	while (NumByteToWrite >= 0x01) {
 800298c:	883b      	ldrh	r3, [r7, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f1      	bne.n	8002976 <ACCELERO_IO_Write+0x32>
		NumByteToWrite--;
		pBuffer++;
	}

	/* Set chip select High at the end of the transmission */
	ACCELERO_CS_HIGH();
 8002992:	2201      	movs	r2, #1
 8002994:	2108      	movs	r1, #8
 8002996:	4803      	ldr	r0, [pc, #12]	; (80029a4 <ACCELERO_IO_Write+0x60>)
 8002998:	f7ff fbe4 	bl	8002164 <HAL_GPIO_WritePin>
}
 800299c:	bf00      	nop
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000

080029a8 <ACCELERO_IO_Read>:
 * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
 * @param  ReadAddr: Accelerometer's internal address to read from.
 * @param  NumByteToRead: number of bytes to read from the Accelerometer.
 */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr,
		uint16_t NumByteToRead) {
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
 80029b4:	4613      	mov	r3, r2
 80029b6:	803b      	strh	r3, [r7, #0]
	if (NumByteToRead > 0x01) {
 80029b8:	883b      	ldrh	r3, [r7, #0]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d904      	bls.n	80029c8 <ACCELERO_IO_Read+0x20>
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80029c4:	70fb      	strb	r3, [r7, #3]
 80029c6:	e003      	b.n	80029d0 <ACCELERO_IO_Read+0x28>
	} else {
		ReadAddr |= (uint8_t) READWRITE_CMD;
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80029ce:	70fb      	strb	r3, [r7, #3]
	}
	/* Set chip select Low at the start of the transmission */
	ACCELERO_CS_LOW();
 80029d0:	2200      	movs	r2, #0
 80029d2:	2108      	movs	r1, #8
 80029d4:	4810      	ldr	r0, [pc, #64]	; (8002a18 <ACCELERO_IO_Read+0x70>)
 80029d6:	f7ff fbc5 	bl	8002164 <HAL_GPIO_WritePin>

	/* Send the Address of the indexed register */
	SPIx_WriteRead(ReadAddr);
 80029da:	78fb      	ldrb	r3, [r7, #3]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff feef 	bl	80027c0 <SPIx_WriteRead>

	/* Receive the data that will be read from the device (MSB First) */
	while (NumByteToRead > 0x00) {
 80029e2:	e00c      	b.n	80029fe <ACCELERO_IO_Read+0x56>
		/* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
		*pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7ff feeb 	bl	80027c0 <SPIx_WriteRead>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 80029f2:	883b      	ldrh	r3, [r7, #0]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3301      	adds	r3, #1
 80029fc:	607b      	str	r3, [r7, #4]

	/* Send the Address of the indexed register */
	SPIx_WriteRead(ReadAddr);

	/* Receive the data that will be read from the device (MSB First) */
	while (NumByteToRead > 0x00) {
 80029fe:	883b      	ldrh	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1ef      	bne.n	80029e4 <ACCELERO_IO_Read+0x3c>
		NumByteToRead--;
		pBuffer++;
	}

	/* Set chip select High at the end of the transmission */
	ACCELERO_CS_HIGH();
 8002a04:	2201      	movs	r2, #1
 8002a06:	2108      	movs	r1, #8
 8002a08:	4803      	ldr	r0, [pc, #12]	; (8002a18 <ACCELERO_IO_Read+0x70>)
 8002a0a:	f7ff fbab 	bl	8002164 <HAL_GPIO_WritePin>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40021000 	.word	0x40021000

08002a1c <LIS3DSH_Init>:
/**
 * @brief  Set LIS3DSH Initialization.
 * @param  InitStruct: contains mask of different init parameters
 * @retval None
 */
void LIS3DSH_Init(uint16_t InitStruct) {
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	4603      	mov	r3, r0
 8002a24:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]

	/* Configure the low level interface */
	ACCELERO_IO_Init();
 8002a2a:	f7ff ff2d 	bl	8002888 <ACCELERO_IO_Init>

	/* Configure MEMS: power mode(ODR) and axes enable */
	ctrl = (uint8_t) (InitStruct);
 8002a2e:	88fb      	ldrh	r3, [r7, #6]
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	73fb      	strb	r3, [r7, #15]

	/* Write value to MEMS CTRL_REG4 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8002a34:	f107 030f 	add.w	r3, r7, #15
 8002a38:	2201      	movs	r2, #1
 8002a3a:	2120      	movs	r1, #32
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7ff ff81 	bl	8002944 <ACCELERO_IO_Write>

	/* Configure MEMS: full scale and self test */
	ctrl = (uint8_t) (InitStruct >> 8);
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	73fb      	strb	r3, [r7, #15]

	/* Write value to MEMS CTRL_REG5 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8002a4c:	f107 030f 	add.w	r3, r7, #15
 8002a50:	2201      	movs	r2, #1
 8002a52:	2124      	movs	r1, #36	; 0x24
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff75 	bl	8002944 <ACCELERO_IO_Write>
}
 8002a5a:	bf00      	nop
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop

08002a64 <LIS3DSH_DeInit>:
/**
 * @brief  LIS3DSH De-Initialization.
 * @param  None
 * @retval None.
 */
void LIS3DSH_DeInit(void) {
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop

08002a74 <LIS3DSH_ReadID>:
/**
 * @brief  Read LIS3DSH device ID.
 * @param  None
 * @retval The Device ID (two bytes).
 */
uint8_t LIS3DSH_ReadID(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71fb      	strb	r3, [r7, #7]

	/* Configure the low level interface */
	ACCELERO_IO_Init();
 8002a7e:	f7ff ff03 	bl	8002888 <ACCELERO_IO_Init>

	/* Read WHO_AM_I register */
	ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 8002a82:	1dfb      	adds	r3, r7, #7
 8002a84:	2201      	movs	r2, #1
 8002a86:	210f      	movs	r1, #15
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff8d 	bl	80029a8 <ACCELERO_IO_Read>

	/* Return the ID */
	return (uint16_t) tmp;
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <LIS3DSH_InterruptConfig>:
 * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
 *         structure that contains the configuration setting for the LIS3DSH Interrupt.
 * @retval None
 */
void LIS3DSH_InterruptConfig(
		LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct) {
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0x00;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	73fb      	strb	r3, [r7, #15]

	/* Configure Interrupt Selection , Request and Signal */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	785a      	ldrb	r2, [r3, #1]
			| LIS3DSH_IntConfigStruct->Interrupt_Request
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	781b      	ldrb	r3, [r3, #0]
void LIS3DSH_InterruptConfig(
		LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct) {
	uint8_t ctrl = 0x00;

	/* Configure Interrupt Selection , Request and Signal */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b2da      	uxtb	r2, r3
			| LIS3DSH_IntConfigStruct->Interrupt_Request
			| LIS3DSH_IntConfigStruct->Interrupt_Signal);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	789b      	ldrb	r3, [r3, #2]
void LIS3DSH_InterruptConfig(
		LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct) {
	uint8_t ctrl = 0x00;

	/* Configure Interrupt Selection , Request and Signal */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	73fb      	strb	r3, [r7, #15]
			| LIS3DSH_IntConfigStruct->Interrupt_Request
			| LIS3DSH_IntConfigStruct->Interrupt_Signal);

	/* Write value to MEMS CTRL_REG3 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 8002aba:	f107 030f 	add.w	r3, r7, #15
 8002abe:	2201      	movs	r2, #1
 8002ac0:	2123      	movs	r1, #35	; 0x23
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff ff3e 	bl	8002944 <ACCELERO_IO_Write>

	/* Configure State Machine 1 */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->State_Machine1_Enable
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	78da      	ldrb	r2, [r3, #3]
			| LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	791b      	ldrb	r3, [r3, #4]

	/* Write value to MEMS CTRL_REG3 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);

	/* Configure State Machine 1 */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->State_Machine1_Enable
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	73fb      	strb	r3, [r7, #15]
			| LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);

	/* Write value to MEMS CTRL_REG1 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8002ad6:	f107 030f 	add.w	r3, r7, #15
 8002ada:	2201      	movs	r2, #1
 8002adc:	2121      	movs	r1, #33	; 0x21
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff ff30 	bl	8002944 <ACCELERO_IO_Write>

	/* Configure State Machine 2 */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->State_Machine2_Enable
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	795a      	ldrb	r2, [r3, #5]
			| LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	799b      	ldrb	r3, [r3, #6]

	/* Write value to MEMS CTRL_REG1 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);

	/* Configure State Machine 2 */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->State_Machine2_Enable
 8002aec:	4313      	orrs	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	73fb      	strb	r3, [r7, #15]
			| LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);

	/* Write value to MEMS CTRL_REG2 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 8002af2:	f107 030f 	add.w	r3, r7, #15
 8002af6:	2201      	movs	r2, #1
 8002af8:	2122      	movs	r1, #34	; 0x22
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff ff22 	bl	8002944 <ACCELERO_IO_Write>
}
 8002b00:	bf00      	nop
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <LIS3DSH_Click_IntConfig>:
/**
 * @brief  Set LIS3DSH for click detection
 * @param  None
 * @retval None
 */
void LIS3DSH_Click_IntConfig(void) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	71fb      	strb	r3, [r7, #7]
	LIS3DSH_InterruptConfigTypeDef LIS3DSH_InterruptStruct;

	ACCELERO_IO_ITConfig();
 8002b12:	f7ff fee7 	bl	80028e4 <ACCELERO_IO_ITConfig>

	/* Set LIS3DSH Interrupt configuration */
	LIS3DSH_InterruptStruct.Interrupt_Selection_Enable =
 8002b16:	2300      	movs	r3, #0
 8002b18:	707b      	strb	r3, [r7, #1]
			LIS3DSH_INTERRUPT_2_ENABLE;
	LIS3DSH_InterruptStruct.Interrupt_Request =
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	703b      	strb	r3, [r7, #0]
			LIS3DSH_INTERRUPT_REQUEST_LATCHED;
	LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 8002b1e:	2340      	movs	r3, #64	; 0x40
 8002b20:	70bb      	strb	r3, [r7, #2]
	LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 8002b22:	2300      	movs	r3, #0
 8002b24:	70fb      	strb	r3, [r7, #3]
	LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8002b26:	2301      	movs	r3, #1
 8002b28:	717b      	strb	r3, [r7, #5]
	LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	71bb      	strb	r3, [r7, #6]
	LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 8002b2e:	463b      	mov	r3, r7
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff ffb1 	bl	8002a98 <LIS3DSH_InterruptConfig>

	/* Set LIS3DSH State Machines configuration */
	ctrl = 0x03;
 8002b36:	2303      	movs	r3, #3
 8002b38:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR, 1);
 8002b3a:	1dfb      	adds	r3, r7, #7
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	2152      	movs	r1, #82	; 0x52
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff feff 	bl	8002944 <ACCELERO_IO_Write>
	ctrl = 0xC8;
 8002b46:	23c8      	movs	r3, #200	; 0xc8
 8002b48:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR, 1);
 8002b4a:	1dfb      	adds	r3, r7, #7
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2154      	movs	r1, #84	; 0x54
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fef7 	bl	8002944 <ACCELERO_IO_Write>
	ctrl = 0x45;
 8002b56:	2345      	movs	r3, #69	; 0x45
 8002b58:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR, 1);
 8002b5a:	1dfb      	adds	r3, r7, #7
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	2156      	movs	r1, #86	; 0x56
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff feef 	bl	8002944 <ACCELERO_IO_Write>
	ctrl = 0xFC;
 8002b66:	23fc      	movs	r3, #252	; 0xfc
 8002b68:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR, 1);
 8002b6a:	1dfb      	adds	r3, r7, #7
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	215a      	movs	r1, #90	; 0x5a
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fee7 	bl	8002944 <ACCELERO_IO_Write>
	ctrl = 0xA1;
 8002b76:	23a1      	movs	r3, #161	; 0xa1
 8002b78:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR, 1);
 8002b7a:	1dfb      	adds	r3, r7, #7
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	215b      	movs	r1, #91	; 0x5b
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff fedf 	bl	8002944 <ACCELERO_IO_Write>
	ctrl = 0x01;
 8002b86:	2301      	movs	r3, #1
 8002b88:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR, 1);
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	215c      	movs	r1, #92	; 0x5c
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff fed7 	bl	8002944 <ACCELERO_IO_Write>

	ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR, 1);
 8002b96:	1dfb      	adds	r3, r7, #7
 8002b98:	2201      	movs	r2, #1
 8002b9a:	217b      	movs	r1, #123	; 0x7b
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff fed1 	bl	8002944 <ACCELERO_IO_Write>

	/* Configure State Machine 2 to detect single click */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR, 1);
 8002ba2:	1dfb      	adds	r3, r7, #7
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2160      	movs	r1, #96	; 0x60
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fecb 	bl	8002944 <ACCELERO_IO_Write>
	ctrl = 0x06;
 8002bae:	2306      	movs	r3, #6
 8002bb0:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR, 1);
 8002bb2:	1dfb      	adds	r3, r7, #7
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	2161      	movs	r1, #97	; 0x61
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff fec3 	bl	8002944 <ACCELERO_IO_Write>
	ctrl = 0x28;
 8002bbe:	2328      	movs	r3, #40	; 0x28
 8002bc0:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR, 1);
 8002bc2:	1dfb      	adds	r3, r7, #7
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2162      	movs	r1, #98	; 0x62
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff febb 	bl	8002944 <ACCELERO_IO_Write>
	ctrl = 0x11;
 8002bce:	2311      	movs	r3, #17
 8002bd0:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR, 1);
 8002bd2:	1dfb      	adds	r3, r7, #7
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	2163      	movs	r1, #99	; 0x63
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff feb3 	bl	8002944 <ACCELERO_IO_Write>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop

08002be8 <LIS3DSH_RebootCmd>:
/**
 * @brief  Reboot memory content of LIS3DSH.
 * @param  None
 * @retval None
 */
void LIS3DSH_RebootCmd(void) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
	uint8_t tmpreg;
	/* Read CTRL_REG6 register */
	ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8002bee:	1dfb      	adds	r3, r7, #7
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	2125      	movs	r1, #37	; 0x25
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff fed7 	bl	80029a8 <ACCELERO_IO_Read>

	/* Enable or Disable the reboot memory */
	tmpreg |= LIS3DSH_BOOT_FORCED;
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	71fb      	strb	r3, [r7, #7]

	/* Write value to MEMS CTRL_REG6 register */
	ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8002c04:	1dfb      	adds	r3, r7, #7
 8002c06:	2201      	movs	r2, #1
 8002c08:	2125      	movs	r1, #37	; 0x25
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fe9a 	bl	8002944 <ACCELERO_IO_Write>
}
 8002c10:	bf00      	nop
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <LIS3DSH_ReadACC>:
 * @brief  Read LIS3DSH output register, and calculate the acceleration 
 *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
 * @param  pointer on floating buffer.
 * @retval None
 */
void LIS3DSH_ReadACC(int16_t *pData) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];
	uint8_t crtl, i = 0x00;
 8002c20:	2300      	movs	r3, #0
 8002c22:	77fb      	strb	r3, [r7, #31]
	float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8002c24:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <LIS3DSH_ReadACC+0x1a4>)
 8002c26:	61bb      	str	r3, [r7, #24]
	float valueinfloat = 0;
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]

	ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8002c2e:	f107 030b 	add.w	r3, r7, #11
 8002c32:	2201      	movs	r2, #1
 8002c34:	2124      	movs	r1, #36	; 0x24
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff feb6 	bl	80029a8 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	2201      	movs	r2, #1
 8002c42:	2128      	movs	r1, #40	; 0x28
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff feaf 	bl	80029a8 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8002c4a:	f107 030c 	add.w	r3, r7, #12
 8002c4e:	3301      	adds	r3, #1
 8002c50:	2201      	movs	r2, #1
 8002c52:	2129      	movs	r1, #41	; 0x29
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff fea7 	bl	80029a8 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	3302      	adds	r3, #2
 8002c60:	2201      	movs	r2, #1
 8002c62:	212a      	movs	r1, #42	; 0x2a
 8002c64:	4618      	mov	r0, r3
 8002c66:	f7ff fe9f 	bl	80029a8 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8002c6a:	f107 030c 	add.w	r3, r7, #12
 8002c6e:	3303      	adds	r3, #3
 8002c70:	2201      	movs	r2, #1
 8002c72:	212b      	movs	r1, #43	; 0x2b
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fe97 	bl	80029a8 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	3304      	adds	r3, #4
 8002c80:	2201      	movs	r2, #1
 8002c82:	212c      	movs	r1, #44	; 0x2c
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fe8f 	bl	80029a8 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8002c8a:	f107 030c 	add.w	r3, r7, #12
 8002c8e:	3305      	adds	r3, #5
 8002c90:	2201      	movs	r2, #1
 8002c92:	212d      	movs	r1, #45	; 0x2d
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fe87 	bl	80029a8 <ACCELERO_IO_Read>

	switch (crtl & LIS3DSH__FULLSCALE_SELECTION) {
 8002c9a:	7afb      	ldrb	r3, [r7, #11]
 8002c9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d854      	bhi.n	8002d4e <LIS3DSH_ReadACC+0x136>
 8002ca4:	a201      	add	r2, pc, #4	; (adr r2, 8002cac <LIS3DSH_ReadACC+0x94>)
 8002ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002caa:	bf00      	nop
 8002cac:	08002d31 	.word	0x08002d31
 8002cb0:	08002d4f 	.word	0x08002d4f
 8002cb4:	08002d4f 	.word	0x08002d4f
 8002cb8:	08002d4f 	.word	0x08002d4f
 8002cbc:	08002d4f 	.word	0x08002d4f
 8002cc0:	08002d4f 	.word	0x08002d4f
 8002cc4:	08002d4f 	.word	0x08002d4f
 8002cc8:	08002d4f 	.word	0x08002d4f
 8002ccc:	08002d37 	.word	0x08002d37
 8002cd0:	08002d4f 	.word	0x08002d4f
 8002cd4:	08002d4f 	.word	0x08002d4f
 8002cd8:	08002d4f 	.word	0x08002d4f
 8002cdc:	08002d4f 	.word	0x08002d4f
 8002ce0:	08002d4f 	.word	0x08002d4f
 8002ce4:	08002d4f 	.word	0x08002d4f
 8002ce8:	08002d4f 	.word	0x08002d4f
 8002cec:	08002d3d 	.word	0x08002d3d
 8002cf0:	08002d4f 	.word	0x08002d4f
 8002cf4:	08002d4f 	.word	0x08002d4f
 8002cf8:	08002d4f 	.word	0x08002d4f
 8002cfc:	08002d4f 	.word	0x08002d4f
 8002d00:	08002d4f 	.word	0x08002d4f
 8002d04:	08002d4f 	.word	0x08002d4f
 8002d08:	08002d4f 	.word	0x08002d4f
 8002d0c:	08002d43 	.word	0x08002d43
 8002d10:	08002d4f 	.word	0x08002d4f
 8002d14:	08002d4f 	.word	0x08002d4f
 8002d18:	08002d4f 	.word	0x08002d4f
 8002d1c:	08002d4f 	.word	0x08002d4f
 8002d20:	08002d4f 	.word	0x08002d4f
 8002d24:	08002d4f 	.word	0x08002d4f
 8002d28:	08002d4f 	.word	0x08002d4f
 8002d2c:	08002d49 	.word	0x08002d49
	/* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */
	case LIS3DSH_FULLSCALE_2:
		sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <LIS3DSH_ReadACC+0x1a4>)
 8002d32:	61bb      	str	r3, [r7, #24]
		break;
 8002d34:	e00c      	b.n	8002d50 <LIS3DSH_ReadACC+0x138>

		/* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */
	case LIS3DSH_FULLSCALE_4:
		sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8002d36:	4b22      	ldr	r3, [pc, #136]	; (8002dc0 <LIS3DSH_ReadACC+0x1a8>)
 8002d38:	61bb      	str	r3, [r7, #24]
		break;
 8002d3a:	e009      	b.n	8002d50 <LIS3DSH_ReadACC+0x138>

		/* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */
	case LIS3DSH_FULLSCALE_6:
		sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <LIS3DSH_ReadACC+0x1ac>)
 8002d3e:	61bb      	str	r3, [r7, #24]
		break;
 8002d40:	e006      	b.n	8002d50 <LIS3DSH_ReadACC+0x138>

		/* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */
	case LIS3DSH_FULLSCALE_8:
		sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8002d42:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <LIS3DSH_ReadACC+0x1b0>)
 8002d44:	61bb      	str	r3, [r7, #24]
		break;
 8002d46:	e003      	b.n	8002d50 <LIS3DSH_ReadACC+0x138>

		/* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */
	case LIS3DSH_FULLSCALE_16:
		sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8002d48:	4b20      	ldr	r3, [pc, #128]	; (8002dcc <LIS3DSH_ReadACC+0x1b4>)
 8002d4a:	61bb      	str	r3, [r7, #24]
		break;
 8002d4c:	e000      	b.n	8002d50 <LIS3DSH_ReadACC+0x138>

	default:
		break;
 8002d4e:	bf00      	nop
	}

	/* Obtain the mg value for the three axis */
	for (i = 0; i < 3; i++) {
 8002d50:	2300      	movs	r3, #0
 8002d52:	77fb      	strb	r3, [r7, #31]
 8002d54:	e02a      	b.n	8002dac <LIS3DSH_ReadACC+0x194>
		valueinfloat = ((buffer[2 * i + 1] << 8) + buffer[2 * i]) * sensitivity;
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f107 0220 	add.w	r2, r7, #32
 8002d60:	4413      	add	r3, r2
 8002d62:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	7ffa      	ldrb	r2, [r7, #31]
 8002d6a:	0052      	lsls	r2, r2, #1
 8002d6c:	f107 0120 	add.w	r1, r7, #32
 8002d70:	440a      	add	r2, r1
 8002d72:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8002d76:	4413      	add	r3, r2
 8002d78:	ee07 3a90 	vmov	s15, r3
 8002d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d80:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d88:	edc7 7a05 	vstr	s15, [r7, #20]
		pData[i] = (int16_t) valueinfloat;
 8002d8c:	7ffb      	ldrb	r3, [r7, #31]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	4413      	add	r3, r2
 8002d94:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d9c:	edc7 7a00 	vstr	s15, [r7]
 8002da0:	883a      	ldrh	r2, [r7, #0]
 8002da2:	b212      	sxth	r2, r2
 8002da4:	801a      	strh	r2, [r3, #0]
	default:
		break;
	}

	/* Obtain the mg value for the three axis */
	for (i = 0; i < 3; i++) {
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	3301      	adds	r3, #1
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	7ffb      	ldrb	r3, [r7, #31]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d9d1      	bls.n	8002d56 <LIS3DSH_ReadACC+0x13e>
		valueinfloat = ((buffer[2 * i + 1] << 8) + buffer[2 * i]) * sensitivity;
		pData[i] = (int16_t) valueinfloat;
	}
}
 8002db2:	bf00      	nop
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	3d75c28f 	.word	0x3d75c28f
 8002dc0:	3df5c28f 	.word	0x3df5c28f
 8002dc4:	3e3851ec 	.word	0x3e3851ec
 8002dc8:	3e75c28f 	.word	0x3e75c28f
 8002dcc:	3f3ae148 	.word	0x3f3ae148

08002dd0 <LIS302DL_Init>:
/**
 * @brief  Set LIS302DL Initialization.
 * @param  InitStruct: contains mask of different init parameters
 * @retval None
 */
void LIS302DL_Init(uint16_t InitStruct) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]

	/* Configure the low level interface */
	ACCELERO_IO_Init();
 8002dde:	f7ff fd53 	bl	8002888 <ACCELERO_IO_Init>

	ctrl = (uint8_t) InitStruct;
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	73fb      	strb	r3, [r7, #15]

	/* Write value to MEMS CTRL_REG1 register */
	ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8002de8:	f107 030f 	add.w	r3, r7, #15
 8002dec:	2201      	movs	r2, #1
 8002dee:	2120      	movs	r1, #32
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fda7 	bl	8002944 <ACCELERO_IO_Write>
}
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop

08002e00 <LIS302DL_DeInit>:
/**
 * @brief  LIS302DL De-Initialization.
 * @param  None
 * @retval None.
 */
void LIS302DL_DeInit(void) {
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop

08002e10 <LIS302DL_ReadID>:
/**
 * @brief  Read LIS302DL device ID.
 * @param  None
 * @retval The Device ID (two bytes).
 */
uint8_t LIS302DL_ReadID(void) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	71fb      	strb	r3, [r7, #7]

	/* Configure the low level interface */
	ACCELERO_IO_Init();
 8002e1a:	f7ff fd35 	bl	8002888 <ACCELERO_IO_Init>

	/* Read WHO_AM_I register */
	ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8002e1e:	1dfb      	adds	r3, r7, #7
 8002e20:	2201      	movs	r2, #1
 8002e22:	210f      	movs	r1, #15
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff fdbf 	bl	80029a8 <ACCELERO_IO_Read>

	/* Return the ID */
	return (uint16_t) tmp;
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <LIS302DL_FilterConfig>:
/**
 * @brief  Set LIS302DL Internal High Pass Filter configuration.
 * @param  FilterStruct: contains data for filter config
 * @retval None
 */
void LIS302DL_FilterConfig(uint8_t FilterStruct) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl = 0x00;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]

	/* Read CTRL_REG2 register */
	ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8002e42:	f107 030f 	add.w	r3, r7, #15
 8002e46:	2201      	movs	r2, #1
 8002e48:	2121      	movs	r1, #33	; 0x21
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fdac 	bl	80029a8 <ACCELERO_IO_Read>

	/* Clear high pass filter cut-off level, interrupt and data selection bits */
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER |
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	73fb      	strb	r3, [r7, #15]
	LIS302DL_HIGHPASSFILTER_LEVEL_3 |
	LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

	ctrl |= FilterStruct;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	79fb      	ldrb	r3, [r7, #7]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	73fb      	strb	r3, [r7, #15]

	/* Write value to MEMS CTRL_REG2 register */
	ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8002e64:	f107 030f 	add.w	r3, r7, #15
 8002e68:	2201      	movs	r2, #1
 8002e6a:	2121      	movs	r1, #33	; 0x21
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff fd69 	bl	8002944 <ACCELERO_IO_Write>
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop

08002e7c <LIS302DL_InterruptConfig>:
 * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
 *         structure that contains the configuration setting for the LIS302DL Interrupt.
 * @retval None
 */
void LIS302DL_InterruptConfig(
		LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0x00;
 8002e84:	2300      	movs	r3, #0
 8002e86:	73fb      	strb	r3, [r7, #15]

	/* Read CLICK_CFG register */
	ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8002e88:	f107 030f 	add.w	r3, r7, #15
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2138      	movs	r1, #56	; 0x38
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fd89 	bl	80029a8 <ACCELERO_IO_Read>

	/* Configure latch Interrupt request, click interrupts and double click interrupts */
	ctrl = (uint8_t) (LIS302DL_IntConfigStruct->Latch_Request
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	781a      	ldrb	r2, [r3, #0]
			| LIS302DL_IntConfigStruct->SingleClick_Axes
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	785b      	ldrb	r3, [r3, #1]

	/* Read CLICK_CFG register */
	ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);

	/* Configure latch Interrupt request, click interrupts and double click interrupts */
	ctrl = (uint8_t) (LIS302DL_IntConfigStruct->Latch_Request
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	b2da      	uxtb	r2, r3
			| LIS302DL_IntConfigStruct->SingleClick_Axes
			| LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	789b      	ldrb	r3, [r3, #2]

	/* Read CLICK_CFG register */
	ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);

	/* Configure latch Interrupt request, click interrupts and double click interrupts */
	ctrl = (uint8_t) (LIS302DL_IntConfigStruct->Latch_Request
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	73fb      	strb	r3, [r7, #15]
			| LIS302DL_IntConfigStruct->SingleClick_Axes
			| LIS302DL_IntConfigStruct->DoubleClick_Axes);

	/* Write value to MEMS CLICK_CFG register */
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8002eac:	f107 030f 	add.w	r3, r7, #15
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	2138      	movs	r1, #56	; 0x38
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fd45 	bl	8002944 <ACCELERO_IO_Write>
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop

08002ec4 <LIS302DL_Click_IntConfig>:
/**
 * @brief  Set LIS302DL Interrupt configuration
 * @param  None
 * @retval None
 */
void LIS302DL_Click_IntConfig(void) {
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	71fb      	strb	r3, [r7, #7]
	LIS302DL_InterruptConfigTypeDef LIS302DL_InterruptStruct;

	ACCELERO_IO_ITConfig();
 8002ece:	f7ff fd09 	bl	80028e4 <ACCELERO_IO_ITConfig>

	/* Set configuration of Internal High Pass Filter of LIS302DL */
	LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 8002ed2:	2340      	movs	r3, #64	; 0x40
 8002ed4:	713b      	strb	r3, [r7, #4]
	LIS302DL_InterruptStruct.SingleClick_Axes =
 8002ed6:	2310      	movs	r3, #16
 8002ed8:	717b      	strb	r3, [r7, #5]
			LIS302DL_CLICKINTERRUPT_Z_ENABLE;
	LIS302DL_InterruptStruct.DoubleClick_Axes =
 8002eda:	2320      	movs	r3, #32
 8002edc:	71bb      	strb	r3, [r7, #6]
			LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
	LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 8002ede:	1d3b      	adds	r3, r7, #4
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ffcb 	bl	8002e7c <LIS302DL_InterruptConfig>

	/* Configure Interrupt control register: enable Click interrupt on INT1 and
	 INT2 on Z axis high event */
	ctrl = 0x3F;
 8002ee6:	233f      	movs	r3, #63	; 0x3f
 8002ee8:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	2201      	movs	r2, #1
 8002eee:	2122      	movs	r1, #34	; 0x22
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fd27 	bl	8002944 <ACCELERO_IO_Write>

	/* Enable Interrupt generation on click on Z axis */
	ctrl = 0x50;
 8002ef6:	2350      	movs	r3, #80	; 0x50
 8002ef8:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8002efa:	1dfb      	adds	r3, r7, #7
 8002efc:	2201      	movs	r2, #1
 8002efe:	2138      	movs	r1, #56	; 0x38
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fd1f 	bl	8002944 <ACCELERO_IO_Write>

	/* Configure Click Threshold on X/Y axis (10 x 0.5g) */
	ctrl = 0xAA;
 8002f06:	23aa      	movs	r3, #170	; 0xaa
 8002f08:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	213b      	movs	r1, #59	; 0x3b
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fd17 	bl	8002944 <ACCELERO_IO_Write>

	/* Configure Click Threshold on Z axis (10 x 0.5g) */
	ctrl = 0x0A;
 8002f16:	230a      	movs	r3, #10
 8002f18:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	213c      	movs	r1, #60	; 0x3c
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff fd0f 	bl	8002944 <ACCELERO_IO_Write>

	/* Enable interrupt on Y axis high event */
	ctrl = 0x4C;
 8002f26:	234c      	movs	r3, #76	; 0x4c
 8002f28:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 8002f2a:	1dfb      	adds	r3, r7, #7
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2130      	movs	r1, #48	; 0x30
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fd07 	bl	8002944 <ACCELERO_IO_Write>

	/* Configure Time Limit */
	ctrl = 0x03;
 8002f36:	2303      	movs	r3, #3
 8002f38:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8002f3a:	1dfb      	adds	r3, r7, #7
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	213d      	movs	r1, #61	; 0x3d
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fcff 	bl	8002944 <ACCELERO_IO_Write>

	/* Configure Latency */
	ctrl = 0x7F;
 8002f46:	237f      	movs	r3, #127	; 0x7f
 8002f48:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8002f4a:	1dfb      	adds	r3, r7, #7
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	213e      	movs	r1, #62	; 0x3e
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fcf7 	bl	8002944 <ACCELERO_IO_Write>

	/* Configure Click Window */
	ctrl = 0x7F;
 8002f56:	237f      	movs	r3, #127	; 0x7f
 8002f58:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8002f5a:	1dfb      	adds	r3, r7, #7
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	213f      	movs	r1, #63	; 0x3f
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff fcef 	bl	8002944 <ACCELERO_IO_Write>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop

08002f70 <LIS302DL_Click_IntClear>:
/**
 * @brief  Clear LIS302DL click Interrupt 
 * @param  None
 * @retval None
 */
void LIS302DL_Click_IntClear(void) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
	uint8_t buffer[6], clickreg = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	71fb      	strb	r3, [r7, #7]

	/* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
	ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1);
 8002f7a:	1dfb      	adds	r3, r7, #7
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	2139      	movs	r1, #57	; 0x39
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fd11 	bl	80029a8 <ACCELERO_IO_Read>
	ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8002f86:	f107 0308 	add.w	r3, r7, #8
 8002f8a:	2206      	movs	r2, #6
 8002f8c:	2127      	movs	r1, #39	; 0x27
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fd0a 	bl	80029a8 <ACCELERO_IO_Read>
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <LIS302DL_RebootCmd>:
/**
 * @brief  Reboot memory content of LIS302DL.
 * @param  None
 * @retval None
 */
void LIS302DL_RebootCmd(void) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
	uint8_t tmpreg;
	/* Read CTRL_REG2 register */
	ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8002fa2:	1dfb      	adds	r3, r7, #7
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	2121      	movs	r1, #33	; 0x21
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fcfd 	bl	80029a8 <ACCELERO_IO_Read>

	/* Enable or Disable the reboot memory */
	tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	71fb      	strb	r3, [r7, #7]

	/* Write value to MEMS CTRL_REG2 register */
	ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8002fb8:	1dfb      	adds	r3, r7, #7
 8002fba:	2201      	movs	r2, #1
 8002fbc:	2121      	movs	r1, #33	; 0x21
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fcc0 	bl	8002944 <ACCELERO_IO_Write>
}
 8002fc4:	bf00      	nop
 8002fc6:	3708      	adds	r7, #8
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <LIS302DL_ReadACC>:
 * @brief  Read LIS302DL output register, and calculate the acceleration 
 *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
 * @param  pfData: Data out pointer
 * @retval None
 */
void LIS302DL_ReadACC(int16_t *pData) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];
	int16_t pnRawData[3];
	uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8002fd4:	2312      	movs	r3, #18
 8002fd6:	77fb      	strb	r3, [r7, #31]
	uint8_t crtl, i = 0x00;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	77bb      	strb	r3, [r7, #30]

	ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 8002fdc:	f107 030f 	add.w	r3, r7, #15
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	2120      	movs	r1, #32
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fcdf 	bl	80029a8 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) buffer, LIS302DL_OUT_X_ADDR, 6);
 8002fea:	f107 0318 	add.w	r3, r7, #24
 8002fee:	2206      	movs	r2, #6
 8002ff0:	2129      	movs	r1, #41	; 0x29
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7ff fcd8 	bl	80029a8 <ACCELERO_IO_Read>

	for (i = 0; i < 3; i++) {
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	77bb      	strb	r3, [r7, #30]
 8002ffc:	e011      	b.n	8003022 <LIS302DL_ReadACC+0x56>
		pnRawData[i] = buffer[2 * i];
 8002ffe:	7fbb      	ldrb	r3, [r7, #30]
 8003000:	7fba      	ldrb	r2, [r7, #30]
 8003002:	0052      	lsls	r2, r2, #1
 8003004:	f107 0120 	add.w	r1, r7, #32
 8003008:	440a      	add	r2, r1
 800300a:	f912 2c08 	ldrsb.w	r2, [r2, #-8]
 800300e:	b212      	sxth	r2, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	f107 0120 	add.w	r1, r7, #32
 8003016:	440b      	add	r3, r1
 8003018:	f823 2c10 	strh.w	r2, [r3, #-16]
	uint8_t crtl, i = 0x00;

	ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
	ACCELERO_IO_Read((uint8_t*) buffer, LIS302DL_OUT_X_ADDR, 6);

	for (i = 0; i < 3; i++) {
 800301c:	7fbb      	ldrb	r3, [r7, #30]
 800301e:	3301      	adds	r3, #1
 8003020:	77bb      	strb	r3, [r7, #30]
 8003022:	7fbb      	ldrb	r3, [r7, #30]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d9ea      	bls.n	8002ffe <LIS302DL_ReadACC+0x32>
		pnRawData[i] = buffer[2 * i];
	}

	switch (crtl & LIS302DL_FULLSCALE_9_2) {
 8003028:	7bfb      	ldrb	r3, [r7, #15]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <LIS302DL_ReadACC+0x6c>
 8003032:	2b20      	cmp	r3, #32
 8003034:	d003      	beq.n	800303e <LIS302DL_ReadACC+0x72>
	case LIS302DL_FULLSCALE_9_2:
		sensitivity = LIS302DL_SENSITIVITY_9_2G;
		break;

	default:
		break;
 8003036:	e005      	b.n	8003044 <LIS302DL_ReadACC+0x78>
	}

	switch (crtl & LIS302DL_FULLSCALE_9_2) {
	/* FS bit = 0 ==> Sensitivity typical value = 18milligals/digit*/
	case LIS302DL_FULLSCALE_2_3:
		sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8003038:	2312      	movs	r3, #18
 800303a:	77fb      	strb	r3, [r7, #31]
		break;
 800303c:	e002      	b.n	8003044 <LIS302DL_ReadACC+0x78>

		/* FS bit = 1 ==> Sensitivity typical value = 72milligals/digit*/
	case LIS302DL_FULLSCALE_9_2:
		sensitivity = LIS302DL_SENSITIVITY_9_2G;
 800303e:	2348      	movs	r3, #72	; 0x48
 8003040:	77fb      	strb	r3, [r7, #31]
		break;
 8003042:	bf00      	nop
	default:
		break;
	}

	/* Obtain the mg value for the three axis */
	for (i = 0; i < 3; i++) {
 8003044:	2300      	movs	r3, #0
 8003046:	77bb      	strb	r3, [r7, #30]
 8003048:	e015      	b.n	8003076 <LIS302DL_ReadACC+0xaa>
		pData[i] = (pnRawData[i] * sensitivity);
 800304a:	7fbb      	ldrb	r3, [r7, #30]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	441a      	add	r2, r3
 8003052:	7fbb      	ldrb	r3, [r7, #30]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	f107 0120 	add.w	r1, r7, #32
 800305a:	440b      	add	r3, r1
 800305c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003060:	b299      	uxth	r1, r3
 8003062:	7ffb      	ldrb	r3, [r7, #31]
 8003064:	b29b      	uxth	r3, r3
 8003066:	fb11 f303 	smulbb	r3, r1, r3
 800306a:	b29b      	uxth	r3, r3
 800306c:	b21b      	sxth	r3, r3
 800306e:	8013      	strh	r3, [r2, #0]
	default:
		break;
	}

	/* Obtain the mg value for the three axis */
	for (i = 0; i < 3; i++) {
 8003070:	7fbb      	ldrb	r3, [r7, #30]
 8003072:	3301      	adds	r3, #1
 8003074:	77bb      	strb	r3, [r7, #30]
 8003076:	7fbb      	ldrb	r3, [r7, #30]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d9e6      	bls.n	800304a <LIS302DL_ReadACC+0x7e>
		pData[i] = (pnRawData[i] * sensitivity);
	}
}
 800307c:	bf00      	nop
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <__libc_init_array>:
 8003084:	b570      	push	{r4, r5, r6, lr}
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <__libc_init_array+0x3c>)
 8003088:	4c0e      	ldr	r4, [pc, #56]	; (80030c4 <__libc_init_array+0x40>)
 800308a:	1ae4      	subs	r4, r4, r3
 800308c:	10a4      	asrs	r4, r4, #2
 800308e:	2500      	movs	r5, #0
 8003090:	461e      	mov	r6, r3
 8003092:	42a5      	cmp	r5, r4
 8003094:	d004      	beq.n	80030a0 <__libc_init_array+0x1c>
 8003096:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800309a:	4798      	blx	r3
 800309c:	3501      	adds	r5, #1
 800309e:	e7f8      	b.n	8003092 <__libc_init_array+0xe>
 80030a0:	f000 f816 	bl	80030d0 <_init>
 80030a4:	4c08      	ldr	r4, [pc, #32]	; (80030c8 <__libc_init_array+0x44>)
 80030a6:	4b09      	ldr	r3, [pc, #36]	; (80030cc <__libc_init_array+0x48>)
 80030a8:	1ae4      	subs	r4, r4, r3
 80030aa:	10a4      	asrs	r4, r4, #2
 80030ac:	2500      	movs	r5, #0
 80030ae:	461e      	mov	r6, r3
 80030b0:	42a5      	cmp	r5, r4
 80030b2:	d004      	beq.n	80030be <__libc_init_array+0x3a>
 80030b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030b8:	4798      	blx	r3
 80030ba:	3501      	adds	r5, #1
 80030bc:	e7f8      	b.n	80030b0 <__libc_init_array+0x2c>
 80030be:	bd70      	pop	{r4, r5, r6, pc}
 80030c0:	08003100 	.word	0x08003100
 80030c4:	08003100 	.word	0x08003100
 80030c8:	08003104 	.word	0x08003104
 80030cc:	08003100 	.word	0x08003100

080030d0 <_init>:
 80030d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d2:	bf00      	nop
 80030d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d6:	bc08      	pop	{r3}
 80030d8:	469e      	mov	lr, r3
 80030da:	4770      	bx	lr

080030dc <_fini>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr
