
Template2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f24  08002f24  00012f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f3c  08002f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f40  08002f40  00012f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08002f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
  7 .bss          00000120  20000080  20000080  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200001a0  200001a0  00020080  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b207  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b9b  00000000  00000000  0002b2b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c48  00000000  00000000  0002ce58  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b40  00000000  00000000  0002daa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000051c1  00000000  00000000  0002e5e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003ced  00000000  00000000  000337a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003748e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003150  00000000  00000000  0003750c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003a65c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002f0c 	.word	0x08002f0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08002f0c 	.word	0x08002f0c

080001c8 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); /* set CP10 and CP11 Full Access */
 80001cc:	4a16      	ldr	r2, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80001dc:	4a13      	ldr	r2, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <SystemInit+0x64>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <SystemInit+0x64>)
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <SystemInit+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <SystemInit+0x64>)
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <SystemInit+0x68>)
 8000202:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <SystemInit+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b04      	ldr	r3, [pc, #16]	; (8000228 <SystemInit+0x60>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00
 800022c:	40023800 	.word	0x40023800
 8000230:	24003010 	.word	0x24003010

08000234 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop

08000244 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000248:	e7fe      	b.n	8000248 <HardFault_Handler+0x4>
 800024a:	bf00      	nop

0800024c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler+0x4>
 8000252:	bf00      	nop

08000254 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000258:	e7fe      	b.n	8000258 <BusFault_Handler+0x4>
 800025a:	bf00      	nop

0800025c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000260:	e7fe      	b.n	8000260 <UsageFault_Handler+0x4>
 8000262:	bf00      	nop

08000264 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop

08000294 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000298:	f002 f832 	bl	8002300 <HAL_IncTick>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002b6:	e003      	b.n	80002c0 <LoopCopyDataInit>

080002b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002be:	3104      	adds	r1, #4

080002c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002c8:	d3f6      	bcc.n	80002b8 <CopyDataInit>
  ldr  r2, =_sbss
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002cc:	e002      	b.n	80002d4 <LoopFillZerobss>

080002ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002d0:	f842 3b04 	str.w	r3, [r2], #4

080002d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002d8:	d3f9      	bcc.n	80002ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002da:	f7ff ff75 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002de:	f002 fdef 	bl	8002ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002e2:	f000 f85b 	bl	800039c <main>
  bx  lr    
 80002e6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002e8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002ec:	08002f44 	.word	0x08002f44
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002f4:	20000080 	.word	0x20000080
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80002f8:	20000080 	.word	0x20000080
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002fc:	200001a0 	.word	0x200001a0

08000300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	6039      	str	r1, [r7, #0]
 800030e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000314:	2b00      	cmp	r3, #0
 8000316:	da0b      	bge.n	8000330 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000318:	490d      	ldr	r1, [pc, #52]	; (8000350 <NVIC_SetPriority+0x4c>)
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	f003 030f 	and.w	r3, r3, #15
 8000320:	3b04      	subs	r3, #4
 8000322:	683a      	ldr	r2, [r7, #0]
 8000324:	b2d2      	uxtb	r2, r2
 8000326:	0112      	lsls	r2, r2, #4
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	440b      	add	r3, r1
 800032c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800032e:	e009      	b.n	8000344 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000330:	4908      	ldr	r1, [pc, #32]	; (8000354 <NVIC_SetPriority+0x50>)
 8000332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	b2d2      	uxtb	r2, r2
 800033a:	0112      	lsls	r2, r2, #4
 800033c:	b2d2      	uxtb	r2, r2
 800033e:	440b      	add	r3, r1
 8000340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000344:	bf00      	nop
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	e000ed00 	.word	0xe000ed00
 8000354:	e000e100 	.word	0xe000e100

08000358 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000366:	d301      	bcc.n	800036c <SysTick_Config+0x14>
 8000368:	2301      	movs	r3, #1
 800036a:	e011      	b.n	8000390 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800036c:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <SysTick_Config+0x40>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000374:	3b01      	subs	r3, #1
 8000376:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000378:	210f      	movs	r1, #15
 800037a:	f04f 30ff 	mov.w	r0, #4294967295
 800037e:	f7ff ffc1 	bl	8000304 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <SysTick_Config+0x40>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <SysTick_Config+0x40>)
 800038a:	2207      	movs	r2, #7
 800038c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	3708      	adds	r7, #8
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}
 8000398:	e000e010 	.word	0xe000e010

0800039c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
             timer for example or other time source), keeping in mind that Time base 
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
             handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 80003a0:	f001 ff92 	bl	80022c8 <HAL_Init>

  /* Configure the system clock to 168 MHz */
  SystemClock_Config();
 80003a4:	f000 f88c 	bl	80004c0 <SystemClock_Config>

  /*Initialize board's components */
  if(BSP_ACCELERO_Init() != HAL_OK)
 80003a8:	f001 ffd0 	bl	800234c <BSP_ACCELERO_Init>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <main+0x1a>
  {
	/* Initialization Error */
	Error_Handler();
 80003b2:	f000 f8ef 	bl	8000594 <Error_Handler>
  }

  BSP_LED_Init(LED3);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f002 f854 	bl	8002464 <BSP_LED_Init>

  /* SysTick end of count event each 10ms */
 SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80003bc:	f001 fc66 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 80003c0:	4602      	mov	r2, r0
 80003c2:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <main+0x48>)
 80003c4:	601a      	str	r2, [r3, #0]
 SysTick_Config(SystemCoreClock / 100);
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <main+0x48>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <main+0x4c>)
 80003cc:	fba2 2303 	umull	r2, r3, r2, r3
 80003d0:	095b      	lsrs	r3, r3, #5
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ffc0 	bl	8000358 <SysTick_Config>

 BSP_LED_On(LED3);
 80003d8:	2001      	movs	r0, #1
 80003da:	f002 f8bb 	bl	8002554 <BSP_LED_On>
 TIM4_Config();
 80003de:	f000 f805 	bl	80003ec <TIM4_Config>


  /* Infinite loop */
  while (1)
  {
  }
 80003e2:	e7fe      	b.n	80003e2 <main+0x46>
 80003e4:	20000000 	.word	0x20000000
 80003e8:	51eb851f 	.word	0x51eb851f

080003ec <TIM4_Config>:
  * @brief  Configures the TIM Peripheral.
  * @param  None
  * @retval None
  */
static void TIM4_Config()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0

  ==> TIM4_CCRx = TIM4_ARR/2 = 1000  (where x = 1, 2, 3 and 4).
  ----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) ((SystemCoreClock /2) / 2000) - 1;
 80003f0:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <TIM4_Config+0xbc>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a2d      	ldr	r2, [pc, #180]	; (80004ac <TIM4_Config+0xc0>)
 80003f6:	fba2 2303 	umull	r2, r3, r2, r3
 80003fa:	0a1b      	lsrs	r3, r3, #8
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	3b01      	subs	r3, #1
 8000400:	b29a      	uxth	r2, r3
 8000402:	4b2b      	ldr	r3, [pc, #172]	; (80004b0 <TIM4_Config+0xc4>)
 8000404:	801a      	strh	r2, [r3, #0]

  /* Time base configuration */
  htim4.Instance             = TIM4;
 8000406:	4b2b      	ldr	r3, [pc, #172]	; (80004b4 <TIM4_Config+0xc8>)
 8000408:	4a2b      	ldr	r2, [pc, #172]	; (80004b8 <TIM4_Config+0xcc>)
 800040a:	601a      	str	r2, [r3, #0]
  htim4.Init.Period          = TIM_ARR;
 800040c:	4b29      	ldr	r3, [pc, #164]	; (80004b4 <TIM4_Config+0xc8>)
 800040e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000412:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler       = PrescalerValue;
 8000414:	4b26      	ldr	r3, [pc, #152]	; (80004b0 <TIM4_Config+0xc4>)
 8000416:	881b      	ldrh	r3, [r3, #0]
 8000418:	461a      	mov	r2, r3
 800041a:	4b26      	ldr	r3, [pc, #152]	; (80004b4 <TIM4_Config+0xc8>)
 800041c:	605a      	str	r2, [r3, #4]
  htim4.Init.ClockDivision   = 0;
 800041e:	4b25      	ldr	r3, [pc, #148]	; (80004b4 <TIM4_Config+0xc8>)
 8000420:	2200      	movs	r2, #0
 8000422:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode     = TIM_COUNTERMODE_UP;
 8000424:	4b23      	ldr	r3, [pc, #140]	; (80004b4 <TIM4_Config+0xc8>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800042a:	4822      	ldr	r0, [pc, #136]	; (80004b4 <TIM4_Config+0xc8>)
 800042c:	f000 f994 	bl	8000758 <HAL_TIM_PWM_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <TIM4_Config+0x4e>
  {
    /* Initialization Error */
    Error_Handler();
 8000436:	f000 f8ad 	bl	8000594 <Error_Handler>
  }

  /* TIM PWM1 Mode configuration: Channel */
  /* Output Compare Timing Mode configuration: Channel1 */
  sConfigTim4.OCMode = TIM_OCMODE_PWM1;
 800043a:	4b20      	ldr	r3, [pc, #128]	; (80004bc <TIM4_Config+0xd0>)
 800043c:	2260      	movs	r2, #96	; 0x60
 800043e:	601a      	str	r2, [r3, #0]
  sConfigTim4.OCIdleState = TIM_CCx_ENABLE;
 8000440:	4b1e      	ldr	r3, [pc, #120]	; (80004bc <TIM4_Config+0xd0>)
 8000442:	2201      	movs	r2, #1
 8000444:	615a      	str	r2, [r3, #20]
  sConfigTim4.Pulse = TIM_CCR;
 8000446:	4b1d      	ldr	r3, [pc, #116]	; (80004bc <TIM4_Config+0xd0>)
 8000448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800044c:	605a      	str	r2, [r3, #4]
  sConfigTim4.OCPolarity = TIM_OCPOLARITY_HIGH;
 800044e:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <TIM4_Config+0xd0>)
 8000450:	2200      	movs	r2, #0
 8000452:	609a      	str	r2, [r3, #8]

  /* Output Compare PWM1 Mode configuration: Channel1 */
  if(HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigTim4, TIM_CHANNEL_1) != HAL_OK)
 8000454:	2200      	movs	r2, #0
 8000456:	4919      	ldr	r1, [pc, #100]	; (80004bc <TIM4_Config+0xd0>)
 8000458:	4816      	ldr	r0, [pc, #88]	; (80004b4 <TIM4_Config+0xc8>)
 800045a:	f000 fabb 	bl	80009d4 <HAL_TIM_PWM_ConfigChannel>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <TIM4_Config+0x7c>
  {
    /* Initialization Error */
    Error_Handler();
 8000464:	f000 f896 	bl	8000594 <Error_Handler>
  }

  /* Output Compare PWM1 Mode configuration: Channel2 */
  if(HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigTim4, TIM_CHANNEL_2) != HAL_OK)
 8000468:	2204      	movs	r2, #4
 800046a:	4914      	ldr	r1, [pc, #80]	; (80004bc <TIM4_Config+0xd0>)
 800046c:	4811      	ldr	r0, [pc, #68]	; (80004b4 <TIM4_Config+0xc8>)
 800046e:	f000 fab1 	bl	80009d4 <HAL_TIM_PWM_ConfigChannel>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <TIM4_Config+0x90>
  {
    /* Initialization Error */
    Error_Handler();
 8000478:	f000 f88c 	bl	8000594 <Error_Handler>
  }

  /* Output Compare PWM1 Mode configuration: Channel3 */
  if(HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigTim4, TIM_CHANNEL_3) != HAL_OK)
 800047c:	2208      	movs	r2, #8
 800047e:	490f      	ldr	r1, [pc, #60]	; (80004bc <TIM4_Config+0xd0>)
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <TIM4_Config+0xc8>)
 8000482:	f000 faa7 	bl	80009d4 <HAL_TIM_PWM_ConfigChannel>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <TIM4_Config+0xa4>
  {
    /* Initialization Error */
    Error_Handler();
 800048c:	f000 f882 	bl	8000594 <Error_Handler>
  }
  /* Output Compare PWM1 Mode configuration: Channel4 */
  if(HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigTim4, TIM_CHANNEL_4) != HAL_OK)
 8000490:	220c      	movs	r2, #12
 8000492:	490a      	ldr	r1, [pc, #40]	; (80004bc <TIM4_Config+0xd0>)
 8000494:	4807      	ldr	r0, [pc, #28]	; (80004b4 <TIM4_Config+0xc8>)
 8000496:	f000 fa9d 	bl	80009d4 <HAL_TIM_PWM_ConfigChannel>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d001      	beq.n	80004a4 <TIM4_Config+0xb8>
  {
    /* Initialization Error */
    Error_Handler();
 80004a0:	f000 f878 	bl	8000594 <Error_Handler>
  }
}
 80004a4:	bf00      	nop
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	20000000 	.word	0x20000000
 80004ac:	10624dd3 	.word	0x10624dd3
 80004b0:	2000009c 	.word	0x2000009c
 80004b4:	200000fc 	.word	0x200000fc
 80004b8:	40000800 	.word	0x40000800
 80004bc:	20000138 	.word	0x20000138

080004c0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b094      	sub	sp, #80	; 0x50
 80004c4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	4a2f      	ldr	r2, [pc, #188]	; (8000588 <SystemClock_Config+0xc8>)
 80004cc:	4b2e      	ldr	r3, [pc, #184]	; (8000588 <SystemClock_Config+0xc8>)
 80004ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	6413      	str	r3, [r2, #64]	; 0x40
 80004d6:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <SystemClock_Config+0xc8>)
 80004d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4a29      	ldr	r2, [pc, #164]	; (800058c <SystemClock_Config+0xcc>)
 80004e8:	4b28      	ldr	r3, [pc, #160]	; (800058c <SystemClock_Config+0xcc>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f0:	6013      	str	r3, [r2, #0]
 80004f2:	4b26      	ldr	r3, [pc, #152]	; (800058c <SystemClock_Config+0xcc>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004fe:	2301      	movs	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000502:	2301      	movs	r3, #1
 8000504:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000506:	2302      	movs	r3, #2
 8000508:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800050a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800050e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000510:	2308      	movs	r3, #8
 8000512:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000514:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000518:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800051a:	2302      	movs	r3, #2
 800051c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800051e:	2307      	movs	r3, #7
 8000520:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4618      	mov	r0, r3
 8000528:	f001 f80a 	bl	8001540 <HAL_RCC_OscConfig>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <SystemClock_Config+0x76>
  {
    /* Initialization Error */
    Error_Handler();
 8000532:	f000 f82f 	bl	8000594 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000536:	230f      	movs	r3, #15
 8000538:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053a:	2302      	movs	r3, #2
 800053c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8000542:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000546:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 8000548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800054e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000552:	2105      	movs	r1, #5
 8000554:	4618      	mov	r0, r3
 8000556:	f001 fa1d 	bl	8001994 <HAL_RCC_ClockConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0xa4>
  {
    /* Initialization Error */
    Error_Handler();
 8000560:	f000 f818 	bl	8000594 <Error_Handler>
  }

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 8000564:	f001 fee6 	bl	8002334 <HAL_GetREVID>
 8000568:	4602      	mov	r2, r0
 800056a:	f241 0301 	movw	r3, #4097	; 0x1001
 800056e:	429a      	cmp	r2, r3
 8000570:	d105      	bne.n	800057e <SystemClock_Config+0xbe>
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000572:	4a07      	ldr	r2, [pc, #28]	; (8000590 <SystemClock_Config+0xd0>)
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800057c:	6013      	str	r3, [r2, #0]
  }
}
 800057e:	bf00      	nop
 8000580:	3750      	adds	r7, #80	; 0x50
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40007000 	.word	0x40007000
 8000590:	40023c00 	.word	0x40023c00

08000594 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* TODO: User may add here some code to deal with this error */
  while(1)
  {
  }
 8000598:	e7fe      	b.n	8000598 <Error_Handler+0x4>
 800059a:	bf00      	nop

0800059c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08c      	sub	sp, #48	; 0x30
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80005a4:	2300      	movs	r3, #0
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80005ac:	2200      	movs	r2, #0
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	2036      	movs	r0, #54	; 0x36
 80005b2:	f001 fe5f 	bl	8002274 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005b6:	2036      	movs	r0, #54	; 0x36
 80005b8:	f001 fe78 	bl	80022ac <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4a24      	ldr	r2, [pc, #144]	; (8000654 <HAL_InitTick+0xb8>)
 80005c2:	4b24      	ldr	r3, [pc, #144]	; (8000654 <HAL_InitTick+0xb8>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6413      	str	r3, [r2, #64]	; 0x40
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <HAL_InitTick+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	f003 0310 	and.w	r3, r3, #16
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005d8:	f107 020c 	add.w	r2, r7, #12
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4611      	mov	r1, r2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fba2 	bl	8001d2c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80005e8:	69fb      	ldr	r3, [r7, #28]
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80005ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d103      	bne.n	80005fa <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005f2:	f001 fb75 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 80005f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80005f8:	e004      	b.n	8000604 <HAL_InitTick+0x68>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005fa:	f001 fb71 	bl	8001ce0 <HAL_RCC_GetPCLK1Freq>
 80005fe:	4603      	mov	r3, r0
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000606:	4a14      	ldr	r2, [pc, #80]	; (8000658 <HAL_InitTick+0xbc>)
 8000608:	fba2 2303 	umull	r2, r3, r2, r3
 800060c:	0c9b      	lsrs	r3, r3, #18
 800060e:	3b01      	subs	r3, #1
 8000610:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8000612:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0xc0>)
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <HAL_InitTick+0xc4>)
 8000616:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000618:	4b10      	ldr	r3, [pc, #64]	; (800065c <HAL_InitTick+0xc0>)
 800061a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800061e:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <HAL_InitTick+0xc0>)
 8000622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000624:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_InitTick+0xc0>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <HAL_InitTick+0xc0>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000632:	480a      	ldr	r0, [pc, #40]	; (800065c <HAL_InitTick+0xc0>)
 8000634:	f000 f83e 	bl	80006b4 <HAL_TIM_Base_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d104      	bne.n	8000648 <HAL_InitTick+0xac>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800063e:	4807      	ldr	r0, [pc, #28]	; (800065c <HAL_InitTick+0xc0>)
 8000640:	f000 f86e 	bl	8000720 <HAL_TIM_Base_Start_IT>
 8000644:	4603      	mov	r3, r0
 8000646:	e000      	b.n	800064a <HAL_InitTick+0xae>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000648:	2301      	movs	r3, #1
}
 800064a:	4618      	mov	r0, r3
 800064c:	3730      	adds	r7, #48	; 0x30
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	431bde83 	.word	0x431bde83
 800065c:	20000160 	.word	0x20000160
 8000660:	40001000 	.word	0x40001000

08000664 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 800066c:	f001 fe48 	bl	8002300 <HAL_IncTick>
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800067c:	4802      	ldr	r0, [pc, #8]	; (8000688 <TIM6_DAC_IRQHandler+0x10>)
 800067e:	f000 f8a1 	bl	80007c4 <HAL_TIM_IRQHandler>
}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000160 	.word	0x20000160

0800068c <HAL_TIMEx_CommutationCallback>:
 * @brief  Hall commutation changed callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIMEx_CommutationCallback could be implemented in the user file
	 */
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr

080006a0 <HAL_TIMEx_BreakCallback>:
 * @brief  Hall Break detection callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim) {
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIMEx_BreakCallback could be implemented in the user file
	 */
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <HAL_TIM_Base_Init>:
 *         parameters in the TIM_HandleTypeDef and create the associated handle.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d101      	bne.n	80006c6 <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	e01d      	b.n	8000702 <HAL_TIM_Base_Init+0x4e>
	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

	if (htim->State == HAL_TIM_STATE_RESET) {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d106      	bne.n	80006e0 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f816 	bl	800070c <HAL_TIM_Base_MspInit>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2202      	movs	r2, #2
 80006e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	3304      	adds	r3, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4610      	mov	r0, r2
 80006f4:	f000 fa5c 	bl	8000bb0 <TIM_Base_SetConfig>

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2201      	movs	r2, #1
 80006fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	return HAL_OK;
 8000700:	2300      	movs	r3, #0
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop

0800070c <HAL_TIM_Base_MspInit>:
 * @brief  Initializes the TIM Base MSP.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIM_Base_MspInit could be implemented in the user file
	 */
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <HAL_TIM_Base_Start_IT>:
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim) {
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Enable the TIM Update interrupt */
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	68d2      	ldr	r2, [r2, #12]
 8000732:	f042 0201 	orr.w	r2, r2, #1
 8000736:	60da      	str	r2, [r3, #12]

	/* Enable the Peripheral */
	__HAL_TIM_ENABLE(htim);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	6812      	ldr	r2, [r2, #0]
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	f042 0201 	orr.w	r2, r2, #1
 8000746:	601a      	str	r2, [r3, #0]

	/* Return function status */
	return HAL_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <HAL_TIM_PWM_Init>:
 *         parameters in the TIM_HandleTypeDef and create the associated handle.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d101      	bne.n	800076a <HAL_TIM_PWM_Init+0x12>
		return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
 8000768:	e01d      	b.n	80007a6 <HAL_TIM_PWM_Init+0x4e>
	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

	if (htim->State == HAL_TIM_STATE_RESET) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d106      	bne.n	8000784 <HAL_TIM_PWM_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_TIM_PWM_MspInit(htim);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f000 f816 	bl	80007b0 <HAL_TIM_PWM_MspInit>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2202      	movs	r2, #2
 8000788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	/* Init the base time for the PWM */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	3304      	adds	r3, #4
 8000794:	4619      	mov	r1, r3
 8000796:	4610      	mov	r0, r2
 8000798:	f000 fa0a 	bl	8000bb0 <TIM_Base_SetConfig>

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2201      	movs	r2, #1
 80007a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop

080007b0 <HAL_TIM_PWM_MspInit>:
 * @brief  Initializes the TIM PWM MSP.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim) {
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_MspInit could be implemented in the user file
	 */
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <HAL_TIM_IRQHandler>:
 * @brief  This function handles TIM interrupts requests.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	/* Capture compare 1 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	691b      	ldr	r3, [r3, #16]
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d022      	beq.n	8000820 <HAL_TIM_IRQHandler+0x5c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	f003 0302 	and.w	r3, r3, #2
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d01b      	beq.n	8000820 <HAL_TIM_IRQHandler+0x5c>
			{
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f06f 0202 	mvn.w	r2, #2
 80007f0:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2201      	movs	r2, #1
 80007f6:	761a      	strb	r2, [r3, #24]

				/* Input capture event */
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f003 0303 	and.w	r3, r3, #3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d003      	beq.n	800080e <HAL_TIM_IRQHandler+0x4a>
					HAL_TIM_IC_CaptureCallback(htim);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f000 f9b4 	bl	8000b74 <HAL_TIM_IC_CaptureCallback>
 800080c:	e005      	b.n	800081a <HAL_TIM_IRQHandler+0x56>
				}
				/* Output compare event */
				else {
					HAL_TIM_OC_DelayElapsedCallback(htim);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 f9a6 	bl	8000b60 <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 f9b7 	bl	8000b88 <HAL_TIM_PWM_PulseFinishedCallback>
				}
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	761a      	strb	r2, [r3, #24]
			}
		}
	}
	/* Capture compare 2 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	2b00      	cmp	r3, #0
 800082c:	d022      	beq.n	8000874 <HAL_TIM_IRQHandler+0xb0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	2b00      	cmp	r3, #0
 800083a:	d01b      	beq.n	8000874 <HAL_TIM_IRQHandler+0xb0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f06f 0204 	mvn.w	r2, #4
 8000844:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2202      	movs	r2, #2
 800084a:	761a      	strb	r2, [r3, #24]
			/* Input capture event */
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000856:	2b00      	cmp	r3, #0
 8000858:	d003      	beq.n	8000862 <HAL_TIM_IRQHandler+0x9e>
				HAL_TIM_IC_CaptureCallback(htim);
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f98a 	bl	8000b74 <HAL_TIM_IC_CaptureCallback>
 8000860:	e005      	b.n	800086e <HAL_TIM_IRQHandler+0xaa>
			}
			/* Output compare event */
			else {
				HAL_TIM_OC_DelayElapsedCallback(htim);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f97c 	bl	8000b60 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f98d 	bl	8000b88 <HAL_TIM_PWM_PulseFinishedCallback>
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	761a      	strb	r2, [r3, #24]
		}
	}
	/* Capture compare 3 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	2b00      	cmp	r3, #0
 8000880:	d022      	beq.n	80008c8 <HAL_TIM_IRQHandler+0x104>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	f003 0308 	and.w	r3, r3, #8
 800088c:	2b00      	cmp	r3, #0
 800088e:	d01b      	beq.n	80008c8 <HAL_TIM_IRQHandler+0x104>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f06f 0208 	mvn.w	r2, #8
 8000898:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2204      	movs	r2, #4
 800089e:	761a      	strb	r2, [r3, #24]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	f003 0303 	and.w	r3, r3, #3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d003      	beq.n	80008b6 <HAL_TIM_IRQHandler+0xf2>
				HAL_TIM_IC_CaptureCallback(htim);
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 f960 	bl	8000b74 <HAL_TIM_IC_CaptureCallback>
 80008b4:	e005      	b.n	80008c2 <HAL_TIM_IRQHandler+0xfe>
			}
			/* Output compare event */
			else {
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f952 	bl	8000b60 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 f963 	bl	8000b88 <HAL_TIM_PWM_PulseFinishedCallback>
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	761a      	strb	r2, [r3, #24]
		}
	}
	/* Capture compare 4 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	f003 0310 	and.w	r3, r3, #16
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d022      	beq.n	800091c <HAL_TIM_IRQHandler+0x158>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d01b      	beq.n	800091c <HAL_TIM_IRQHandler+0x158>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f06f 0210 	mvn.w	r2, #16
 80008ec:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2208      	movs	r2, #8
 80008f2:	761a      	strb	r2, [r3, #24]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_TIM_IRQHandler+0x146>
				HAL_TIM_IC_CaptureCallback(htim);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f000 f936 	bl	8000b74 <HAL_TIM_IC_CaptureCallback>
 8000908:	e005      	b.n	8000916 <HAL_TIM_IRQHandler+0x152>
			}
			/* Output compare event */
			else {
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f000 f928 	bl	8000b60 <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f939 	bl	8000b88 <HAL_TIM_PWM_PulseFinishedCallback>
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	761a      	strb	r2, [r3, #24]
		}
	}
	/* TIM Update event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	2b00      	cmp	r3, #0
 8000928:	d00e      	beq.n	8000948 <HAL_TIM_IRQHandler+0x184>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	f003 0301 	and.w	r3, r3, #1
 8000934:	2b00      	cmp	r3, #0
 8000936:	d007      	beq.n	8000948 <HAL_TIM_IRQHandler+0x184>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f06f 0201 	mvn.w	r2, #1
 8000940:	611a      	str	r2, [r3, #16]
			HAL_TIM_PeriodElapsedCallback(htim);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fe8e 	bl	8000664 <HAL_TIM_PeriodElapsedCallback>
		}
	}
	/* TIM Break input event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	2b00      	cmp	r3, #0
 8000954:	d00e      	beq.n	8000974 <HAL_TIM_IRQHandler+0x1b0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000960:	2b00      	cmp	r3, #0
 8000962:	d007      	beq.n	8000974 <HAL_TIM_IRQHandler+0x1b0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800096c:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_BreakCallback(htim);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff fe96 	bl	80006a0 <HAL_TIMEx_BreakCallback>
		}
	}
	/* TIM Trigger detection event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	691b      	ldr	r3, [r3, #16]
 800097a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097e:	2b00      	cmp	r3, #0
 8000980:	d00e      	beq.n	80009a0 <HAL_TIM_IRQHandler+0x1dc>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098c:	2b00      	cmp	r3, #0
 800098e:	d007      	beq.n	80009a0 <HAL_TIM_IRQHandler+0x1dc>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000998:	611a      	str	r2, [r3, #16]
			HAL_TIM_TriggerCallback(htim);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 f8fe 	bl	8000b9c <HAL_TIM_TriggerCallback>
		}
	}
	/* TIM commutation event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d00e      	beq.n	80009cc <HAL_TIM_IRQHandler+0x208>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d007      	beq.n	80009cc <HAL_TIM_IRQHandler+0x208>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f06f 0220 	mvn.w	r2, #32
 80009c4:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_CommutationCallback(htim);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fe60 	bl	800068c <HAL_TIMEx_CommutationCallback>
		}
	}
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <HAL_TIM_PWM_ConfigChannel>:
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
		TIM_OC_InitTypeDef* sConfig, uint32_t Channel) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
	__HAL_LOCK(htim);
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d101      	bne.n	80009ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80009ea:	2302      	movs	r3, #2
 80009ec:	e0b4      	b.n	8000b58 <HAL_TIM_PWM_ConfigChannel+0x184>
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	2201      	movs	r2, #1
 80009f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	assert_param(IS_TIM_CHANNELS(Channel));
	assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
	assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
	assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

	htim->State = HAL_TIM_STATE_BUSY;
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2202      	movs	r2, #2
 80009fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	switch (Channel) {
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2b0c      	cmp	r3, #12
 8000a02:	f200 809f 	bhi.w	8000b44 <HAL_TIM_PWM_ConfigChannel+0x170>
 8000a06:	a201      	add	r2, pc, #4	; (adr r2, 8000a0c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8000a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0c:	08000a41 	.word	0x08000a41
 8000a10:	08000b45 	.word	0x08000b45
 8000a14:	08000b45 	.word	0x08000b45
 8000a18:	08000b45 	.word	0x08000b45
 8000a1c:	08000a81 	.word	0x08000a81
 8000a20:	08000b45 	.word	0x08000b45
 8000a24:	08000b45 	.word	0x08000b45
 8000a28:	08000b45 	.word	0x08000b45
 8000a2c:	08000ac3 	.word	0x08000ac3
 8000a30:	08000b45 	.word	0x08000b45
 8000a34:	08000b45 	.word	0x08000b45
 8000a38:	08000b45 	.word	0x08000b45
 8000a3c:	08000b03 	.word	0x08000b03
	case TIM_CHANNEL_1: {
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
		/* Configure the Channel 1 in PWM mode */
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 f9d4 	bl	8000df4 <TIM_OC1_SetConfig>

		/* Set the Preload enable bit for channel1 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	6812      	ldr	r2, [r2, #0]
 8000a54:	6992      	ldr	r2, [r2, #24]
 8000a56:	f042 0208 	orr.w	r2, r2, #8
 8000a5a:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	6812      	ldr	r2, [r2, #0]
 8000a64:	6992      	ldr	r2, [r2, #24]
 8000a66:	f022 0204 	bic.w	r2, r2, #4
 8000a6a:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	6812      	ldr	r2, [r2, #0]
 8000a74:	6991      	ldr	r1, [r2, #24]
 8000a76:	68ba      	ldr	r2, [r7, #8]
 8000a78:	6912      	ldr	r2, [r2, #16]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	619a      	str	r2, [r3, #24]
	}
		break;
 8000a7e:	e062      	b.n	8000b46 <HAL_TIM_PWM_ConfigChannel+0x172>

	case TIM_CHANNEL_2: {
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
		/* Configure the Channel 2 in PWM mode */
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	68b9      	ldr	r1, [r7, #8]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f93c 	bl	8000d04 <TIM_OC2_SetConfig>

		/* Set the Preload enable bit for channel2 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	6992      	ldr	r2, [r2, #24]
 8000a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a9a:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	68fa      	ldr	r2, [r7, #12]
 8000aa2:	6812      	ldr	r2, [r2, #0]
 8000aa4:	6992      	ldr	r2, [r2, #24]
 8000aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000aaa:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	6991      	ldr	r1, [r2, #24]
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	6912      	ldr	r2, [r2, #16]
 8000aba:	0212      	lsls	r2, r2, #8
 8000abc:	430a      	orrs	r2, r1
 8000abe:	619a      	str	r2, [r3, #24]
	}
		break;
 8000ac0:	e041      	b.n	8000b46 <HAL_TIM_PWM_ConfigChannel+0x172>

	case TIM_CHANNEL_3: {
		assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
		/* Configure the Channel 3 in PWM mode */
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68b9      	ldr	r1, [r7, #8]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fa07 	bl	8000edc <TIM_OC3_SetConfig>

		/* Set the Preload enable bit for channel3 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	6812      	ldr	r2, [r2, #0]
 8000ad6:	69d2      	ldr	r2, [r2, #28]
 8000ad8:	f042 0208 	orr.w	r2, r2, #8
 8000adc:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	6812      	ldr	r2, [r2, #0]
 8000ae6:	69d2      	ldr	r2, [r2, #28]
 8000ae8:	f022 0204 	bic.w	r2, r2, #4
 8000aec:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	6812      	ldr	r2, [r2, #0]
 8000af6:	69d1      	ldr	r1, [r2, #28]
 8000af8:	68ba      	ldr	r2, [r7, #8]
 8000afa:	6912      	ldr	r2, [r2, #16]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	61da      	str	r2, [r3, #28]
	}
		break;
 8000b00:	e021      	b.n	8000b46 <HAL_TIM_PWM_ConfigChannel+0x172>

	case TIM_CHANNEL_4: {
		assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
		/* Configure the Channel 4 in PWM mode */
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	68b9      	ldr	r1, [r7, #8]
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fa5f 	bl	8000fcc <TIM_OC4_SetConfig>

		/* Set the Preload enable bit for channel4 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	69d2      	ldr	r2, [r2, #28]
 8000b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b1c:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	6812      	ldr	r2, [r2, #0]
 8000b26:	69d2      	ldr	r2, [r2, #28]
 8000b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b2c:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68fa      	ldr	r2, [r7, #12]
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	69d1      	ldr	r1, [r2, #28]
 8000b38:	68ba      	ldr	r2, [r7, #8]
 8000b3a:	6912      	ldr	r2, [r2, #16]
 8000b3c:	0212      	lsls	r2, r2, #8
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	61da      	str	r2, [r3, #28]
	}
		break;
 8000b42:	e000      	b.n	8000b46 <HAL_TIM_PWM_ConfigChannel+0x172>

	default:
		break;
 8000b44:	bf00      	nop
	}

	htim->State = HAL_TIM_STATE_READY;
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	__HAL_UNLOCK(htim);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	return HAL_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3710      	adds	r7, #16
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <HAL_TIM_OC_DelayElapsedCallback>:
 * @brief  Output Compare callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
	 */
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <HAL_TIM_IC_CaptureCallback>:
 * @brief  Input Capture callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <HAL_TIM_PWM_PulseFinishedCallback>:
 * @brief  PWM Pulse finished callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
	 */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_TIM_TriggerCallback>:
 * @brief  Hall Trigger detection callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIM_TriggerCallback could be implemented in the user file
	 */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx: TIM peripheral
 * @param  Structure: pointer on TIM Time Base required parameters  
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1 = 0U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
	tmpcr1 = TIMx->CR1;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a44      	ldr	r2, [pc, #272]	; (8000cd8 <TIM_Base_SetConfig+0x128>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d013      	beq.n	8000bf4 <TIM_Base_SetConfig+0x44>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd2:	d00f      	beq.n	8000bf4 <TIM_Base_SetConfig+0x44>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a41      	ldr	r2, [pc, #260]	; (8000cdc <TIM_Base_SetConfig+0x12c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d00b      	beq.n	8000bf4 <TIM_Base_SetConfig+0x44>
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a40      	ldr	r2, [pc, #256]	; (8000ce0 <TIM_Base_SetConfig+0x130>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d007      	beq.n	8000bf4 <TIM_Base_SetConfig+0x44>
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a3f      	ldr	r2, [pc, #252]	; (8000ce4 <TIM_Base_SetConfig+0x134>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d003      	beq.n	8000bf4 <TIM_Base_SetConfig+0x44>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a3e      	ldr	r2, [pc, #248]	; (8000ce8 <TIM_Base_SetConfig+0x138>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d101      	bne.n	8000bf8 <TIM_Base_SetConfig+0x48>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <TIM_Base_SetConfig+0x4a>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d008      	beq.n	8000c10 <TIM_Base_SetConfig+0x60>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c04:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <TIM_Base_SetConfig+0x128>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d02b      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c1e:	d027      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <TIM_Base_SetConfig+0x12c>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d023      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <TIM_Base_SetConfig+0x130>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d01f      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a2c      	ldr	r2, [pc, #176]	; (8000ce4 <TIM_Base_SetConfig+0x134>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d01b      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a2b      	ldr	r2, [pc, #172]	; (8000ce8 <TIM_Base_SetConfig+0x138>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d017      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a2a      	ldr	r2, [pc, #168]	; (8000cec <TIM_Base_SetConfig+0x13c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d013      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <TIM_Base_SetConfig+0x140>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d00f      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a28      	ldr	r2, [pc, #160]	; (8000cf4 <TIM_Base_SetConfig+0x144>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d00b      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a27      	ldr	r2, [pc, #156]	; (8000cf8 <TIM_Base_SetConfig+0x148>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d007      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a26      	ldr	r2, [pc, #152]	; (8000cfc <TIM_Base_SetConfig+0x14c>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d003      	beq.n	8000c70 <TIM_Base_SetConfig+0xc0>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <TIM_Base_SetConfig+0x150>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d101      	bne.n	8000c74 <TIM_Base_SetConfig+0xc4>
 8000c70:	2301      	movs	r3, #1
 8000c72:	e000      	b.n	8000c76 <TIM_Base_SetConfig+0xc6>
 8000c74:	2300      	movs	r3, #0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d008      	beq.n	8000c8c <TIM_Base_SetConfig+0xdc>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c80:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
	}

	TIMx->CR1 = tmpcr1;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	601a      	str	r2, [r3, #0]

	/* Set the Auto-reload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = (uint32_t) Structure->Prescaler;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a0c      	ldr	r2, [pc, #48]	; (8000cd8 <TIM_Base_SetConfig+0x128>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d003      	beq.n	8000cb2 <TIM_Base_SetConfig+0x102>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <TIM_Base_SetConfig+0x138>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <TIM_Base_SetConfig+0x106>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <TIM_Base_SetConfig+0x108>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <TIM_Base_SetConfig+0x114>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler 
	 and the repetition counter(only for TIM1 and TIM8) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	615a      	str	r2, [r3, #20]
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	40010000 	.word	0x40010000
 8000cdc:	40000400 	.word	0x40000400
 8000ce0:	40000800 	.word	0x40000800
 8000ce4:	40000c00 	.word	0x40000c00
 8000ce8:	40010400 	.word	0x40010400
 8000cec:	40014000 	.word	0x40014000
 8000cf0:	40014400 	.word	0x40014400
 8000cf4:	40014800 	.word	0x40014800
 8000cf8:	40001800 	.word	0x40001800
 8000cfc:	40001c00 	.word	0x40001c00
 8000d00:	40002000 	.word	0x40002000

08000d04 <TIM_OC2_SetConfig>:
 * @brief  Time Output Compare 2 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config: The output configuration structure
 * @retval None
 */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx = 0U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
	uint32_t tmpccer = 0U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
	uint32_t tmpcr2 = 0U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a1b      	ldr	r3, [r3, #32]
 8000d1e:	f023 0210 	bic.w	r2, r3, #16
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a1b      	ldr	r3, [r3, #32]
 8000d2a:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000d3e:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d46:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	021b      	lsls	r3, r3, #8
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC2P;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f023 0320 	bic.w	r3, r3, #32
 8000d5a:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	011b      	lsls	r3, r3, #4
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a20      	ldr	r2, [pc, #128]	; (8000dec <TIM_OC2_SetConfig+0xe8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d003      	beq.n	8000d78 <TIM_OC2_SetConfig+0x74>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	4a1f      	ldr	r2, [pc, #124]	; (8000df0 <TIM_OC2_SetConfig+0xec>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d101      	bne.n	8000d7c <TIM_OC2_SetConfig+0x78>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	e000      	b.n	8000d7e <TIM_OC2_SetConfig+0x7a>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d021      	beq.n	8000dc6 <TIM_OC2_SetConfig+0xc2>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC2NP;
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d88:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC2NE;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d9c:	617b      	str	r3, [r7, #20]

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS2;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000da4:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000dac:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR2 = OC_Config->Pulse;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	639a      	str	r2, [r3, #56]	; 0x38

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	621a      	str	r2, [r3, #32]
}
 8000de0:	bf00      	nop
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	40010000 	.word	0x40010000
 8000df0:	40010400 	.word	0x40010400

08000df4 <TIM_OC1_SetConfig>:
 * @brief  Time Output Compare 1 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config: The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8000df4:	b480      	push	{r7}
 8000df6:	b087      	sub	sp, #28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx = 0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
	uint32_t tmpccer = 0U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
	uint32_t tmpcr2 = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	f023 0201 	bic.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e2e:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	f023 0303 	bic.w	r3, r3, #3
 8000e36:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f023 0302 	bic.w	r3, r3, #2
 8000e48:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a1f      	ldr	r2, [pc, #124]	; (8000ed4 <TIM_OC1_SetConfig+0xe0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d003      	beq.n	8000e64 <TIM_OC1_SetConfig+0x70>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a1e      	ldr	r2, [pc, #120]	; (8000ed8 <TIM_OC1_SetConfig+0xe4>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d101      	bne.n	8000e68 <TIM_OC1_SetConfig+0x74>
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <TIM_OC1_SetConfig+0x76>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d01e      	beq.n	8000eac <TIM_OC1_SetConfig+0xb8>
		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f023 0308 	bic.w	r3, r3, #8
 8000e74:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC1NE;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f023 0304 	bic.w	r3, r3, #4
 8000e86:	617b      	str	r3, [r7, #20]

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS1;
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e8e:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e96:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	621a      	str	r2, [r3, #32]
}
 8000ec6:	bf00      	nop
 8000ec8:	371c      	adds	r7, #28
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40010000 	.word	0x40010000
 8000ed8:	40010400 	.word	0x40010400

08000edc <TIM_OC3_SetConfig>:
 * @brief  Time Output Compare 3 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config: The output configuration structure
 * @retval None
 */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx = 0U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
	uint32_t tmpccer = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
	uint32_t tmpcr2 = 0U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f16:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f023 0303 	bic.w	r3, r3, #3
 8000f1e:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f30:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <TIM_OC3_SetConfig+0xe8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d003      	beq.n	8000f4e <TIM_OC3_SetConfig+0x72>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <TIM_OC3_SetConfig+0xec>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <TIM_OC3_SetConfig+0x76>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <TIM_OC3_SetConfig+0x78>
 8000f52:	2300      	movs	r3, #0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d021      	beq.n	8000f9c <TIM_OC3_SetConfig+0xc0>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f5e:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	697a      	ldr	r2, [r7, #20]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC3NE;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f72:	617b      	str	r3, [r7, #20]

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS3;
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f7a:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f82:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	011b      	lsls	r3, r3, #4
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	621a      	str	r2, [r3, #32]
}
 8000fb6:	bf00      	nop
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	40010400 	.word	0x40010400

08000fcc <TIM_OC4_SetConfig>:
 * @brief  Time Output Compare 4 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config: The output configuration structure
 * @retval None
 */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b087      	sub	sp, #28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx = 0U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
	uint32_t tmpccer = 0U;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
	uint32_t tmpcr2 = 0U;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a1b      	ldr	r3, [r3, #32]
 8000ff2:	60fb      	str	r3, [r7, #12]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	617b      	str	r3, [r7, #20]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	613b      	str	r3, [r7, #16]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001006:	613b      	str	r3, [r7, #16]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800100e:	613b      	str	r3, [r7, #16]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001022:	60fb      	str	r3, [r7, #12]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	031b      	lsls	r3, r3, #12
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

	/*if((TIMx == TIM1) || (TIMx == TIM8))*/
	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <TIM_OC4_SetConfig+0xb8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d003      	beq.n	8001040 <TIM_OC4_SetConfig+0x74>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <TIM_OC4_SetConfig+0xbc>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d101      	bne.n	8001044 <TIM_OC4_SetConfig+0x78>
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <TIM_OC4_SetConfig+0x7a>
 8001044:	2300      	movs	r3, #0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d009      	beq.n	800105e <TIM_OC4_SetConfig+0x92>
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001050:	617b      	str	r3, [r7, #20]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	019b      	lsls	r3, r3, #6
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	4313      	orrs	r3, r2
 800105c:	617b      	str	r3, [r7, #20]
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	641a      	str	r2, [r3, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	621a      	str	r2, [r3, #32]
}
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40010000 	.word	0x40010000
 8001088:	40010400 	.word	0x40010400

0800108c <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e055      	b.n	800114a <HAL_SPI_Init+0xbe>
	if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
	{
		assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
	}
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif

	if (hspi->State == HAL_SPI_STATE_RESET) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d106      	bne.n	80010be <HAL_SPI_Init+0x32>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f873 	bl	80011a4 <HAL_SPI_MspInit>
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2202      	movs	r2, #2
 80010c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010d4:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6851      	ldr	r1, [r2, #4]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6892      	ldr	r2, [r2, #8]
 80010e2:	4311      	orrs	r1, r2
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	68d2      	ldr	r2, [r2, #12]
 80010e8:	4311      	orrs	r1, r2
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6912      	ldr	r2, [r2, #16]
 80010ee:	4311      	orrs	r1, r2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6952      	ldr	r2, [r2, #20]
 80010f4:	4311      	orrs	r1, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6992      	ldr	r2, [r2, #24]
 80010fa:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80010fe:	4311      	orrs	r1, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	69d2      	ldr	r2, [r2, #28]
 8001104:	4311      	orrs	r1, r2
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	6a12      	ldr	r2, [r2, #32]
 800110a:	4311      	orrs	r1, r2
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001110:	430a      	orrs	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
					| (hspi->Init.NSS & SPI_CR1_SSM)
					| hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit
					| hspi->Init.CRCCalculation));

	/* Configure : NSS management */
	WRITE_REG(hspi->Instance->CR2,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	6992      	ldr	r2, [r2, #24]
 800111c:	0c12      	lsrs	r2, r2, #16
 800111e:	f002 0104 	and.w	r1, r2, #4
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001126:	430a      	orrs	r2, r1
 8001128:	605a      	str	r2, [r3, #4]
	}
#endif

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6812      	ldr	r2, [r2, #0]
 8001132:	69d2      	ldr	r2, [r2, #28]
 8001134:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001138:	61da      	str	r2, [r3, #28]
#endif

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	return HAL_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop

08001154 <HAL_SPI_DeInit>:
 * @brief  De Initialize the SPI peripheral.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_SPI_DeInit+0x12>
		return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e01a      	b.n	800119c <HAL_SPI_DeInit+0x48>
	}

	/* Check SPI Instance parameter */
	assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

	hspi->State = HAL_SPI_STATE_BUSY;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2202      	movs	r2, #2
 800116a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Disable the SPI Peripheral Clock */
	__HAL_SPI_DISABLE(hspi);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800117c:	601a      	str	r2, [r3, #0]

	/* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
	HAL_SPI_MspDeInit(hspi);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f81a 	bl	80011b8 <HAL_SPI_MspDeInit>

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->State = HAL_SPI_STATE_RESET;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

	/* Release Lock */
	__HAL_UNLOCK(hspi);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_SPI_MspInit>:
 * @brief  Initialize the SPI MSP.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval None
 */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hspi);
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SPI_MspInit should be implemented in the user file
	 */
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_SPI_MspDeInit>:
 * @brief  De-Initialize the SPI MSP.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval None
 */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi) {
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hspi);
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SPI_MspDeInit should be implemented in the user file
	 */
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <HAL_SPI_TransmitReceive>:
 * @param  Size: amount of data to be sent and received
 * @param  Timeout: Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi,
		uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	807b      	strh	r3, [r7, #2]
#ifdef USE_SPI_CRC
	__IO uint16_t tmpreg = 0U;
#endif
	uint32_t tickstart = 0U;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
	HAL_StatusTypeDef errorcode = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	75fb      	strb	r3, [r7, #23]

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_SPI_TransmitReceive+0x24>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e113      	b.n	8001418 <HAL_SPI_TransmitReceive+0x24c>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Init tickstart for timeout managment*/
	tickstart = HAL_GetTick();
 80011f8:	f001 f890 	bl	800231c <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

	if (!((hspi->State == HAL_SPI_STATE_READY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d011      	beq.n	800122e <HAL_SPI_TransmitReceive+0x62>
			|| ((hspi->Init.Mode == SPI_MODE_MASTER)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	685b      	ldr	r3, [r3, #4]
	__HAL_LOCK(hspi);

	/* Init tickstart for timeout managment*/
	tickstart = HAL_GetTick();

	if (!((hspi->State == HAL_SPI_STATE_READY)
 800120e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001212:	d109      	bne.n	8001228 <HAL_SPI_TransmitReceive+0x5c>
			|| ((hspi->Init.Mode == SPI_MODE_MASTER)
					&& (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d105      	bne.n	8001228 <HAL_SPI_TransmitReceive+0x5c>
					&& (hspi->State == HAL_SPI_STATE_BUSY_RX)))) {
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b04      	cmp	r3, #4
 8001226:	d002      	beq.n	800122e <HAL_SPI_TransmitReceive+0x62>
		errorcode = HAL_BUSY;
 8001228:	2302      	movs	r3, #2
 800122a:	75fb      	strb	r3, [r7, #23]
		goto error;
 800122c:	e0eb      	b.n	8001406 <HAL_SPI_TransmitReceive+0x23a>
	}

	if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_SPI_TransmitReceive+0x74>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d002      	beq.n	8001240 <HAL_SPI_TransmitReceive+0x74>
 800123a:	887b      	ldrh	r3, [r7, #2]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <HAL_SPI_TransmitReceive+0x7a>
		errorcode = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	75fb      	strb	r3, [r7, #23]
		goto error;
 8001244:	e0df      	b.n	8001406 <HAL_SPI_TransmitReceive+0x23a>
	}

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State == HAL_SPI_STATE_READY) {
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b01      	cmp	r3, #1
 8001250:	d103      	bne.n	800125a <HAL_SPI_TransmitReceive+0x8e>
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2205      	movs	r2, #5
 8001256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	}

	/* Set the transaction information */
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	655a      	str	r2, [r3, #84]	; 0x54
	hspi->pRxBuffPtr = (uint8_t *) pRxData;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
	hspi->RxXferCount = Size;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	887a      	ldrh	r2, [r7, #2]
 800126a:	87da      	strh	r2, [r3, #62]	; 0x3e
	hspi->RxXferSize = Size;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	879a      	strh	r2, [r3, #60]	; 0x3c
	hspi->pTxBuffPtr = (uint8_t *) pTxData;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	631a      	str	r2, [r3, #48]	; 0x30
	hspi->TxXferCount = Size;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	887a      	ldrh	r2, [r7, #2]
 800127c:	86da      	strh	r2, [r3, #54]	; 0x36
	hspi->TxXferSize = Size;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	887a      	ldrh	r2, [r7, #2]
 8001282:	869a      	strh	r2, [r3, #52]	; 0x34

	/*Init field not used in handle to zero */
	hspi->RxISR = NULL;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
	hspi->TxISR = NULL;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	645a      	str	r2, [r3, #68]	; 0x44
		SPI_RESET_CRC(hspi);
	}
#endif

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <HAL_SPI_TransmitReceive+0xe2>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012ac:	601a      	str	r2, [r3, #0]
	}

	/* Transmit and Receive data in 16 Bit mode */
	if (hspi->Init.DataSize == SPI_DATASIZE_16BIT) {
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012b6:	f040 808e 	bne.w	80013d6 <HAL_SPI_TransmitReceive+0x20a>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 80012ba:	e041      	b.n	8001340 <HAL_SPI_TransmitReceive+0x174>
			/* Check TXE flag */
			if ((hspi->TxXferCount > 0U)
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d014      	beq.n	80012ee <HAL_SPI_TransmitReceive+0x122>
					&& (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))) {
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d00d      	beq.n	80012ee <HAL_SPI_TransmitReceive+0x122>
				hspi->Instance->DR = *((uint16_t *) pTxData);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	8812      	ldrh	r2, [r2, #0]
 80012da:	60da      	str	r2, [r3, #12]
				pTxData += sizeof(uint16_t);
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	3302      	adds	r3, #2
 80012e0:	60bb      	str	r3, [r7, #8]
				hspi->TxXferCount--;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80012e6:	3b01      	subs	r3, #1
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	86da      	strh	r2, [r3, #54]	; 0x36
				}
#endif
			}

			/* Check RXNE flag */
			if ((hspi->RxXferCount > 0U)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d015      	beq.n	8001322 <HAL_SPI_TransmitReceive+0x156>
					&& (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))) {
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00e      	beq.n	8001322 <HAL_SPI_TransmitReceive+0x156>
				*((uint16_t *) pRxData) = hspi->Instance->DR;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	b29a      	uxth	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	801a      	strh	r2, [r3, #0]
				pRxData += sizeof(uint16_t);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3302      	adds	r3, #2
 8001314:	607b      	str	r3, [r7, #4]
				hspi->RxXferCount--;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800131a:	3b01      	subs	r3, #1
 800131c:	b29a      	uxth	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
			if ((Timeout != HAL_MAX_DELAY)
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d00a      	beq.n	8001340 <HAL_SPI_TransmitReceive+0x174>
					&& ((HAL_GetTick() - tickstart) >= Timeout)) {
 800132a:	f000 fff7 	bl	800231c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad2      	subs	r2, r2, r3
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	429a      	cmp	r2, r3
 8001338:	d302      	bcc.n	8001340 <HAL_SPI_TransmitReceive+0x174>
				errorcode = HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	75fb      	strb	r3, [r7, #23]
				goto error;
 800133e:	e062      	b.n	8001406 <HAL_SPI_TransmitReceive+0x23a>
		__HAL_SPI_ENABLE(hspi);
	}

	/* Transmit and Receive data in 16 Bit mode */
	if (hspi->Init.DataSize == SPI_DATASIZE_16BIT) {
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1b9      	bne.n	80012bc <HAL_SPI_TransmitReceive+0xf0>
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1b5      	bne.n	80012bc <HAL_SPI_TransmitReceive+0xf0>
 8001350:	e049      	b.n	80013e6 <HAL_SPI_TransmitReceive+0x21a>
	}
	/* Transmit and Receive data in 8 Bit mode */
	else {
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
			/* check TXE flag */
			if ((hspi->TxXferCount > 0U)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001356:	2b00      	cmp	r3, #0
 8001358:	d015      	beq.n	8001386 <HAL_SPI_TransmitReceive+0x1ba>
					&& (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))) {
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00e      	beq.n	8001386 <HAL_SPI_TransmitReceive+0x1ba>
				*(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f103 020c 	add.w	r2, r3, #12
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1c59      	adds	r1, r3, #1
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	7013      	strb	r3, [r2, #0]
				hspi->TxXferCount--;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800137e:	3b01      	subs	r3, #1
 8001380:	b29a      	uxth	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	86da      	strh	r2, [r3, #54]	; 0x36
				}
#endif
			}

			/* Wait until RXNE flag is reset */
			if ((hspi->RxXferCount > 0U)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800138a:	2b00      	cmp	r3, #0
 800138c:	d014      	beq.n	80013b8 <HAL_SPI_TransmitReceive+0x1ec>
					&& (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))) {
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00d      	beq.n	80013b8 <HAL_SPI_TransmitReceive+0x1ec>
				(*(uint8_t *) pRxData++) = hspi->Instance->DR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	68d2      	ldr	r2, [r2, #12]
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	701a      	strb	r2, [r3, #0]
				hspi->RxXferCount--;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	87da      	strh	r2, [r3, #62]	; 0x3e
			}
			if ((Timeout != HAL_MAX_DELAY)
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013be:	d00a      	beq.n	80013d6 <HAL_SPI_TransmitReceive+0x20a>
					&& ((HAL_GetTick() - tickstart) >= Timeout)) {
 80013c0:	f000 ffac 	bl	800231c <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad2      	subs	r2, r2, r3
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d302      	bcc.n	80013d6 <HAL_SPI_TransmitReceive+0x20a>
				errorcode = HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	75fb      	strb	r3, [r7, #23]
				goto error;
 80013d4:	e017      	b.n	8001406 <HAL_SPI_TransmitReceive+0x23a>
			}
		}
	}
	/* Transmit and Receive data in 8 Bit mode */
	else {
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1b9      	bne.n	8001352 <HAL_SPI_TransmitReceive+0x186>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1b5      	bne.n	8001352 <HAL_SPI_TransmitReceive+0x186>
		errorcode = HAL_ERROR;
	}
#endif

	/* Check the end of the transaction */
	if (SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK) {
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	6a39      	ldr	r1, [r7, #32]
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f000 f88a 	bl	8001504 <SPI_CheckFlag_BSY>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <HAL_SPI_TransmitReceive+0x23a>
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fa:	f043 0220 	orr.w	r2, r3, #32
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	655a      	str	r2, [r3, #84]	; 0x54
		errorcode = HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	75fb      	strb	r3, [r7, #23]
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	__HAL_UNLOCK(hspi);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return errorcode;
 8001416:	7dfb      	ldrb	r3, [r7, #23]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <HAL_SPI_GetState>:
 * @brief  Return the SPI handle state.
 * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval SPI state
 */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi) {
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	/* Return SPI handle state */
	return hspi->State;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SPI_WaitFlagStateUntilTimeout>:
 * @param Timeout: Timeout duration
 * @param Tickstart: tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
	while ((hspi->Instance->SR & Flag) != State) {
 800144a:	e04d      	b.n	80014e8 <SPI_WaitFlagStateUntilTimeout+0xac>
		if (Timeout != HAL_MAX_DELAY) {
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001452:	d049      	beq.n	80014e8 <SPI_WaitFlagStateUntilTimeout+0xac>
			if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout)) {
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <SPI_WaitFlagStateUntilTimeout+0x2e>
 800145a:	f000 ff5f 	bl	800231c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	1ad2      	subs	r2, r2, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	429a      	cmp	r2, r3
 8001468:	d33e      	bcc.n	80014e8 <SPI_WaitFlagStateUntilTimeout+0xac>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	6852      	ldr	r2, [r2, #4]
 8001474:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001478:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001482:	d111      	bne.n	80014a8 <SPI_WaitFlagStateUntilTimeout+0x6c>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800148c:	d004      	beq.n	8001498 <SPI_WaitFlagStateUntilTimeout+0x5c>
								|| (hspi->Init.Direction
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001496:	d107      	bne.n	80014a8 <SPI_WaitFlagStateUntilTimeout+0x6c>
										== SPI_DIRECTION_2LINES_RXONLY))) {
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014a6:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014b0:	d110      	bne.n	80014d4 <SPI_WaitFlagStateUntilTimeout+0x98>
					SPI_RESET_CRC(hspi);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6819      	ldr	r1, [r3, #0]
 80014bc:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80014c0:	400b      	ands	r3, r1
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	6812      	ldr	r2, [r2, #0]
 80014ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014d2:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e008      	b.n	80014fa <SPI_WaitFlagStateUntilTimeout+0xbe>
 * @param Tickstart: tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart) {
	while ((hspi->Instance->SR & Flag) != State) {
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	401a      	ands	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d1a9      	bne.n	800144c <SPI_WaitFlagStateUntilTimeout+0x10>
				return HAL_TIMEOUT;
			}
		}
	}

	return HAL_OK;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop

08001504 <SPI_CheckFlag_BSY>:
 * @param Timeout: Timeout duration
 * @param Tickstart: tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi,
		uint32_t Timeout, uint32_t Tickstart) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
	/* Control the BSY flag */
	if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	9300      	str	r3, [sp, #0]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2200      	movs	r2, #0
 8001518:	2180      	movs	r1, #128	; 0x80
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff ff8e 	bl	800143c <SPI_WaitFlagStateUntilTimeout>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d007      	beq.n	8001536 <SPI_CheckFlag_BSY+0x32>
			Tickstart) != HAL_OK) {
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152a:	f043 0220 	orr.w	r2, r3, #32
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	655a      	str	r2, [r3, #84]	; 0x54
		return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e000      	b.n	8001538 <SPI_CheckFlag_BSY+0x34>
	}
	return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_RCC_OscConfig>:
 *         first and then HSE On or HSE Bypass.
 
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b098      	sub	sp, #96	; 0x60
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8001548:	2300      	movs	r3, #0
 800154a:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b00      	cmp	r3, #0
 8001556:	d04f      	beq.n	80015f8 <HAL_RCC_OscConfig+0xb8>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001558:	4ba4      	ldr	r3, [pc, #656]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00b      	beq.n	800157c <HAL_RCC_OscConfig+0x3c>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001564:	4ba1      	ldr	r3, [pc, #644]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d111      	bne.n	8001594 <HAL_RCC_OscConfig+0x54>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8001570:	4b9e      	ldr	r3, [pc, #632]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d00b      	beq.n	8001594 <HAL_RCC_OscConfig+0x54>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157c:	4b9b      	ldr	r3, [pc, #620]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d036      	beq.n	80015f6 <HAL_RCC_OscConfig+0xb6>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d132      	bne.n	80015f6 <HAL_RCC_OscConfig+0xb6>
				return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e1f6      	b.n	8001982 <HAL_RCC_OscConfig+0x442>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001594:	4a96      	ldr	r2, [pc, #600]	; (80017f0 <HAL_RCC_OscConfig+0x2b0>)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	b2db      	uxtb	r3, r3
 800159c:	7013      	strb	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d013      	beq.n	80015ce <HAL_RCC_OscConfig+0x8e>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80015a6:	f000 feb9 	bl	800231c <HAL_GetTick>
 80015aa:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x80>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80015ae:	f000 feb5 	bl	800231c <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x80>
						return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e1e0      	b.n	8001982 <HAL_RCC_OscConfig+0x442>
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80015c0:	4b8a      	ldr	r3, [pc, #552]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x6e>
 80015cc:	e014      	b.n	80015f8 <HAL_RCC_OscConfig+0xb8>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80015ce:	f000 fea5 	bl	800231c <HAL_GetTick>
 80015d2:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0xa8>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80015d6:	f000 fea1 	bl	800231c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b64      	cmp	r3, #100	; 0x64
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0xa8>
						return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1cc      	b.n	8001982 <HAL_RCC_OscConfig+0x442>
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 80015e8:	4b80      	ldr	r3, [pc, #512]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x96>
 80015f4:	e000      	b.n	80015f8 <HAL_RCC_OscConfig+0xb8>
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f6:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 8082 	beq.w	800170a <HAL_RCC_OscConfig+0x1ca>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001606:	4b79      	ldr	r3, [pc, #484]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <HAL_RCC_OscConfig+0xea>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001612:	4b76      	ldr	r3, [pc, #472]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b08      	cmp	r3, #8
 800161c:	d12b      	bne.n	8001676 <HAL_RCC_OscConfig+0x136>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 800161e:	4b73      	ldr	r3, [pc, #460]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d125      	bne.n	8001676 <HAL_RCC_OscConfig+0x136>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	4b70      	ldr	r3, [pc, #448]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x102>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x102>
				return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e19f      	b.n	8001982 <HAL_RCC_OscConfig+0x442>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8001642:	486a      	ldr	r0, [pc, #424]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001644:	4b69      	ldr	r3, [pc, #420]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	21f8      	movs	r1, #248	; 0xf8
 8001652:	64f9      	str	r1, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001654:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001656:	fa91 f1a1 	rbit	r1, r1
 800165a:	62f9      	str	r1, [r7, #44]	; 0x2c
   return(result);
 800165c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800165e:	6379      	str	r1, [r7, #52]	; 0x34
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001660:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001662:	fab1 f181 	clz	r1, r1
 8001666:	f887 1033 	strb.w	r1, [r7, #51]	; 0x33
  return(result);
 800166a:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 800166e:	408b      	lsls	r3, r1
 8001670:	4313      	orrs	r3, r2
 8001672:	6003      	str	r3, [r0, #0]
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001674:	e049      	b.n	800170a <HAL_RCC_OscConfig+0x1ca>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d02f      	beq.n	80016de <HAL_RCC_OscConfig+0x19e>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <HAL_RCC_OscConfig+0x2b4>)
 8001680:	2201      	movs	r2, #1
 8001682:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001684:	f000 fe4a 	bl	800231c <HAL_GetTick>
 8001688:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x15e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800168c:	f000 fe46 	bl	800231c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x15e>
						return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e171      	b.n	8001982 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800169e:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x14c>
						return HAL_TIMEOUT;
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80016aa:	4850      	ldr	r0, [pc, #320]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 80016ac:	4b4f      	ldr	r3, [pc, #316]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	21f8      	movs	r1, #248	; 0xf8
 80016ba:	6579      	str	r1, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016be:	fa91 f1a1 	rbit	r1, r1
 80016c2:	6279      	str	r1, [r7, #36]	; 0x24
   return(result);
 80016c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016c6:	6539      	str	r1, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80016c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80016ca:	fab1 f181 	clz	r1, r1
 80016ce:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
  return(result);
 80016d2:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 80016d6:	408b      	lsls	r3, r1
 80016d8:	4313      	orrs	r3, r2
 80016da:	6003      	str	r3, [r0, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x1ca>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 80016de:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <HAL_RCC_OscConfig+0x2b4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80016e4:	f000 fe1a 	bl	800231c <HAL_GetTick>
 80016e8:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x1be>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80016ec:	f000 fe16 	bl	800231c <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x1be>
						return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e141      	b.n	8001982 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x1ac>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d030      	beq.n	8001778 <HAL_RCC_OscConfig+0x238>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d016      	beq.n	800174c <HAL_RCC_OscConfig+0x20c>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <HAL_RCC_OscConfig+0x2b8>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001724:	f000 fdfa 	bl	800231c <HAL_GetTick>
 8001728:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x1fe>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800172c:	f000 fdf6 	bl	800231c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x1fe>
					return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e121      	b.n	8001982 <HAL_RCC_OscConfig+0x442>

			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x1ec>
 800174a:	e015      	b.n	8001778 <HAL_RCC_OscConfig+0x238>
					return HAL_TIMEOUT;
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 800174c:	4b2a      	ldr	r3, [pc, #168]	; (80017f8 <HAL_RCC_OscConfig+0x2b8>)
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001752:	f000 fde3 	bl	800231c <HAL_GetTick>
 8001756:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x22c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800175a:	f000 fddf 	bl	800231c <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x22c>
					return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e10a      	b.n	8001982 <HAL_RCC_OscConfig+0x442>

			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 800176e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f0      	bne.n	800175a <HAL_RCC_OscConfig+0x21a>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d066      	beq.n	8001852 <HAL_RCC_OscConfig+0x312>
			== RCC_OSCILLATORTYPE_LSE) {
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	4a18      	ldr	r2, [pc, #96]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_RCC_OscConfig+0x2ac>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 80017a0:	4a16      	ldr	r2, [pc, #88]	; (80017fc <HAL_RCC_OscConfig+0x2bc>)
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <HAL_RCC_OscConfig+0x2bc>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6013      	str	r3, [r2, #0]

		/* Wait for Backup domain Write protection enable */
		tickstart = HAL_GetTick();
 80017ac:	f000 fdb6 	bl	800231c <HAL_GetTick>
 80017b0:	65f8      	str	r0, [r7, #92]	; 0x5c

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x286>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 80017b4:	f000 fdb2 	bl	800231c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x286>
				return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0dd      	b.n	8001982 <HAL_RCC_OscConfig+0x442>
		PWR->CR |= PWR_CR_DBP;

		/* Wait for Backup domain Write protection enable */
		tickstart = HAL_GetTick();

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <HAL_RCC_OscConfig+0x2bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x274>
				return HAL_TIMEOUT;
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <HAL_RCC_OscConfig+0x2c0>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	7013      	strb	r3, [r2, #0]
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d021      	beq.n	8001828 <HAL_RCC_OscConfig+0x2e8>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80017e4:	f000 fd9a 	bl	800231c <HAL_GetTick>
 80017e8:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80017ea:	e016      	b.n	800181a <HAL_RCC_OscConfig+0x2da>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40023802 	.word	0x40023802
 80017f4:	42470000 	.word	0x42470000
 80017f8:	42470e80 	.word	0x42470e80
 80017fc:	40007000 	.word	0x40007000
 8001800:	40023870 	.word	0x40023870
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001804:	f000 fd8a 	bl	800231c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x2da>
					return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0b3      	b.n	8001982 <HAL_RCC_OscConfig+0x442>
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800181a:	4b5c      	ldr	r3, [pc, #368]	; (800198c <HAL_RCC_OscConfig+0x44c>)
 800181c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0ee      	beq.n	8001804 <HAL_RCC_OscConfig+0x2c4>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x312>
					return HAL_TIMEOUT;
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8001828:	f000 fd78 	bl	800231c <HAL_GetTick>
 800182c:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 800182e:	e00a      	b.n	8001846 <HAL_RCC_OscConfig+0x306>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001830:	f000 fd74 	bl	800231c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x306>
					return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e09d      	b.n	8001982 <HAL_RCC_OscConfig+0x442>
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <HAL_RCC_OscConfig+0x44c>)
 8001848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ee      	bne.n	8001830 <HAL_RCC_OscConfig+0x2f0>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 8092 	beq.w	8001980 <HAL_RCC_OscConfig+0x440>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 800185c:	4b4b      	ldr	r3, [pc, #300]	; (800198c <HAL_RCC_OscConfig+0x44c>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 030c 	and.w	r3, r3, #12
 8001864:	2b08      	cmp	r3, #8
 8001866:	f000 8089 	beq.w	800197c <HAL_RCC_OscConfig+0x43c>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d16d      	bne.n	800194e <HAL_RCC_OscConfig+0x40e>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001872:	4b47      	ldr	r3, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x450>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001878:	f000 fd50 	bl	800231c <HAL_GetTick>
 800187c:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x352>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001880:	f000 fd4c 	bl	800231c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x352>
						return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e077      	b.n	8001982 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <HAL_RCC_OscConfig+0x44c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 800189e:	483b      	ldr	r0, [pc, #236]	; (800198c <HAL_RCC_OscConfig+0x44c>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69da      	ldr	r2, [r3, #28]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	431a      	orrs	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80018b2:	64b9      	str	r1, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018b6:	fa91 f1a1 	rbit	r1, r1
 80018ba:	60f9      	str	r1, [r7, #12]
   return(result);
 80018bc:	68f9      	ldr	r1, [r7, #12]
 80018be:	6479      	str	r1, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80018c2:	fab1 f181 	clz	r1, r1
 80018c6:	74f9      	strb	r1, [r7, #19]
  return(result);
 80018c8:	7cf9      	ldrb	r1, [r7, #19]
 80018ca:	408b      	lsls	r3, r1
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	3b01      	subs	r3, #1
 80018d6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80018da:	6439      	str	r1, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80018de:	fa91 f1a1 	rbit	r1, r1
 80018e2:	6179      	str	r1, [r7, #20]
   return(result);
 80018e4:	6979      	ldr	r1, [r7, #20]
 80018e6:	63f9      	str	r1, [r7, #60]	; 0x3c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018ea:	fab1 f181 	clz	r1, r1
 80018ee:	76f9      	strb	r1, [r7, #27]
  return(result);
 80018f0:	7ef9      	ldrb	r1, [r7, #27]
 80018f2:	408b      	lsls	r3, r1
 80018f4:	431a      	orrs	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fa:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80018fe:	63b9      	str	r1, [r7, #56]	; 0x38
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001902:	fa91 f1a1 	rbit	r1, r1
 8001906:	61f9      	str	r1, [r7, #28]
   return(result);
 8001908:	69f9      	ldr	r1, [r7, #28]
 800190a:	65b9      	str	r1, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800190c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800190e:	fab1 f181 	clz	r1, r1
 8001912:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
  return(result);
 8001916:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 800191a:	408b      	lsls	r3, r1
 800191c:	4313      	orrs	r3, r2
 800191e:	6043      	str	r3, [r0, #4]
								| (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)
										<< POSITION_VAL(RCC_PLLCFGR_PLLP))
								| (RCC_OscInitStruct->PLL.PLLQ
										<< POSITION_VAL(RCC_PLLCFGR_PLLQ))));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <HAL_RCC_OscConfig+0x450>)
 8001922:	2201      	movs	r2, #1
 8001924:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001926:	f000 fcf9 	bl	800231c <HAL_GetTick>
 800192a:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x400>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800192e:	f000 fcf5 	bl	800231c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x400>
						return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e020      	b.n	8001982 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_RCC_OscConfig+0x44c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x3ee>
 800194c:	e018      	b.n	8001980 <HAL_RCC_OscConfig+0x440>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800194e:	4b10      	ldr	r3, [pc, #64]	; (8001990 <HAL_RCC_OscConfig+0x450>)
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001954:	f000 fce2 	bl	800231c <HAL_GetTick>
 8001958:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x42e>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800195c:	f000 fcde 	bl	800231c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x42e>
						return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e009      	b.n	8001982 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_RCC_OscConfig+0x44c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f0      	bne.n	800195c <HAL_RCC_OscConfig+0x41c>
 800197a:	e001      	b.n	8001980 <HAL_RCC_OscConfig+0x440>
						return HAL_TIMEOUT;
					}
				}
			}
		} else {
			return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e000      	b.n	8001982 <HAL_RCC_OscConfig+0x442>
		}
	}
	return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3760      	adds	r7, #96	; 0x60
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	42470060 	.word	0x42470060

08001994 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = 0U;
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
	 must be correctly programmed according to the frequency of the CPU clock 
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > (FLASH->ACR & FLASH_ACR_LATENCY)) {
 80019a2:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <HAL_RCC_ClockConfig+0x1dc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 020f 	and.w	r2, r3, #15
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d20c      	bcs.n	80019ca <HAL_RCC_ClockConfig+0x36>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80019b0:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_ClockConfig+0x1dc>)
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 80019b8:	4b6d      	ldr	r3, [pc, #436]	; (8001b70 <HAL_RCC_ClockConfig+0x1dc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 020f 	and.w	r2, r3, #15
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_ClockConfig+0x36>
			return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0ce      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d4>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d008      	beq.n	80019e8 <HAL_RCC_ClockConfig+0x54>
			== RCC_CLOCKTYPE_HCLK) {
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d6:	4967      	ldr	r1, [pc, #412]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 80019d8:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8082 	beq.w	8001afa <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x7a>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80019fe:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d119      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xaa>
				return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e0ac      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d4>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x8a>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x9a>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8001a1e:	4b55      	ldr	r3, [pc, #340]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xaa>
				return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e09c      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d4>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8001a2e:	4b51      	ldr	r3, [pc, #324]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xaa>
				return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e094      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d4>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	494d      	ldr	r1, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001a40:	4b4c      	ldr	r3, [pc, #304]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f023 0203 	bic.w	r2, r3, #3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8001a50:	f000 fc64 	bl	800231c <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d112      	bne.n	8001a84 <HAL_RCC_ClockConfig+0xf0>
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE) {
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_ClockConfig+0xe2>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001a60:	f000 fc5c 	bl	800231c <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_ClockConfig+0xe2>
					return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e078      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d4>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
		/* Get Start Tick*/
		tickstart = HAL_GetTick();

		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE) {
 8001a76:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d1ee      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xcc>
 8001a82:	e03a      	b.n	8001afa <HAL_RCC_ClockConfig+0x166>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d112      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0x11e>
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001a8c:	e00a      	b.n	8001aa4 <HAL_RCC_ClockConfig+0x110>
					!= RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001a8e:	f000 fc45 	bl	800231c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_ClockConfig+0x110>
					return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e061      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d4>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d1ee      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xfa>
 8001ab0:	e023      	b.n	8001afa <HAL_RCC_ClockConfig+0x166>
					!= RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d119      	bne.n	8001aee <HAL_RCC_ClockConfig+0x15a>
				== RCC_SYSCLKSOURCE_PLLRCLK) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001aba:	e00a      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x13e>
					!= RCC_SYSCLKSOURCE_STATUS_PLLRCLK) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001abc:	f000 fc2e 	bl	800231c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_ClockConfig+0x13e>
					return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e04a      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d4>
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource
				== RCC_SYSCLKSOURCE_PLLRCLK) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	e7f1      	b.n	8001abc <HAL_RCC_ClockConfig+0x128>
					return HAL_TIMEOUT;
				}
			}
		} else {
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8001ad8:	f000 fc20 	bl	800231c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x15a>
					return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e03c      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d4>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else {
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ee      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x144>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < (FLASH->ACR & FLASH_ACR_LATENCY)) {
 8001afa:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <HAL_RCC_ClockConfig+0x1dc>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 020f 	and.w	r2, r3, #15
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d90c      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_ClockConfig+0x1dc>)
 8001b0a:	683a      	ldr	r2, [r7, #0]
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_RCC_ClockConfig+0x1dc>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 020f 	and.w	r2, r3, #15
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
			return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e022      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d4>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x1ac>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8001b2e:	4911      	ldr	r1, [pc, #68]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001b30:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x1cc>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8001b4c:	4909      	ldr	r1, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001b4e:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <HAL_RCC_ClockConfig+0x1e0>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(TICK_INT_PRIORITY);
 8001b60:	200f      	movs	r0, #15
 8001b62:	f7fe fd1b 	bl	800059c <HAL_InitTick>

	return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023c00 	.word	0x40023c00
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *         
 *               
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b091      	sub	sp, #68	; 0x44
 8001b7c:	af00      	add	r7, sp, #0
uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	637b      	str	r3, [r7, #52]	; 0x34
 8001b82:	2300      	movs	r3, #0
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b86:	2300      	movs	r3, #0
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
uint32_t sysclockfreq = 0U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38

/* Get SYSCLK source -------------------------------------------------------*/
switch (RCC->CFGR & RCC_CFGR_SWS) {
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 030c 	and.w	r3, r3, #12
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d006      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x30>
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d007      	beq.n	8001bae <HAL_RCC_GetSysClockFreq+0x36>
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d163      	bne.n	8001c6a <HAL_RCC_GetSysClockFreq+0xf2>
case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
{
sysclockfreq = HSI_VALUE;
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ba4:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8001ba6:	e063      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0xf8>
}
case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
{
sysclockfreq = HSE_VALUE;
 8001ba8:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001baa:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8001bac:	e060      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0xf8>
}
case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
{
/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 SYSCLK = PLL_VCO / PLLP */
pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8001bb8:	4b31      	ldr	r3, [pc, #196]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x84>
	/* HSE used as PLL clock source */
	pllvco = ((HSE_VALUE / pllm)
 8001bc4:	4a30      	ldr	r2, [pc, #192]	; (8001c88 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc8:	fbb2 f2f3 	udiv	r2, r2, r3
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001bcc:	4b2c      	ldr	r3, [pc, #176]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001bda:	62b9      	str	r1, [r7, #40]	; 0x28
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bde:	fa91 f1a1 	rbit	r1, r1
 8001be2:	6139      	str	r1, [r7, #16]
   return(result);
 8001be4:	6939      	ldr	r1, [r7, #16]
 8001be6:	61b9      	str	r1, [r7, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	69b9      	ldr	r1, [r7, #24]
 8001bea:	fab1 f181 	clz	r1, r1
 8001bee:	75f9      	strb	r1, [r7, #23]
  return(result);
 8001bf0:	7df9      	ldrb	r1, [r7, #23]
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001bf2:	40cb      	lsrs	r3, r1
/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 SYSCLK = PLL_VCO / PLLP */
pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
	/* HSE used as PLL clock source */
	pllvco = ((HSE_VALUE / pllm)
 8001bf4:	fb03 f302 	mul.w	r3, r3, r2
 8001bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bfa:	e01a      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0xba>
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
} else {
	/* HSI used as PLL clock source */
	pllvco = ((HSI_VALUE / pllm)
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c00:	fbb2 f2f3 	udiv	r2, r2, r3
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c06:	6859      	ldr	r1, [r3, #4]
 8001c08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001c0c:	400b      	ands	r3, r1
 8001c0e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001c12:	6239      	str	r1, [r7, #32]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	6a39      	ldr	r1, [r7, #32]
 8001c16:	fa91 f1a1 	rbit	r1, r1
 8001c1a:	60b9      	str	r1, [r7, #8]
   return(result);
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c22:	fab1 f181 	clz	r1, r1
 8001c26:	73f9      	strb	r1, [r7, #15]
  return(result);
 8001c28:	7bf9      	ldrb	r1, [r7, #15]
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001c2a:	40cb      	lsrs	r3, r1
	pllvco = ((HSE_VALUE / pllm)
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
} else {
	/* HSI used as PLL clock source */
	pllvco = ((HSI_VALUE / pllm)
 8001c2c:	fb03 f302 	mul.w	r3, r3, r2
 8001c30:	63fb      	str	r3, [r7, #60]	; 0x3c
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
}
pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP))
 8001c32:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c3e:	61fa      	str	r2, [r7, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	69fa      	ldr	r2, [r7, #28]
 8001c42:	fa92 f2a2 	rbit	r2, r2
 8001c46:	603a      	str	r2, [r7, #0]
   return(result);
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	627a      	str	r2, [r7, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4e:	fab2 f282 	clz	r2, r2
 8001c52:	71fa      	strb	r2, [r7, #7]
  return(result);
 8001c54:	79fa      	ldrb	r2, [r7, #7]
 8001c56:	40d3      	lsrs	r3, r2
		+ 1U) * 2U);
 8001c58:	3301      	adds	r3, #1
	/* HSI used as PLL clock source */
	pllvco = ((HSI_VALUE / pllm)
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
}
pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP))
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
		+ 1U) * 2U);

sysclockfreq = pllvco / pllp;
 8001c5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8001c68:	e002      	b.n	8001c70 <HAL_RCC_GetSysClockFreq+0xf8>
}
default: {
sysclockfreq = HSI_VALUE;
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8001c6e:	bf00      	nop
}
}
return sysclockfreq;
 8001c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3744      	adds	r7, #68	; 0x44
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <HAL_RCC_GetHCLKFreq>:
 * 
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001c92:	f7ff ff71 	bl	8001b78 <HAL_RCC_GetSysClockFreq>
 8001c96:	4601      	mov	r1, r0
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_RCC_GetHCLKFreq+0x48>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca0:	22f0      	movs	r2, #240	; 0xf0
 8001ca2:	60fa      	str	r2, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	fa92 f2a2 	rbit	r2, r2
 8001caa:	603a      	str	r2, [r7, #0]
   return(result);
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	60ba      	str	r2, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	71fa      	strb	r2, [r7, #7]
  return(result);
 8001cb8:	79fa      	ldrb	r2, [r7, #7]
			>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001cba:	40d3      	lsrs	r3, r2
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
SystemCoreClock = HAL_RCC_GetSysClockFreq()
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_RCC_GetHCLKFreq+0x4c>)
 8001cbe:	5cd3      	ldrb	r3, [r2, r3]
 8001cc0:	fa21 f303 	lsr.w	r3, r1, r3
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8001cc6:	6013      	str	r3, [r2, #0]
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
			>> POSITION_VAL(RCC_CFGR_HPRE)];
return SystemCoreClock;
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <HAL_RCC_GetHCLKFreq+0x50>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08002f24 	.word	0x08002f24
 8001cdc:	20000000 	.word	0x20000000

08001ce0 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency     
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
return (HAL_RCC_GetHCLKFreq()
 8001ce6:	f7ff ffd1 	bl	8001c8c <HAL_RCC_GetHCLKFreq>
 8001cea:	4601      	mov	r1, r0
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <HAL_RCC_GetPCLK1Freq+0x44>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001cf4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001cf8:	60fa      	str	r2, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	603a      	str	r2, [r7, #0]
   return(result);
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	60ba      	str	r2, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	71fa      	strb	r2, [r7, #7]
  return(result);
 8001d0e:	79fa      	ldrb	r2, [r7, #7]
			>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001d10:	40d3      	lsrs	r3, r2
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
return (HAL_RCC_GetHCLKFreq()
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x48>)
 8001d14:	5cd3      	ldrb	r3, [r2, r3]
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
return (HAL_RCC_GetHCLKFreq()
 8001d16:	fa21 f303 	lsr.w	r3, r1, r3
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)
			>> POSITION_VAL(RCC_CFGR_PPRE1)]);
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800
 8001d28:	08002f24 	.word	0x08002f24

08001d2c <HAL_RCC_GetClockConfig>:
 * will be configured.
 * @param  pFLatency: Pointer on the Flash Latency.
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
uint32_t *pFLatency) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
/* Set all possible values for the Clock type parameter --------------------*/
RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	220f      	movs	r2, #15
 8001d3a:	601a      	str	r2, [r3, #0]
	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

/* Get the SYSCLK configuration --------------------------------------------*/
RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0203 	and.w	r2, r3, #3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	605a      	str	r2, [r3, #4]

/* Get the HCLK configuration ----------------------------------------------*/
RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]

/* Get the APB1 configuration ----------------------------------------------*/
RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 8001d54:	4b0c      	ldr	r3, [pc, #48]	; (8001d88 <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	60da      	str	r2, [r3, #12]

/* Get the APB2 configuration ----------------------------------------------*/
RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_GetClockConfig+0x5c>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d68:	08da      	lsrs	r2, r3, #3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	611a      	str	r2, [r3, #16]
	>> 3U);

/* Get the Flash Wait State (Latency) configuration ------------------------*/
*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <HAL_RCC_GetClockConfig+0x60>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 020f 	and.w	r2, r3, #15
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	601a      	str	r2, [r3, #0]
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40023c00 	.word	0x40023c00

08001d90 <HAL_GPIO_Init>:
 *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	; 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
	uint32_t position;
	uint32_t ioposition = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
 8001daa:	e171      	b.n	8002090 <HAL_GPIO_Init+0x300>
		/* Get the IO position */
		ioposition = ((uint32_t) 0x01U) << position;
 8001dac:	2201      	movs	r2, #1
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	f040 8160 	bne.w	800208a <HAL_GPIO_Init+0x2fa>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode == GPIO_MODE_AF_PP)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x4a>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b12      	cmp	r3, #18
 8001dd8:	d123      	bne.n	8001e22 <HAL_GPIO_Init+0x92>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) 0xFU
						<< ((uint32_t) (position & (uint32_t) 0x07U) * 4U));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
				temp &= ~((uint32_t) 0xFU
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
						<< ((uint32_t) (position & (uint32_t) 0x07U) * 4U));
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & (uint32_t) 0x07U) * 4U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3U];
				temp &= ~((uint32_t) 0xFU
						<< ((uint32_t) (position & (uint32_t) 0x07U) * 4U));
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
						<< (((uint32_t) position & (uint32_t) 0x07U) * 4U));
				GPIOx->AFR[position >> 3U] = temp;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	69b9      	ldr	r1, [r7, #24]
 8001e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0203 	and.w	r2, r3, #3
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	601a      	str	r2, [r3, #0]

			/* In case of Output or Alternate function mode selection */
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d00b      	beq.n	8001e76 <HAL_GPIO_Init+0xe6>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_PP)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d007      	beq.n	8001e76 <HAL_GPIO_Init+0xe6>
					|| (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b11      	cmp	r3, #17
 8001e6c:	d003      	beq.n	8001e76 <HAL_GPIO_Init+0xe6>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d130      	bne.n	8001ed8 <HAL_GPIO_Init+0x148>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8001eac:	2201      	movs	r2, #1
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
				GPIOx->OSPEEDR = temp;

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
				temp &= ~(GPIO_OTYPER_OT_0 << position);
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U)
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
						<< position);
				GPIOx->OTYPER = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	605a      	str	r2, [r3, #4]
			}

			/* Activate the Pull-up or Pull down resistor for the current IO */
			temp = GPIOx->PUPDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
			GPIOx->PUPDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	60da      	str	r2, [r3, #12]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80ba 	beq.w	800208a <HAL_GPIO_Init+0x2fa>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4a62      	ldr	r2, [pc, #392]	; (80020a4 <HAL_GPIO_Init+0x314>)
 8001f1c:	4b61      	ldr	r3, [pc, #388]	; (80020a4 <HAL_GPIO_Init+0x314>)
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b5f      	ldr	r3, [pc, #380]	; (80020a4 <HAL_GPIO_Init+0x314>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2U];
 8001f32:	4a5d      	ldr	r2, [pc, #372]	; (80020a8 <HAL_GPIO_Init+0x318>)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	3302      	adds	r3, #2
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	61bb      	str	r3, [r7, #24]
				temp &= ~(((uint32_t) 0x0FU) << (4U * (position & 0x03U)));
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	220f      	movs	r2, #15
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a54      	ldr	r2, [pc, #336]	; (80020ac <HAL_GPIO_Init+0x31c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d031      	beq.n	8001fc2 <HAL_GPIO_Init+0x232>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a53      	ldr	r2, [pc, #332]	; (80020b0 <HAL_GPIO_Init+0x320>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d02b      	beq.n	8001fbe <HAL_GPIO_Init+0x22e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_GPIO_Init+0x324>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d025      	beq.n	8001fba <HAL_GPIO_Init+0x22a>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a51      	ldr	r2, [pc, #324]	; (80020b8 <HAL_GPIO_Init+0x328>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d01f      	beq.n	8001fb6 <HAL_GPIO_Init+0x226>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a50      	ldr	r2, [pc, #320]	; (80020bc <HAL_GPIO_Init+0x32c>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d019      	beq.n	8001fb2 <HAL_GPIO_Init+0x222>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4f      	ldr	r2, [pc, #316]	; (80020c0 <HAL_GPIO_Init+0x330>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d013      	beq.n	8001fae <HAL_GPIO_Init+0x21e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4e      	ldr	r2, [pc, #312]	; (80020c4 <HAL_GPIO_Init+0x334>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00d      	beq.n	8001faa <HAL_GPIO_Init+0x21a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4d      	ldr	r2, [pc, #308]	; (80020c8 <HAL_GPIO_Init+0x338>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <HAL_GPIO_Init+0x216>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4c      	ldr	r2, [pc, #304]	; (80020cc <HAL_GPIO_Init+0x33c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d101      	bne.n	8001fa2 <HAL_GPIO_Init+0x212>
 8001f9e:	2308      	movs	r3, #8
 8001fa0:	e010      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
 8001fa2:	2309      	movs	r3, #9
 8001fa4:	e00e      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	e00c      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
 8001faa:	2306      	movs	r3, #6
 8001fac:	e00a      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
 8001fae:	2305      	movs	r3, #5
 8001fb0:	e008      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e004      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e002      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x234>
 8001fc2:	2300      	movs	r3, #0
						<< (4U * (position & 0x03U)));
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	f002 0203 	and.w	r2, r2, #3
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	4093      	lsls	r3, r2
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();

				temp = SYSCFG->EXTICR[position >> 2U];
				temp &= ~(((uint32_t) 0x0FU) << (4U * (position & 0x03U)));
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
						<< (4U * (position & 0x03U)));
				SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd4:	4934      	ldr	r1, [pc, #208]	; (80020a8 <HAL_GPIO_Init+0x318>)
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <HAL_GPIO_Init+0x340>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x276>
					temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 8002006:	4a32      	ldr	r2, [pc, #200]	; (80020d0 <HAL_GPIO_Init+0x340>)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6013      	str	r3, [r2, #0]

				temp = EXTI->EMR;
 800200c:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <HAL_GPIO_Init+0x340>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x2a0>
					temp |= iocurrent;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 8002030:	4a27      	ldr	r2, [pc, #156]	; (80020d0 <HAL_GPIO_Init+0x340>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	6053      	str	r3, [r2, #4]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8002036:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_GPIO_Init+0x340>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x2ca>
					temp |= iocurrent;
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 800205a:	4a1d      	ldr	r2, [pc, #116]	; (80020d0 <HAL_GPIO_Init+0x340>)
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <HAL_GPIO_Init+0x340>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x2f4>
					temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 8002084:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <HAL_GPIO_Init+0x340>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	60d3      	str	r3, [r2, #12]
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

	/* Configure the port pins */
	for (position = 0U; position < GPIO_NUMBER; position++) {
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	3301      	adds	r3, #1
 800208e:	61fb      	str	r3, [r7, #28]
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	2b0f      	cmp	r3, #15
 8002094:	f67f ae8a 	bls.w	8001dac <HAL_GPIO_Init+0x1c>
				}
				EXTI->FTSR = temp;
			}
		}
	}
}
 8002098:	bf00      	nop
 800209a:	3724      	adds	r7, #36	; 0x24
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40013800 	.word	0x40013800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40021400 	.word	0x40021400
 80020c4:	40021800 	.word	0x40021800
 80020c8:	40021c00 	.word	0x40021c00
 80020cc:	40022000 	.word	0x40022000
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
	}
}
 80020f0:	e003      	b.n	80020fa <HAL_GPIO_WritePin+0x26>
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
		GPIOx->BSRR = GPIO_Pin;
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16U;
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	041a      	lsls	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
	}
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <NVIC_SetPriorityGrouping+0x44>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8002130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800213a:	4a04      	ldr	r2, [pc, #16]	; (800214c <NVIC_SetPriorityGrouping+0x44>)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	60d3      	str	r3, [r2, #12]
}
 8002140:	bf00      	nop
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800215c:	0a1b      	lsrs	r3, r3, #8
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002176:	4909      	ldr	r1, [pc, #36]	; (800219c <NVIC_EnableIRQ+0x30>)
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	095b      	lsrs	r3, r3, #5
 800217e:	79fa      	ldrb	r2, [r7, #7]
 8002180:	f002 021f 	and.w	r2, r2, #31
 8002184:	2001      	movs	r0, #1
 8002186:	fa00 f202 	lsl.w	r2, r0, r2
 800218a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000e100 	.word	0xe000e100

080021a0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	6039      	str	r1, [r7, #0]
 80021aa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80021ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	da0b      	bge.n	80021cc <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80021b4:	490d      	ldr	r1, [pc, #52]	; (80021ec <NVIC_SetPriority+0x4c>)
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	f003 030f 	and.w	r3, r3, #15
 80021bc:	3b04      	subs	r3, #4
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	0112      	lsls	r2, r2, #4
 80021c4:	b2d2      	uxtb	r2, r2
 80021c6:	440b      	add	r3, r1
 80021c8:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80021ca:	e009      	b.n	80021e0 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80021cc:	4908      	ldr	r1, [pc, #32]	; (80021f0 <NVIC_SetPriority+0x50>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	b2d2      	uxtb	r2, r2
 80021da:	440b      	add	r3, r1
 80021dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	e000ed00 	.word	0xe000ed00
 80021f0:	e000e100 	.word	0xe000e100

080021f4 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b089      	sub	sp, #36	; 0x24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f1c3 0307 	rsb	r3, r3, #7
 800220e:	2b04      	cmp	r3, #4
 8002210:	bf28      	it	cs
 8002212:	2304      	movcs	r3, #4
 8002214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3304      	adds	r3, #4
 800221a:	2b06      	cmp	r3, #6
 800221c:	d902      	bls.n	8002224 <NVIC_EncodePriority+0x30>
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3b03      	subs	r3, #3
 8002222:	e000      	b.n	8002226 <NVIC_EncodePriority+0x32>
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002228:	2201      	movs	r2, #1
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	3b01      	subs	r3, #1
 8002232:	461a      	mov	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	401a      	ands	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800223c:	2101      	movs	r1, #1
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	4619      	mov	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 800224c:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 800224e:	4618      	mov	r0, r3
 8002250:	3724      	adds	r7, #36	; 0x24
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop

0800225c <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff4f 	bl	8002108 <NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop

08002274 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
 8002280:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8002286:	f7ff ff63 	bl	8002150 <NVIC_GetPriorityGrouping>
 800228a:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	6978      	ldr	r0, [r7, #20]
 8002292:	f7ff ffaf 	bl	80021f4 <NVIC_EncodePriority>
 8002296:	4602      	mov	r2, r0
 8002298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff7e 	bl	80021a0 <NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80022a4:	bf00      	nop
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff ff56 	bl	800216c <NVIC_EnableIRQ>
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022cc:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <HAL_Init+0x34>)
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <HAL_Init+0x34>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 80022d8:	4a08      	ldr	r2, [pc, #32]	; (80022fc <HAL_Init+0x34>)
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_Init+0x34>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f7ff ffb9 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 80022ea:	200f      	movs	r0, #15
 80022ec:	f7fe f956 	bl	800059c <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 80022f0:	f7fd ffd6 	bl	80002a0 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00

08002300 <HAL_IncTick>:
 *       in Systick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
	uwTick++;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_IncTick+0x18>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3301      	adds	r3, #1
 800230a:	4a03      	ldr	r2, [pc, #12]	; (8002318 <HAL_IncTick+0x18>)
 800230c:	6013      	str	r3, [r2, #0]
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	2000019c 	.word	0x2000019c

0800231c <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
	return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	2000019c 	.word	0x2000019c

08002334 <HAL_GetREVID>:

/**
 * @brief  Returns the device revision identifier.
 * @retval Device revision identifier
 */
uint32_t HAL_GetREVID(void) {
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	return ((DBGMCU->IDCODE) >> 16U);
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_GetREVID+0x14>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0c1b      	lsrs	r3, r3, #16
}
 800233e:	4618      	mov	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e0042000 	.word	0xe0042000

0800234c <BSP_ACCELERO_Init>:

/**
 * @brief  Setx Accelerometer Initialization.
 * @retval ACCELERO_OK if no problem during initialization
 */
uint8_t BSP_ACCELERO_Init(void) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
	uint8_t ret = ACCELERO_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
	uint16_t ctrl = 0x0000;
 8002356:	2300      	movs	r3, #0
 8002358:	82bb      	strh	r3, [r7, #20]
	LIS302DL_InitTypeDef lis302dl_initstruct;
	LIS302DL_FilterConfigTypeDef lis302dl_filter = { 0, 0, 0 };
 800235a:	2300      	movs	r3, #0
 800235c:	723b      	strb	r3, [r7, #8]
 800235e:	2300      	movs	r3, #0
 8002360:	727b      	strb	r3, [r7, #9]
 8002362:	2300      	movs	r3, #0
 8002364:	72bb      	strb	r3, [r7, #10]
	LIS3DSH_InitTypeDef l1s3dsh_InitStruct;

	if (Lis302dlDrv.ReadID() == I_AM_LIS302DL) {
 8002366:	4b3c      	ldr	r3, [pc, #240]	; (8002458 <BSP_ACCELERO_Init+0x10c>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4798      	blx	r3
 800236c:	4603      	mov	r3, r0
 800236e:	2b3b      	cmp	r3, #59	; 0x3b
 8002370:	d138      	bne.n	80023e4 <BSP_ACCELERO_Init+0x98>
		/* Initialize the accelerometer driver structure */
		AcceleroDrv = &Lis302dlDrv;
 8002372:	4b3a      	ldr	r3, [pc, #232]	; (800245c <BSP_ACCELERO_Init+0x110>)
 8002374:	4a38      	ldr	r2, [pc, #224]	; (8002458 <BSP_ACCELERO_Init+0x10c>)
 8002376:	601a      	str	r2, [r3, #0]

		/* Set configuration of LIS302DL MEMS Accelerometer *********************/
		lis302dl_initstruct.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8002378:	2340      	movs	r3, #64	; 0x40
 800237a:	733b      	strb	r3, [r7, #12]
		lis302dl_initstruct.Output_DataRate = LIS302DL_DATARATE_100;
 800237c:	2300      	movs	r3, #0
 800237e:	737b      	strb	r3, [r7, #13]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
 8002380:	2307      	movs	r3, #7
 8002382:	73bb      	strb	r3, [r7, #14]
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;
 8002388:	2300      	movs	r3, #0
 800238a:	743b      	strb	r3, [r7, #16]

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 800238c:	7b7a      	ldrb	r2, [r7, #13]
				| lis302dl_initstruct.Power_Mode
 800238e:	7b3b      	ldrb	r3, [r7, #12]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 8002390:	4313      	orrs	r3, r2
 8002392:	b2da      	uxtb	r2, r3
				| lis302dl_initstruct.Power_Mode
				| lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test
 8002394:	7bfb      	ldrb	r3, [r7, #15]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 8002396:	4313      	orrs	r3, r2
 8002398:	b2da      	uxtb	r2, r3
				| lis302dl_initstruct.Power_Mode
				| lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test
 800239a:	7c3b      	ldrb	r3, [r7, #16]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 800239c:	4313      	orrs	r3, r2
 800239e:	b2da      	uxtb	r2, r3
				| lis302dl_initstruct.Power_Mode
				| lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test
				| lis302dl_initstruct.Axes_Enable);
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
		lis302dl_initstruct.Axes_Enable = LIS302DL_XYZ_ENABLE;
		lis302dl_initstruct.Full_Scale = LIS302DL_FULLSCALE_2_3;
		lis302dl_initstruct.Self_Test = LIS302DL_SELFTEST_NORMAL;

		/* Configure MEMS: data rate, power mode, full scale, self test and axes */
		ctrl = (uint16_t) (lis302dl_initstruct.Output_DataRate
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	82bb      	strh	r3, [r7, #20]
				| lis302dl_initstruct.Power_Mode
				| lis302dl_initstruct.Full_Scale | lis302dl_initstruct.Self_Test
				| lis302dl_initstruct.Axes_Enable);

		/* Configure the accelerometer main parameters */
		AcceleroDrv->Init(ctrl);
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <BSP_ACCELERO_Init+0x110>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	8aba      	ldrh	r2, [r7, #20]
 80023b0:	4610      	mov	r0, r2
 80023b2:	4798      	blx	r3

		/* MEMS High Pass Filter configuration */
		lis302dl_filter.HighPassFilter_Data_Selection =
 80023b4:	2320      	movs	r3, #32
 80023b6:	723b      	strb	r3, [r7, #8]
				LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
		lis302dl_filter.HighPassFilter_CutOff_Frequency =
 80023b8:	2301      	movs	r3, #1
 80023ba:	727b      	strb	r3, [r7, #9]
				LIS302DL_HIGHPASSFILTER_LEVEL_1;
		lis302dl_filter.HighPassFilter_Interrupt =
 80023bc:	230c      	movs	r3, #12
 80023be:	72bb      	strb	r3, [r7, #10]
				LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;

		/* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */
		ctrl = (uint8_t) (lis302dl_filter.HighPassFilter_Data_Selection
 80023c0:	7a3a      	ldrb	r2, [r7, #8]
				| lis302dl_filter.HighPassFilter_CutOff_Frequency
 80023c2:	7a7b      	ldrb	r3, [r7, #9]
				LIS302DL_HIGHPASSFILTER_LEVEL_1;
		lis302dl_filter.HighPassFilter_Interrupt =
				LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;

		/* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */
		ctrl = (uint8_t) (lis302dl_filter.HighPassFilter_Data_Selection
 80023c4:	4313      	orrs	r3, r2
 80023c6:	b2da      	uxtb	r2, r3
				| lis302dl_filter.HighPassFilter_CutOff_Frequency
				| lis302dl_filter.HighPassFilter_Interrupt);
 80023c8:	7abb      	ldrb	r3, [r7, #10]
				LIS302DL_HIGHPASSFILTER_LEVEL_1;
		lis302dl_filter.HighPassFilter_Interrupt =
				LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;

		/* Configure MEMS high pass filter cut-off level, interrupt and data selection bits */
		ctrl = (uint8_t) (lis302dl_filter.HighPassFilter_Data_Selection
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	82bb      	strh	r3, [r7, #20]
				| lis302dl_filter.HighPassFilter_CutOff_Frequency
				| lis302dl_filter.HighPassFilter_Interrupt);

		/* Configure the accelerometer LPF main parameters */
		AcceleroDrv->FilterConfig(ctrl);
 80023d0:	4b22      	ldr	r3, [pc, #136]	; (800245c <BSP_ACCELERO_Init+0x110>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d6:	8aba      	ldrh	r2, [r7, #20]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	4610      	mov	r0, r2
 80023dc:	4798      	blx	r3

		ret = ACCELERO_OK;
 80023de:	2300      	movs	r3, #0
 80023e0:	75fb      	strb	r3, [r7, #23]
 80023e2:	e034      	b.n	800244e <BSP_ACCELERO_Init+0x102>
	} else if (Lis3dshDrv.ReadID() == I_AM_LIS3DSH) {
 80023e4:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <BSP_ACCELERO_Init+0x114>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	4798      	blx	r3
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b3f      	cmp	r3, #63	; 0x3f
 80023ee:	d12c      	bne.n	800244a <BSP_ACCELERO_Init+0xfe>
		/* Initialize the accelerometer driver structure */
		AcceleroDrv = &Lis3dshDrv;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	; (800245c <BSP_ACCELERO_Init+0x110>)
 80023f2:	4a1b      	ldr	r2, [pc, #108]	; (8002460 <BSP_ACCELERO_Init+0x114>)
 80023f4:	601a      	str	r2, [r3, #0]

		/* Set configuration of LIS3DSH MEMS Accelerometer **********************/
		l1s3dsh_InitStruct.Output_DataRate = LIS3DSH_DATARATE_100;
 80023f6:	2360      	movs	r3, #96	; 0x60
 80023f8:	703b      	strb	r3, [r7, #0]
		l1s3dsh_InitStruct.Axes_Enable = LIS3DSH_XYZ_ENABLE;
 80023fa:	2307      	movs	r3, #7
 80023fc:	707b      	strb	r3, [r7, #1]
		l1s3dsh_InitStruct.SPI_Wire = LIS3DSH_SERIALINTERFACE_4WIRE;
 80023fe:	2300      	movs	r3, #0
 8002400:	70bb      	strb	r3, [r7, #2]
		l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
 8002402:	2300      	movs	r3, #0
 8002404:	70fb      	strb	r3, [r7, #3]
		l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
 8002406:	2300      	movs	r3, #0
 8002408:	713b      	strb	r3, [r7, #4]
		l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;
 800240a:	2300      	movs	r3, #0
 800240c:	717b      	strb	r3, [r7, #5]

		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
 800240e:	783a      	ldrb	r2, [r7, #0]
				| l1s3dsh_InitStruct.Axes_Enable);
 8002410:	787b      	ldrb	r3, [r7, #1]
		l1s3dsh_InitStruct.Self_Test = LIS3DSH_SELFTEST_NORMAL;
		l1s3dsh_InitStruct.Full_Scale = LIS3DSH_FULLSCALE_2;
		l1s3dsh_InitStruct.Filter_BW = LIS3DSH_FILTER_BW_800;

		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
 8002412:	4313      	orrs	r3, r2
 8002414:	b2db      	uxtb	r3, r3
 8002416:	82bb      	strh	r3, [r7, #20]
				| l1s3dsh_InitStruct.Axes_Enable);

		/* Configure MEMS: full scale and self test */
		ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire
 8002418:	78ba      	ldrb	r2, [r7, #2]
				| l1s3dsh_InitStruct.Self_Test | l1s3dsh_InitStruct.Full_Scale
 800241a:	78fb      	ldrb	r3, [r7, #3]
		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
				| l1s3dsh_InitStruct.Axes_Enable);

		/* Configure MEMS: full scale and self test */
		ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire
 800241c:	4313      	orrs	r3, r2
 800241e:	b2da      	uxtb	r2, r3
				| l1s3dsh_InitStruct.Self_Test | l1s3dsh_InitStruct.Full_Scale
 8002420:	793b      	ldrb	r3, [r7, #4]
		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
				| l1s3dsh_InitStruct.Axes_Enable);

		/* Configure MEMS: full scale and self test */
		ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire
 8002422:	4313      	orrs	r3, r2
 8002424:	b2da      	uxtb	r2, r3
				| l1s3dsh_InitStruct.Self_Test | l1s3dsh_InitStruct.Full_Scale
				| l1s3dsh_InitStruct.Filter_BW) << 8);
 8002426:	797b      	ldrb	r3, [r7, #5]
		/* Configure MEMS: power mode(ODR) and axes enable */
		ctrl = (uint16_t) (l1s3dsh_InitStruct.Output_DataRate
				| l1s3dsh_InitStruct.Axes_Enable);

		/* Configure MEMS: full scale and self test */
		ctrl |= (uint16_t) ((l1s3dsh_InitStruct.SPI_Wire
 8002428:	4313      	orrs	r3, r2
 800242a:	b2db      	uxtb	r3, r3
 800242c:	b29b      	uxth	r3, r3
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	b29a      	uxth	r2, r3
 8002432:	8abb      	ldrh	r3, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	82bb      	strh	r3, [r7, #20]
				| l1s3dsh_InitStruct.Self_Test | l1s3dsh_InitStruct.Full_Scale
				| l1s3dsh_InitStruct.Filter_BW) << 8);

		/* Configure the accelerometer main parameters */
		AcceleroDrv->Init(ctrl);
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <BSP_ACCELERO_Init+0x110>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	8aba      	ldrh	r2, [r7, #20]
 8002440:	4610      	mov	r0, r2
 8002442:	4798      	blx	r3

		ret = ACCELERO_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	75fb      	strb	r3, [r7, #23]
 8002448:	e001      	b.n	800244e <BSP_ACCELERO_Init+0x102>
	}

	else {
		ret = ACCELERO_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	75fb      	strb	r3, [r7, #23]
	}
	return ret;
 800244e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	2000004c 	.word	0x2000004c
 800245c:	200000a0 	.word	0x200000a0
 8002460:	20000018 	.word	0x20000018

08002464 <BSP_LED_Init>:
 *     @arg LED4
 *     @arg LED3
 *     @arg LED5
 *     @arg LED6
 */
void BSP_LED_Init(Led_TypeDef Led) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the GPIO_LED Clock */
	LEDx_GPIO_CLK_ENABLE(Led);
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10e      	bne.n	8002492 <BSP_LED_Init+0x2e>
 8002474:	2300      	movs	r3, #0
 8002476:	61bb      	str	r3, [r7, #24]
 8002478:	4a33      	ldr	r2, [pc, #204]	; (8002548 <BSP_LED_Init+0xe4>)
 800247a:	4b33      	ldr	r3, [pc, #204]	; (8002548 <BSP_LED_Init+0xe4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	6313      	str	r3, [r2, #48]	; 0x30
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <BSP_LED_Init+0xe4>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	e034      	b.n	80024fc <BSP_LED_Init+0x98>
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d10e      	bne.n	80024b6 <BSP_LED_Init+0x52>
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	4a2a      	ldr	r2, [pc, #168]	; (8002548 <BSP_LED_Init+0xe4>)
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <BSP_LED_Init+0xe4>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	f043 0308 	orr.w	r3, r3, #8
 80024a6:	6313      	str	r3, [r2, #48]	; 0x30
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <BSP_LED_Init+0xe4>)
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	e022      	b.n	80024fc <BSP_LED_Init+0x98>
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d10e      	bne.n	80024da <BSP_LED_Init+0x76>
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	4a21      	ldr	r2, [pc, #132]	; (8002548 <BSP_LED_Init+0xe4>)
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <BSP_LED_Init+0xe4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6313      	str	r3, [r2, #48]	; 0x30
 80024cc:	4b1e      	ldr	r3, [pc, #120]	; (8002548 <BSP_LED_Init+0xe4>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	e010      	b.n	80024fc <BSP_LED_Init+0x98>
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d10d      	bne.n	80024fc <BSP_LED_Init+0x98>
 80024e0:	2300      	movs	r3, #0
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	4a18      	ldr	r2, [pc, #96]	; (8002548 <BSP_LED_Init+0xe4>)
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <BSP_LED_Init+0xe4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	6313      	str	r3, [r2, #48]	; 0x30
 80024f0:	4b15      	ldr	r3, [pc, #84]	; (8002548 <BSP_LED_Init+0xe4>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]

	/* Configure the GPIO_LED pin */
	GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4a13      	ldr	r2, [pc, #76]	; (800254c <BSP_LED_Init+0xe8>)
 8002500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002504:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002506:	2301      	movs	r3, #1
 8002508:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800250a:	2301      	movs	r3, #1
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800250e:	2302      	movs	r3, #2
 8002510:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <BSP_LED_Init+0xec>)
 8002516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251a:	f107 021c 	add.w	r2, r7, #28
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fc35 	bl	8001d90 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	4a09      	ldr	r2, [pc, #36]	; (8002550 <BSP_LED_Init+0xec>)
 800252a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800252e:	79fb      	ldrb	r3, [r7, #7]
 8002530:	4a06      	ldr	r2, [pc, #24]	; (800254c <BSP_LED_Init+0xe8>)
 8002532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002536:	2200      	movs	r2, #0
 8002538:	4619      	mov	r1, r3
 800253a:	f7ff fdcb 	bl	80020d4 <HAL_GPIO_WritePin>
}
 800253e:	bf00      	nop
 8002540:	3730      	adds	r7, #48	; 0x30
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	08002f34 	.word	0x08002f34
 8002550:	20000004 	.word	0x20000004

08002554 <BSP_LED_On>:
 *     @arg LED4
 *     @arg LED3
 *     @arg LED5
 *     @arg LED6  
 */
void BSP_LED_On(Led_TypeDef Led) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800255e:	79fb      	ldrb	r3, [r7, #7]
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <BSP_LED_On+0x2c>)
 8002562:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4a06      	ldr	r2, [pc, #24]	; (8002584 <BSP_LED_On+0x30>)
 800256a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800256e:	2201      	movs	r2, #1
 8002570:	4619      	mov	r1, r3
 8002572:	f7ff fdaf 	bl	80020d4 <HAL_GPIO_WritePin>
}
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000004 	.word	0x20000004
 8002584:	08002f34 	.word	0x08002f34

08002588 <SPIx_Init>:
/******************************* SPI Routines *********************************/

/**
 * @brief  SPIx Bus initialization
 */
static void SPIx_Init(void) {
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET) {
 800258c:	4819      	ldr	r0, [pc, #100]	; (80025f4 <SPIx_Init+0x6c>)
 800258e:	f7fe ff47 	bl	8001420 <HAL_SPI_GetState>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d12a      	bne.n	80025ee <SPIx_Init+0x66>
		/* SPI configuration -----------------------------------------------------*/
		SpiHandle.Instance = DISCOVERY_SPIx;
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <SPIx_Init+0x6c>)
 800259a:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <SPIx_Init+0x70>)
 800259c:	601a      	str	r2, [r3, #0]
		SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <SPIx_Init+0x6c>)
 80025a0:	2218      	movs	r2, #24
 80025a2:	61da      	str	r2, [r3, #28]
		SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <SPIx_Init+0x6c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
		SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <SPIx_Init+0x6c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	615a      	str	r2, [r3, #20]
		SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <SPIx_Init+0x6c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	611a      	str	r2, [r3, #16]
		SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80025b6:	4b0f      	ldr	r3, [pc, #60]	; (80025f4 <SPIx_Init+0x6c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
		SpiHandle.Init.CRCPolynomial = 7;
 80025bc:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <SPIx_Init+0x6c>)
 80025be:	2207      	movs	r2, #7
 80025c0:	62da      	str	r2, [r3, #44]	; 0x2c
		SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <SPIx_Init+0x6c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]
		SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025c8:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <SPIx_Init+0x6c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	621a      	str	r2, [r3, #32]
		SpiHandle.Init.NSS = SPI_NSS_SOFT;
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <SPIx_Init+0x6c>)
 80025d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d4:	619a      	str	r2, [r3, #24]
		SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <SPIx_Init+0x6c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	625a      	str	r2, [r3, #36]	; 0x24
		SpiHandle.Init.Mode = SPI_MODE_MASTER;
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SPIx_Init+0x6c>)
 80025de:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025e2:	605a      	str	r2, [r3, #4]

		SPIx_MspInit();
 80025e4:	f000 f836 	bl	8002654 <SPIx_MspInit>
		HAL_SPI_Init(&SpiHandle);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <SPIx_Init+0x6c>)
 80025ea:	f7fe fd4f 	bl	800108c <HAL_SPI_Init>
	}
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200000a4 	.word	0x200000a4
 80025f8:	40013000 	.word	0x40013000

080025fc <SPIx_WriteRead>:
 * @brief  Sends a Byte through the SPI interface and return the Byte received 
 *         from the SPI bus.
 * @param  Byte: Byte send.
 * @retval The received byte value
 */
static uint8_t SPIx_WriteRead(uint8_t Byte) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af02      	add	r7, sp, #8
 8002602:	4603      	mov	r3, r0
 8002604:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	73fb      	strb	r3, [r7, #15]

	/* Send a Byte through the SPI peripheral */
	/* Read byte from the SPI bus */
	if (HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte,
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <SPIx_WriteRead+0x38>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f107 020f 	add.w	r2, r7, #15
 8002612:	1df9      	adds	r1, r7, #7
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2301      	movs	r3, #1
 8002618:	4807      	ldr	r0, [pc, #28]	; (8002638 <SPIx_WriteRead+0x3c>)
 800261a:	f7fe fdd7 	bl	80011cc <HAL_SPI_TransmitReceive>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <SPIx_WriteRead+0x2c>
			(uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK) {
		SPIx_Error();
 8002624:	f000 f80a 	bl	800263c <SPIx_Error>
	}

	return receivedbyte;
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000014 	.word	0x20000014
 8002638:	200000a4 	.word	0x200000a4

0800263c <SPIx_Error>:

/**
 * @brief  SPIx error treatment function.
 */
static void SPIx_Error(void) {
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	/* De-initialize the SPI communication bus */
	HAL_SPI_DeInit(&SpiHandle);
 8002640:	4803      	ldr	r0, [pc, #12]	; (8002650 <SPIx_Error+0x14>)
 8002642:	f7fe fd87 	bl	8001154 <HAL_SPI_DeInit>

	/* Re-Initialize the SPI communication bus */
	SPIx_Init();
 8002646:	f7ff ff9f 	bl	8002588 <SPIx_Init>
}
 800264a:	bf00      	nop
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200000a4 	.word	0x200000a4

08002654 <SPIx_MspInit>:

/**
 * @brief  SPI MSP Init.
 */
static void SPIx_MspInit(void) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable the SPI peripheral */
	DISCOVERY_SPIx_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <SPIx_MspInit+0x68>)
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <SPIx_MspInit+0x68>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002668:	6453      	str	r3, [r2, #68]	; 0x44
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <SPIx_MspInit+0x68>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]

	/* Enable SCK, MOSI and MISO GPIO clocks */
	DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	4a10      	ldr	r2, [pc, #64]	; (80026bc <SPIx_MspInit+0x68>)
 800267c:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <SPIx_MspInit+0x68>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <SPIx_MspInit+0x68>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]

	/* SPI SCK, MOSI, MISO pin configuration */
	GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MISO_PIN
 8002692:	23e0      	movs	r3, #224	; 0xe0
 8002694:	60fb      	str	r3, [r7, #12]
			| DISCOVERY_SPIx_MOSI_PIN);
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800269a:	2302      	movs	r3, #2
 800269c:	617b      	str	r3, [r7, #20]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800269e:	2301      	movs	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80026a2:	2305      	movs	r3, #5
 80026a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	4619      	mov	r1, r3
 80026ac:	4804      	ldr	r0, [pc, #16]	; (80026c0 <SPIx_MspInit+0x6c>)
 80026ae:	f7ff fb6f 	bl	8001d90 <HAL_GPIO_Init>
}
 80026b2:	bf00      	nop
 80026b4:	3720      	adds	r7, #32
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40020000 	.word	0x40020000

080026c4 <ACCELERO_IO_Init>:
/***************************** LINK ACCELEROMETER *****************************/

/**
 * @brief  Configures the Accelerometer SPI interface.
 */
void ACCELERO_IO_Init(void) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Configure the Accelerometer Control pins --------------------------------*/
	/* Enable CS GPIO clock and configure GPIO pin for Accelerometer Chip select */
	ACCELERO_CS_GPIO_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	603b      	str	r3, [r7, #0]
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <ACCELERO_IO_Init+0x54>)
 80026d0:	4b11      	ldr	r3, [pc, #68]	; (8002718 <ACCELERO_IO_Init+0x54>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	f043 0310 	orr.w	r3, r3, #16
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <ACCELERO_IO_Init+0x54>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0310 	and.w	r3, r3, #16
 80026e2:	603b      	str	r3, [r7, #0]
 80026e4:	683b      	ldr	r3, [r7, #0]

	/* Configure GPIO PIN for LIS Chip select */
	GPIO_InitStructure.Pin = ACCELERO_CS_PIN;
 80026e6:	2308      	movs	r3, #8
 80026e8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80026f2:	2301      	movs	r3, #1
 80026f4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(ACCELERO_CS_GPIO_PORT, &GPIO_InitStructure);
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <ACCELERO_IO_Init+0x58>)
 80026fc:	f7ff fb48 	bl	8001d90 <HAL_GPIO_Init>

	/* Deselect: Chip Select high */
	ACCELERO_CS_HIGH();
 8002700:	2201      	movs	r2, #1
 8002702:	2108      	movs	r1, #8
 8002704:	4805      	ldr	r0, [pc, #20]	; (800271c <ACCELERO_IO_Init+0x58>)
 8002706:	f7ff fce5 	bl	80020d4 <HAL_GPIO_WritePin>

	SPIx_Init();
 800270a:	f7ff ff3d 	bl	8002588 <SPIx_Init>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40021000 	.word	0x40021000

08002720 <ACCELERO_IO_ITConfig>:

/**
 * @brief  Configures the Accelerometer INT2.
 *         EXTI0 is already used by user button so INT1 is not configured here.
 */
void ACCELERO_IO_ITConfig(void) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable INT2 GPIO clock and configure GPIO PINs to detect Interrupts */
	ACCELERO_INT_GPIO_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	603b      	str	r3, [r7, #0]
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <ACCELERO_IO_ITConfig+0x54>)
 800272c:	4b11      	ldr	r3, [pc, #68]	; (8002774 <ACCELERO_IO_ITConfig+0x54>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	f043 0310 	orr.w	r3, r3, #16
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <ACCELERO_IO_ITConfig+0x54>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	683b      	ldr	r3, [r7, #0]

	/* Configure GPIO PINs to detect Interrupts */
	GPIO_InitStructure.Pin = ACCELERO_INT2_PIN;
 8002742:	2302      	movs	r3, #2
 8002744:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002746:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <ACCELERO_IO_ITConfig+0x58>)
 8002748:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800274a:	2302      	movs	r3, #2
 800274c:	613b      	str	r3, [r7, #16]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	4619      	mov	r1, r3
 8002756:	4809      	ldr	r0, [pc, #36]	; (800277c <ACCELERO_IO_ITConfig+0x5c>)
 8002758:	f7ff fb1a 	bl	8001d90 <HAL_GPIO_Init>

	/* Enable and set Accelerometer INT2 to the lowest priority */
	HAL_NVIC_SetPriority((IRQn_Type) ACCELERO_INT2_EXTI_IRQn, 0x0F, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	210f      	movs	r1, #15
 8002760:	2007      	movs	r0, #7
 8002762:	f7ff fd87 	bl	8002274 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ((IRQn_Type) ACCELERO_INT2_EXTI_IRQn);
 8002766:	2007      	movs	r0, #7
 8002768:	f7ff fda0 	bl	80022ac <HAL_NVIC_EnableIRQ>
}
 800276c:	bf00      	nop
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40023800 	.word	0x40023800
 8002778:	10110000 	.word	0x10110000
 800277c:	40021000 	.word	0x40021000

08002780 <ACCELERO_IO_Write>:
 * @param  pBuffer: pointer to the buffer containing the data to be written to the Accelerometer.
 * @param  WriteAddr: Accelerometer's internal address to write to.
 * @param  NumByteToWrite: Number of bytes to write.
 */
void ACCELERO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr,
		uint16_t NumByteToWrite) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	70fb      	strb	r3, [r7, #3]
 800278c:	4613      	mov	r3, r2
 800278e:	803b      	strh	r3, [r7, #0]
	/* Configure the MS bit: 
	 - When 0, the address will remain unchanged in multiple read/write commands.
	 - When 1, the address will be auto incremented in multiple read/write commands.
	 */
	if (NumByteToWrite > 0x01) {
 8002790:	883b      	ldrh	r3, [r7, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d903      	bls.n	800279e <ACCELERO_IO_Write+0x1e>
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800279c:	70fb      	strb	r3, [r7, #3]
	}
	/* Set chip select Low at the start of the transmission */
	ACCELERO_CS_LOW();
 800279e:	2200      	movs	r2, #0
 80027a0:	2108      	movs	r1, #8
 80027a2:	480f      	ldr	r0, [pc, #60]	; (80027e0 <ACCELERO_IO_Write+0x60>)
 80027a4:	f7ff fc96 	bl	80020d4 <HAL_GPIO_WritePin>

	/* Send the Address of the indexed register */
	SPIx_WriteRead(WriteAddr);
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff26 	bl	80025fc <SPIx_WriteRead>

	/* Send the data that will be written into the device (MSB First) */
	while (NumByteToWrite >= 0x01) {
 80027b0:	e00a      	b.n	80027c8 <ACCELERO_IO_Write+0x48>
		SPIx_WriteRead(*pBuffer);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff20 	bl	80025fc <SPIx_WriteRead>
		NumByteToWrite--;
 80027bc:	883b      	ldrh	r3, [r7, #0]
 80027be:	3b01      	subs	r3, #1
 80027c0:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3301      	adds	r3, #1
 80027c6:	607b      	str	r3, [r7, #4]

	/* Send the Address of the indexed register */
	SPIx_WriteRead(WriteAddr);

	/* Send the data that will be written into the device (MSB First) */
	while (NumByteToWrite >= 0x01) {
 80027c8:	883b      	ldrh	r3, [r7, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f1      	bne.n	80027b2 <ACCELERO_IO_Write+0x32>
		NumByteToWrite--;
		pBuffer++;
	}

	/* Set chip select High at the end of the transmission */
	ACCELERO_CS_HIGH();
 80027ce:	2201      	movs	r2, #1
 80027d0:	2108      	movs	r1, #8
 80027d2:	4803      	ldr	r0, [pc, #12]	; (80027e0 <ACCELERO_IO_Write+0x60>)
 80027d4:	f7ff fc7e 	bl	80020d4 <HAL_GPIO_WritePin>
}
 80027d8:	bf00      	nop
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000

080027e4 <ACCELERO_IO_Read>:
 * @param  pBuffer: pointer to the buffer that receives the data read from the Accelerometer.
 * @param  ReadAddr: Accelerometer's internal address to read from.
 * @param  NumByteToRead: number of bytes to read from the Accelerometer.
 */
void ACCELERO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr,
		uint16_t NumByteToRead) {
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	70fb      	strb	r3, [r7, #3]
 80027f0:	4613      	mov	r3, r2
 80027f2:	803b      	strh	r3, [r7, #0]
	if (NumByteToRead > 0x01) {
 80027f4:	883b      	ldrh	r3, [r7, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d904      	bls.n	8002804 <ACCELERO_IO_Read+0x20>
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002800:	70fb      	strb	r3, [r7, #3]
 8002802:	e003      	b.n	800280c <ACCELERO_IO_Read+0x28>
	} else {
		ReadAddr |= (uint8_t) READWRITE_CMD;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800280a:	70fb      	strb	r3, [r7, #3]
	}
	/* Set chip select Low at the start of the transmission */
	ACCELERO_CS_LOW();
 800280c:	2200      	movs	r2, #0
 800280e:	2108      	movs	r1, #8
 8002810:	4810      	ldr	r0, [pc, #64]	; (8002854 <ACCELERO_IO_Read+0x70>)
 8002812:	f7ff fc5f 	bl	80020d4 <HAL_GPIO_WritePin>

	/* Send the Address of the indexed register */
	SPIx_WriteRead(ReadAddr);
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff feef 	bl	80025fc <SPIx_WriteRead>

	/* Receive the data that will be read from the device (MSB First) */
	while (NumByteToRead > 0x00) {
 800281e:	e00c      	b.n	800283a <ACCELERO_IO_Read+0x56>
		/* Send dummy byte (0x00) to generate the SPI clock to ACCELEROMETER (Slave device) */
		*pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002820:	2000      	movs	r0, #0
 8002822:	f7ff feeb 	bl	80025fc <SPIx_WriteRead>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	701a      	strb	r2, [r3, #0]
		NumByteToRead--;
 800282e:	883b      	ldrh	r3, [r7, #0]
 8002830:	3b01      	subs	r3, #1
 8002832:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3301      	adds	r3, #1
 8002838:	607b      	str	r3, [r7, #4]

	/* Send the Address of the indexed register */
	SPIx_WriteRead(ReadAddr);

	/* Receive the data that will be read from the device (MSB First) */
	while (NumByteToRead > 0x00) {
 800283a:	883b      	ldrh	r3, [r7, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1ef      	bne.n	8002820 <ACCELERO_IO_Read+0x3c>
		NumByteToRead--;
		pBuffer++;
	}

	/* Set chip select High at the end of the transmission */
	ACCELERO_CS_HIGH();
 8002840:	2201      	movs	r2, #1
 8002842:	2108      	movs	r1, #8
 8002844:	4803      	ldr	r0, [pc, #12]	; (8002854 <ACCELERO_IO_Read+0x70>)
 8002846:	f7ff fc45 	bl	80020d4 <HAL_GPIO_WritePin>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40021000 	.word	0x40021000

08002858 <LIS3DSH_Init>:
/**
 * @brief  Set LIS3DSH Initialization.
 * @param  InitStruct: contains mask of different init parameters
 * @retval None
 */
void LIS3DSH_Init(uint16_t InitStruct) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8002862:	2300      	movs	r3, #0
 8002864:	73fb      	strb	r3, [r7, #15]

	/* Configure the low level interface */
	ACCELERO_IO_Init();
 8002866:	f7ff ff2d 	bl	80026c4 <ACCELERO_IO_Init>

	/* Configure MEMS: power mode(ODR) and axes enable */
	ctrl = (uint8_t) (InitStruct);
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	73fb      	strb	r3, [r7, #15]

	/* Write value to MEMS CTRL_REG4 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG4_ADDR, 1);
 8002870:	f107 030f 	add.w	r3, r7, #15
 8002874:	2201      	movs	r2, #1
 8002876:	2120      	movs	r1, #32
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff81 	bl	8002780 <ACCELERO_IO_Write>

	/* Configure MEMS: full scale and self test */
	ctrl = (uint8_t) (InitStruct >> 8);
 800287e:	88fb      	ldrh	r3, [r7, #6]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	b29b      	uxth	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	73fb      	strb	r3, [r7, #15]

	/* Write value to MEMS CTRL_REG5 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8002888:	f107 030f 	add.w	r3, r7, #15
 800288c:	2201      	movs	r2, #1
 800288e:	2124      	movs	r1, #36	; 0x24
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff ff75 	bl	8002780 <ACCELERO_IO_Write>
}
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop

080028a0 <LIS3DSH_DeInit>:
/**
 * @brief  LIS3DSH De-Initialization.
 * @param  None
 * @retval None.
 */
void LIS3DSH_DeInit(void) {
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop

080028b0 <LIS3DSH_ReadID>:
/**
 * @brief  Read LIS3DSH device ID.
 * @param  None
 * @retval The Device ID (two bytes).
 */
uint8_t LIS3DSH_ReadID(void) {
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	71fb      	strb	r3, [r7, #7]

	/* Configure the low level interface */
	ACCELERO_IO_Init();
 80028ba:	f7ff ff03 	bl	80026c4 <ACCELERO_IO_Init>

	/* Read WHO_AM_I register */
	ACCELERO_IO_Read(&tmp, LIS3DSH_WHO_AM_I_ADDR, 1);
 80028be:	1dfb      	adds	r3, r7, #7
 80028c0:	2201      	movs	r2, #1
 80028c2:	210f      	movs	r1, #15
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff8d 	bl	80027e4 <ACCELERO_IO_Read>

	/* Return the ID */
	return (uint16_t) tmp;
 80028ca:	79fb      	ldrb	r3, [r7, #7]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <LIS3DSH_InterruptConfig>:
 * @param  LIS3DSH_InterruptConfig_TypeDef: pointer to a LIS3DSH_InterruptConfig_TypeDef 
 *         structure that contains the configuration setting for the LIS3DSH Interrupt.
 * @retval None
 */
void LIS3DSH_InterruptConfig(
		LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0x00;
 80028dc:	2300      	movs	r3, #0
 80028de:	73fb      	strb	r3, [r7, #15]

	/* Configure Interrupt Selection , Request and Signal */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	785a      	ldrb	r2, [r3, #1]
			| LIS3DSH_IntConfigStruct->Interrupt_Request
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	781b      	ldrb	r3, [r3, #0]
void LIS3DSH_InterruptConfig(
		LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct) {
	uint8_t ctrl = 0x00;

	/* Configure Interrupt Selection , Request and Signal */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable
 80028e8:	4313      	orrs	r3, r2
 80028ea:	b2da      	uxtb	r2, r3
			| LIS3DSH_IntConfigStruct->Interrupt_Request
			| LIS3DSH_IntConfigStruct->Interrupt_Signal);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	789b      	ldrb	r3, [r3, #2]
void LIS3DSH_InterruptConfig(
		LIS3DSH_InterruptConfigTypeDef *LIS3DSH_IntConfigStruct) {
	uint8_t ctrl = 0x00;

	/* Configure Interrupt Selection , Request and Signal */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->Interrupt_Selection_Enable
 80028f0:	4313      	orrs	r3, r2
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	73fb      	strb	r3, [r7, #15]
			| LIS3DSH_IntConfigStruct->Interrupt_Request
			| LIS3DSH_IntConfigStruct->Interrupt_Signal);

	/* Write value to MEMS CTRL_REG3 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);
 80028f6:	f107 030f 	add.w	r3, r7, #15
 80028fa:	2201      	movs	r2, #1
 80028fc:	2123      	movs	r1, #35	; 0x23
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff3e 	bl	8002780 <ACCELERO_IO_Write>

	/* Configure State Machine 1 */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->State_Machine1_Enable
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	78da      	ldrb	r2, [r3, #3]
			| LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	791b      	ldrb	r3, [r3, #4]

	/* Write value to MEMS CTRL_REG3 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG3_ADDR, 1);

	/* Configure State Machine 1 */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->State_Machine1_Enable
 800290c:	4313      	orrs	r3, r2
 800290e:	b2db      	uxtb	r3, r3
 8002910:	73fb      	strb	r3, [r7, #15]
			| LIS3DSH_IntConfigStruct->State_Machine1_Interrupt);

	/* Write value to MEMS CTRL_REG1 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);
 8002912:	f107 030f 	add.w	r3, r7, #15
 8002916:	2201      	movs	r2, #1
 8002918:	2121      	movs	r1, #33	; 0x21
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ff30 	bl	8002780 <ACCELERO_IO_Write>

	/* Configure State Machine 2 */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->State_Machine2_Enable
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	795a      	ldrb	r2, [r3, #5]
			| LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	799b      	ldrb	r3, [r3, #6]

	/* Write value to MEMS CTRL_REG1 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG1_ADDR, 1);

	/* Configure State Machine 2 */
	ctrl = (uint8_t) (LIS3DSH_IntConfigStruct->State_Machine2_Enable
 8002928:	4313      	orrs	r3, r2
 800292a:	b2db      	uxtb	r3, r3
 800292c:	73fb      	strb	r3, [r7, #15]
			| LIS3DSH_IntConfigStruct->State_Machine2_Interrupt);

	/* Write value to MEMS CTRL_REG2 register */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_CTRL_REG2_ADDR, 1);
 800292e:	f107 030f 	add.w	r3, r7, #15
 8002932:	2201      	movs	r2, #1
 8002934:	2122      	movs	r1, #34	; 0x22
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff ff22 	bl	8002780 <ACCELERO_IO_Write>
}
 800293c:	bf00      	nop
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <LIS3DSH_Click_IntConfig>:
/**
 * @brief  Set LIS3DSH for click detection
 * @param  None
 * @retval None
 */
void LIS3DSH_Click_IntConfig(void) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 800294a:	2300      	movs	r3, #0
 800294c:	71fb      	strb	r3, [r7, #7]
	LIS3DSH_InterruptConfigTypeDef LIS3DSH_InterruptStruct;

	ACCELERO_IO_ITConfig();
 800294e:	f7ff fee7 	bl	8002720 <ACCELERO_IO_ITConfig>

	/* Set LIS3DSH Interrupt configuration */
	LIS3DSH_InterruptStruct.Interrupt_Selection_Enable =
 8002952:	2300      	movs	r3, #0
 8002954:	707b      	strb	r3, [r7, #1]
			LIS3DSH_INTERRUPT_2_ENABLE;
	LIS3DSH_InterruptStruct.Interrupt_Request =
 8002956:	2300      	movs	r3, #0
 8002958:	703b      	strb	r3, [r7, #0]
			LIS3DSH_INTERRUPT_REQUEST_LATCHED;
	LIS3DSH_InterruptStruct.Interrupt_Signal = LIS3DSH_INTERRUPT_SIGNAL_HIGH;
 800295a:	2340      	movs	r3, #64	; 0x40
 800295c:	70bb      	strb	r3, [r7, #2]
	LIS3DSH_InterruptStruct.State_Machine1_Enable = LIS3DSH_SM_DISABLE;
 800295e:	2300      	movs	r3, #0
 8002960:	70fb      	strb	r3, [r7, #3]
	LIS3DSH_InterruptStruct.State_Machine2_Enable = LIS3DSH_SM_ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	717b      	strb	r3, [r7, #5]
	LIS3DSH_InterruptStruct.State_Machine2_Interrupt = LIS3DSH_SM_INT1;
 8002966:	2300      	movs	r3, #0
 8002968:	71bb      	strb	r3, [r7, #6]
	LIS3DSH_InterruptConfig(&LIS3DSH_InterruptStruct);
 800296a:	463b      	mov	r3, r7
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff ffb1 	bl	80028d4 <LIS3DSH_InterruptConfig>

	/* Set LIS3DSH State Machines configuration */
	ctrl = 0x03;
 8002972:	2303      	movs	r3, #3
 8002974:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM2_1_L_ADDR, 1);
 8002976:	1dfb      	adds	r3, r7, #7
 8002978:	2201      	movs	r2, #1
 800297a:	2152      	movs	r1, #82	; 0x52
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff feff 	bl	8002780 <ACCELERO_IO_Write>
	ctrl = 0xC8;
 8002982:	23c8      	movs	r3, #200	; 0xc8
 8002984:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_TIM1_1_L_ADDR, 1);
 8002986:	1dfb      	adds	r3, r7, #7
 8002988:	2201      	movs	r2, #1
 800298a:	2154      	movs	r1, #84	; 0x54
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fef7 	bl	8002780 <ACCELERO_IO_Write>
	ctrl = 0x45;
 8002992:	2345      	movs	r3, #69	; 0x45
 8002994:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_THRS2_1_ADDR, 1);
 8002996:	1dfb      	adds	r3, r7, #7
 8002998:	2201      	movs	r2, #1
 800299a:	2156      	movs	r1, #86	; 0x56
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff feef 	bl	8002780 <ACCELERO_IO_Write>
	ctrl = 0xFC;
 80029a2:	23fc      	movs	r3, #252	; 0xfc
 80029a4:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_MASK1_A_ADDR, 1);
 80029a6:	1dfb      	adds	r3, r7, #7
 80029a8:	2201      	movs	r2, #1
 80029aa:	215a      	movs	r1, #90	; 0x5a
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fee7 	bl	8002780 <ACCELERO_IO_Write>
	ctrl = 0xA1;
 80029b2:	23a1      	movs	r3, #161	; 0xa1
 80029b4:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT1_ADDR, 1);
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	2201      	movs	r2, #1
 80029ba:	215b      	movs	r1, #91	; 0x5b
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fedf 	bl	8002780 <ACCELERO_IO_Write>
	ctrl = 0x01;
 80029c2:	2301      	movs	r3, #1
 80029c4:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_PR1_ADDR, 1);
 80029c6:	1dfb      	adds	r3, r7, #7
 80029c8:	2201      	movs	r2, #1
 80029ca:	215c      	movs	r1, #92	; 0x5c
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fed7 	bl	8002780 <ACCELERO_IO_Write>

	ACCELERO_IO_Write(&ctrl, LIS3DSH_SETT2_ADDR, 1);
 80029d2:	1dfb      	adds	r3, r7, #7
 80029d4:	2201      	movs	r2, #1
 80029d6:	217b      	movs	r1, #123	; 0x7b
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fed1 	bl	8002780 <ACCELERO_IO_Write>

	/* Configure State Machine 2 to detect single click */
	ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_1_ADDR, 1);
 80029de:	1dfb      	adds	r3, r7, #7
 80029e0:	2201      	movs	r2, #1
 80029e2:	2160      	movs	r1, #96	; 0x60
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fecb 	bl	8002780 <ACCELERO_IO_Write>
	ctrl = 0x06;
 80029ea:	2306      	movs	r3, #6
 80029ec:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_2_ADDR, 1);
 80029ee:	1dfb      	adds	r3, r7, #7
 80029f0:	2201      	movs	r2, #1
 80029f2:	2161      	movs	r1, #97	; 0x61
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fec3 	bl	8002780 <ACCELERO_IO_Write>
	ctrl = 0x28;
 80029fa:	2328      	movs	r3, #40	; 0x28
 80029fc:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_3_ADDR, 1);
 80029fe:	1dfb      	adds	r3, r7, #7
 8002a00:	2201      	movs	r2, #1
 8002a02:	2162      	movs	r1, #98	; 0x62
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff febb 	bl	8002780 <ACCELERO_IO_Write>
	ctrl = 0x11;
 8002a0a:	2311      	movs	r3, #17
 8002a0c:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS3DSH_ST2_4_ADDR, 1);
 8002a0e:	1dfb      	adds	r3, r7, #7
 8002a10:	2201      	movs	r2, #1
 8002a12:	2163      	movs	r1, #99	; 0x63
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff feb3 	bl	8002780 <ACCELERO_IO_Write>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop

08002a24 <LIS3DSH_RebootCmd>:
/**
 * @brief  Reboot memory content of LIS3DSH.
 * @param  None
 * @retval None
 */
void LIS3DSH_RebootCmd(void) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
	uint8_t tmpreg;
	/* Read CTRL_REG6 register */
	ACCELERO_IO_Read(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8002a2a:	1dfb      	adds	r3, r7, #7
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	2125      	movs	r1, #37	; 0x25
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fed7 	bl	80027e4 <ACCELERO_IO_Read>

	/* Enable or Disable the reboot memory */
	tmpreg |= LIS3DSH_BOOT_FORCED;
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	71fb      	strb	r3, [r7, #7]

	/* Write value to MEMS CTRL_REG6 register */
	ACCELERO_IO_Write(&tmpreg, LIS3DSH_CTRL_REG6_ADDR, 1);
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	2201      	movs	r2, #1
 8002a44:	2125      	movs	r1, #37	; 0x25
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fe9a 	bl	8002780 <ACCELERO_IO_Write>
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <LIS3DSH_ReadACC>:
 * @brief  Read LIS3DSH output register, and calculate the acceleration 
 *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit representation).
 * @param  pointer on floating buffer.
 * @retval None
 */
void LIS3DSH_ReadACC(int16_t *pData) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];
	uint8_t crtl, i = 0x00;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	77fb      	strb	r3, [r7, #31]
	float sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8002a60:	4b65      	ldr	r3, [pc, #404]	; (8002bf8 <LIS3DSH_ReadACC+0x1a4>)
 8002a62:	61bb      	str	r3, [r7, #24]
	float valueinfloat = 0;
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]

	ACCELERO_IO_Read(&crtl, LIS3DSH_CTRL_REG5_ADDR, 1);
 8002a6a:	f107 030b 	add.w	r3, r7, #11
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2124      	movs	r1, #36	; 0x24
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff feb6 	bl	80027e4 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[0], LIS3DSH_OUT_X_L_ADDR, 1);
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	2128      	movs	r1, #40	; 0x28
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff feaf 	bl	80027e4 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[1], LIS3DSH_OUT_X_H_ADDR, 1);
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	2129      	movs	r1, #41	; 0x29
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fea7 	bl	80027e4 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[2], LIS3DSH_OUT_Y_L_ADDR, 1);
 8002a96:	f107 030c 	add.w	r3, r7, #12
 8002a9a:	3302      	adds	r3, #2
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	212a      	movs	r1, #42	; 0x2a
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fe9f 	bl	80027e4 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[3], LIS3DSH_OUT_Y_H_ADDR, 1);
 8002aa6:	f107 030c 	add.w	r3, r7, #12
 8002aaa:	3303      	adds	r3, #3
 8002aac:	2201      	movs	r2, #1
 8002aae:	212b      	movs	r1, #43	; 0x2b
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fe97 	bl	80027e4 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[4], LIS3DSH_OUT_Z_L_ADDR, 1);
 8002ab6:	f107 030c 	add.w	r3, r7, #12
 8002aba:	3304      	adds	r3, #4
 8002abc:	2201      	movs	r2, #1
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fe8f 	bl	80027e4 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) &buffer[5], LIS3DSH_OUT_Z_H_ADDR, 1);
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	3305      	adds	r3, #5
 8002acc:	2201      	movs	r2, #1
 8002ace:	212d      	movs	r1, #45	; 0x2d
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fe87 	bl	80027e4 <ACCELERO_IO_Read>

	switch (crtl & LIS3DSH__FULLSCALE_SELECTION) {
 8002ad6:	7afb      	ldrb	r3, [r7, #11]
 8002ad8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d854      	bhi.n	8002b8a <LIS3DSH_ReadACC+0x136>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <LIS3DSH_ReadACC+0x94>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002b6d 	.word	0x08002b6d
 8002aec:	08002b8b 	.word	0x08002b8b
 8002af0:	08002b8b 	.word	0x08002b8b
 8002af4:	08002b8b 	.word	0x08002b8b
 8002af8:	08002b8b 	.word	0x08002b8b
 8002afc:	08002b8b 	.word	0x08002b8b
 8002b00:	08002b8b 	.word	0x08002b8b
 8002b04:	08002b8b 	.word	0x08002b8b
 8002b08:	08002b73 	.word	0x08002b73
 8002b0c:	08002b8b 	.word	0x08002b8b
 8002b10:	08002b8b 	.word	0x08002b8b
 8002b14:	08002b8b 	.word	0x08002b8b
 8002b18:	08002b8b 	.word	0x08002b8b
 8002b1c:	08002b8b 	.word	0x08002b8b
 8002b20:	08002b8b 	.word	0x08002b8b
 8002b24:	08002b8b 	.word	0x08002b8b
 8002b28:	08002b79 	.word	0x08002b79
 8002b2c:	08002b8b 	.word	0x08002b8b
 8002b30:	08002b8b 	.word	0x08002b8b
 8002b34:	08002b8b 	.word	0x08002b8b
 8002b38:	08002b8b 	.word	0x08002b8b
 8002b3c:	08002b8b 	.word	0x08002b8b
 8002b40:	08002b8b 	.word	0x08002b8b
 8002b44:	08002b8b 	.word	0x08002b8b
 8002b48:	08002b7f 	.word	0x08002b7f
 8002b4c:	08002b8b 	.word	0x08002b8b
 8002b50:	08002b8b 	.word	0x08002b8b
 8002b54:	08002b8b 	.word	0x08002b8b
 8002b58:	08002b8b 	.word	0x08002b8b
 8002b5c:	08002b8b 	.word	0x08002b8b
 8002b60:	08002b8b 	.word	0x08002b8b
 8002b64:	08002b8b 	.word	0x08002b8b
 8002b68:	08002b85 	.word	0x08002b85
	/* FS bit = 000 ==> Sensitivity typical value = 0.06milligals/digit */
	case LIS3DSH_FULLSCALE_2:
		sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 8002b6c:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <LIS3DSH_ReadACC+0x1a4>)
 8002b6e:	61bb      	str	r3, [r7, #24]
		break;
 8002b70:	e00c      	b.n	8002b8c <LIS3DSH_ReadACC+0x138>

		/* FS bit = 001 ==> Sensitivity typical value = 0.12milligals/digit */
	case LIS3DSH_FULLSCALE_4:
		sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <LIS3DSH_ReadACC+0x1a8>)
 8002b74:	61bb      	str	r3, [r7, #24]
		break;
 8002b76:	e009      	b.n	8002b8c <LIS3DSH_ReadACC+0x138>

		/* FS bit = 010 ==> Sensitivity typical value = 0.18milligals/digit */
	case LIS3DSH_FULLSCALE_6:
		sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 8002b78:	4b21      	ldr	r3, [pc, #132]	; (8002c00 <LIS3DSH_ReadACC+0x1ac>)
 8002b7a:	61bb      	str	r3, [r7, #24]
		break;
 8002b7c:	e006      	b.n	8002b8c <LIS3DSH_ReadACC+0x138>

		/* FS bit = 011 ==> Sensitivity typical value = 0.24milligals/digit */
	case LIS3DSH_FULLSCALE_8:
		sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <LIS3DSH_ReadACC+0x1b0>)
 8002b80:	61bb      	str	r3, [r7, #24]
		break;
 8002b82:	e003      	b.n	8002b8c <LIS3DSH_ReadACC+0x138>

		/* FS bit = 100 ==> Sensitivity typical value = 0.73milligals/digit */
	case LIS3DSH_FULLSCALE_16:
		sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <LIS3DSH_ReadACC+0x1b4>)
 8002b86:	61bb      	str	r3, [r7, #24]
		break;
 8002b88:	e000      	b.n	8002b8c <LIS3DSH_ReadACC+0x138>

	default:
		break;
 8002b8a:	bf00      	nop
	}

	/* Obtain the mg value for the three axis */
	for (i = 0; i < 3; i++) {
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	77fb      	strb	r3, [r7, #31]
 8002b90:	e02a      	b.n	8002be8 <LIS3DSH_ReadACC+0x194>
		valueinfloat = ((buffer[2 * i + 1] << 8) + buffer[2 * i]) * sensitivity;
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	3301      	adds	r3, #1
 8002b98:	f107 0220 	add.w	r2, r7, #32
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	7ffa      	ldrb	r2, [r7, #31]
 8002ba6:	0052      	lsls	r2, r2, #1
 8002ba8:	f107 0120 	add.w	r1, r7, #32
 8002bac:	440a      	add	r2, r1
 8002bae:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc4:	edc7 7a05 	vstr	s15, [r7, #20]
		pData[i] = (int16_t) valueinfloat;
 8002bc8:	7ffb      	ldrb	r3, [r7, #31]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	4413      	add	r3, r2
 8002bd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd8:	edc7 7a00 	vstr	s15, [r7]
 8002bdc:	883a      	ldrh	r2, [r7, #0]
 8002bde:	b212      	sxth	r2, r2
 8002be0:	801a      	strh	r2, [r3, #0]
	default:
		break;
	}

	/* Obtain the mg value for the three axis */
	for (i = 0; i < 3; i++) {
 8002be2:	7ffb      	ldrb	r3, [r7, #31]
 8002be4:	3301      	adds	r3, #1
 8002be6:	77fb      	strb	r3, [r7, #31]
 8002be8:	7ffb      	ldrb	r3, [r7, #31]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d9d1      	bls.n	8002b92 <LIS3DSH_ReadACC+0x13e>
		valueinfloat = ((buffer[2 * i + 1] << 8) + buffer[2 * i]) * sensitivity;
		pData[i] = (int16_t) valueinfloat;
	}
}
 8002bee:	bf00      	nop
 8002bf0:	3720      	adds	r7, #32
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	3d75c28f 	.word	0x3d75c28f
 8002bfc:	3df5c28f 	.word	0x3df5c28f
 8002c00:	3e3851ec 	.word	0x3e3851ec
 8002c04:	3e75c28f 	.word	0x3e75c28f
 8002c08:	3f3ae148 	.word	0x3f3ae148

08002c0c <LIS302DL_Init>:
/**
 * @brief  Set LIS302DL Initialization.
 * @param  InitStruct: contains mask of different init parameters
 * @retval None
 */
void LIS302DL_Init(uint16_t InitStruct) {
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	80fb      	strh	r3, [r7, #6]
	uint8_t ctrl = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]

	/* Configure the low level interface */
	ACCELERO_IO_Init();
 8002c1a:	f7ff fd53 	bl	80026c4 <ACCELERO_IO_Init>

	ctrl = (uint8_t) InitStruct;
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	73fb      	strb	r3, [r7, #15]

	/* Write value to MEMS CTRL_REG1 register */
	ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 8002c24:	f107 030f 	add.w	r3, r7, #15
 8002c28:	2201      	movs	r2, #1
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fda7 	bl	8002780 <ACCELERO_IO_Write>
}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop

08002c3c <LIS302DL_DeInit>:
/**
 * @brief  LIS302DL De-Initialization.
 * @param  None
 * @retval None.
 */
void LIS302DL_DeInit(void) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop

08002c4c <LIS302DL_ReadID>:
/**
 * @brief  Read LIS302DL device ID.
 * @param  None
 * @retval The Device ID (two bytes).
 */
uint8_t LIS302DL_ReadID(void) {
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
	uint8_t tmp = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	71fb      	strb	r3, [r7, #7]

	/* Configure the low level interface */
	ACCELERO_IO_Init();
 8002c56:	f7ff fd35 	bl	80026c4 <ACCELERO_IO_Init>

	/* Read WHO_AM_I register */
	ACCELERO_IO_Read(&tmp, LIS302DL_WHO_AM_I_ADDR, 1);
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	210f      	movs	r1, #15
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fdbf 	bl	80027e4 <ACCELERO_IO_Read>

	/* Return the ID */
	return (uint16_t) tmp;
 8002c66:	79fb      	ldrb	r3, [r7, #7]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <LIS302DL_FilterConfig>:
/**
 * @brief  Set LIS302DL Internal High Pass Filter configuration.
 * @param  FilterStruct: contains data for filter config
 * @retval None
 */
void LIS302DL_FilterConfig(uint8_t FilterStruct) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl = 0x00;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]

	/* Read CTRL_REG2 register */
	ACCELERO_IO_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8002c7e:	f107 030f 	add.w	r3, r7, #15
 8002c82:	2201      	movs	r2, #1
 8002c84:	2121      	movs	r1, #33	; 0x21
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fdac 	bl	80027e4 <ACCELERO_IO_Read>

	/* Clear high pass filter cut-off level, interrupt and data selection bits */
	ctrl &= (uint8_t) ~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER |
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	73fb      	strb	r3, [r7, #15]
	LIS302DL_HIGHPASSFILTER_LEVEL_3 |
	LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);

	ctrl |= FilterStruct;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	73fb      	strb	r3, [r7, #15]

	/* Write value to MEMS CTRL_REG2 register */
	ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8002ca0:	f107 030f 	add.w	r3, r7, #15
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	2121      	movs	r1, #33	; 0x21
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff fd69 	bl	8002780 <ACCELERO_IO_Write>
}
 8002cae:	bf00      	nop
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop

08002cb8 <LIS302DL_InterruptConfig>:
 * @param  LIS302DL_InterruptConfig_TypeDef: pointer to a LIS302DL_InterruptConfig_TypeDef 
 *         structure that contains the configuration setting for the LIS302DL Interrupt.
 * @retval None
 */
void LIS302DL_InterruptConfig(
		LIS302DL_InterruptConfigTypeDef *LIS302DL_IntConfigStruct) {
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	uint8_t ctrl = 0x00;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]

	/* Read CLICK_CFG register */
	ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8002cc4:	f107 030f 	add.w	r3, r7, #15
 8002cc8:	2201      	movs	r2, #1
 8002cca:	2138      	movs	r1, #56	; 0x38
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fd89 	bl	80027e4 <ACCELERO_IO_Read>

	/* Configure latch Interrupt request, click interrupts and double click interrupts */
	ctrl = (uint8_t) (LIS302DL_IntConfigStruct->Latch_Request
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	781a      	ldrb	r2, [r3, #0]
			| LIS302DL_IntConfigStruct->SingleClick_Axes
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	785b      	ldrb	r3, [r3, #1]

	/* Read CLICK_CFG register */
	ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);

	/* Configure latch Interrupt request, click interrupts and double click interrupts */
	ctrl = (uint8_t) (LIS302DL_IntConfigStruct->Latch_Request
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	b2da      	uxtb	r2, r3
			| LIS302DL_IntConfigStruct->SingleClick_Axes
			| LIS302DL_IntConfigStruct->DoubleClick_Axes);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	789b      	ldrb	r3, [r3, #2]

	/* Read CLICK_CFG register */
	ACCELERO_IO_Read(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);

	/* Configure latch Interrupt request, click interrupts and double click interrupts */
	ctrl = (uint8_t) (LIS302DL_IntConfigStruct->Latch_Request
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	73fb      	strb	r3, [r7, #15]
			| LIS302DL_IntConfigStruct->SingleClick_Axes
			| LIS302DL_IntConfigStruct->DoubleClick_Axes);

	/* Write value to MEMS CLICK_CFG register */
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8002ce8:	f107 030f 	add.w	r3, r7, #15
 8002cec:	2201      	movs	r2, #1
 8002cee:	2138      	movs	r1, #56	; 0x38
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff fd45 	bl	8002780 <ACCELERO_IO_Write>
}
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop

08002d00 <LIS302DL_Click_IntConfig>:
/**
 * @brief  Set LIS302DL Interrupt configuration
 * @param  None
 * @retval None
 */
void LIS302DL_Click_IntConfig(void) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
	uint8_t ctrl = 0x00;
 8002d06:	2300      	movs	r3, #0
 8002d08:	71fb      	strb	r3, [r7, #7]
	LIS302DL_InterruptConfigTypeDef LIS302DL_InterruptStruct;

	ACCELERO_IO_ITConfig();
 8002d0a:	f7ff fd09 	bl	8002720 <ACCELERO_IO_ITConfig>

	/* Set configuration of Internal High Pass Filter of LIS302DL */
	LIS302DL_InterruptStruct.Latch_Request = LIS302DL_INTERRUPTREQUEST_LATCHED;
 8002d0e:	2340      	movs	r3, #64	; 0x40
 8002d10:	713b      	strb	r3, [r7, #4]
	LIS302DL_InterruptStruct.SingleClick_Axes =
 8002d12:	2310      	movs	r3, #16
 8002d14:	717b      	strb	r3, [r7, #5]
			LIS302DL_CLICKINTERRUPT_Z_ENABLE;
	LIS302DL_InterruptStruct.DoubleClick_Axes =
 8002d16:	2320      	movs	r3, #32
 8002d18:	71bb      	strb	r3, [r7, #6]
			LIS302DL_DOUBLECLICKINTERRUPT_Z_ENABLE;
	LIS302DL_InterruptConfig(&LIS302DL_InterruptStruct);
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ffcb 	bl	8002cb8 <LIS302DL_InterruptConfig>

	/* Configure Interrupt control register: enable Click interrupt on INT1 and
	 INT2 on Z axis high event */
	ctrl = 0x3F;
 8002d22:	233f      	movs	r3, #63	; 0x3f
 8002d24:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CTRL_REG3_ADDR, 1);
 8002d26:	1dfb      	adds	r3, r7, #7
 8002d28:	2201      	movs	r2, #1
 8002d2a:	2122      	movs	r1, #34	; 0x22
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fd27 	bl	8002780 <ACCELERO_IO_Write>

	/* Enable Interrupt generation on click on Z axis */
	ctrl = 0x50;
 8002d32:	2350      	movs	r3, #80	; 0x50
 8002d34:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_CFG_REG_ADDR, 1);
 8002d36:	1dfb      	adds	r3, r7, #7
 8002d38:	2201      	movs	r2, #1
 8002d3a:	2138      	movs	r1, #56	; 0x38
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fd1f 	bl	8002780 <ACCELERO_IO_Write>

	/* Configure Click Threshold on X/Y axis (10 x 0.5g) */
	ctrl = 0xAA;
 8002d42:	23aa      	movs	r3, #170	; 0xaa
 8002d44:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSY_X_REG_ADDR, 1);
 8002d46:	1dfb      	adds	r3, r7, #7
 8002d48:	2201      	movs	r2, #1
 8002d4a:	213b      	movs	r1, #59	; 0x3b
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fd17 	bl	8002780 <ACCELERO_IO_Write>

	/* Configure Click Threshold on Z axis (10 x 0.5g) */
	ctrl = 0x0A;
 8002d52:	230a      	movs	r3, #10
 8002d54:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_THSZ_REG_ADDR, 1);
 8002d56:	1dfb      	adds	r3, r7, #7
 8002d58:	2201      	movs	r2, #1
 8002d5a:	213c      	movs	r1, #60	; 0x3c
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff fd0f 	bl	8002780 <ACCELERO_IO_Write>

	/* Enable interrupt on Y axis high event */
	ctrl = 0x4C;
 8002d62:	234c      	movs	r3, #76	; 0x4c
 8002d64:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_FF_WU_CFG1_REG_ADDR, 1);
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	2201      	movs	r2, #1
 8002d6a:	2130      	movs	r1, #48	; 0x30
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fd07 	bl	8002780 <ACCELERO_IO_Write>

	/* Configure Time Limit */
	ctrl = 0x03;
 8002d72:	2303      	movs	r3, #3
 8002d74:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_TIMELIMIT_REG_ADDR, 1);
 8002d76:	1dfb      	adds	r3, r7, #7
 8002d78:	2201      	movs	r2, #1
 8002d7a:	213d      	movs	r1, #61	; 0x3d
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff fcff 	bl	8002780 <ACCELERO_IO_Write>

	/* Configure Latency */
	ctrl = 0x7F;
 8002d82:	237f      	movs	r3, #127	; 0x7f
 8002d84:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_LATENCY_REG_ADDR, 1);
 8002d86:	1dfb      	adds	r3, r7, #7
 8002d88:	2201      	movs	r2, #1
 8002d8a:	213e      	movs	r1, #62	; 0x3e
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fcf7 	bl	8002780 <ACCELERO_IO_Write>

	/* Configure Click Window */
	ctrl = 0x7F;
 8002d92:	237f      	movs	r3, #127	; 0x7f
 8002d94:	71fb      	strb	r3, [r7, #7]
	ACCELERO_IO_Write(&ctrl, LIS302DL_CLICK_WINDOW_REG_ADDR, 1);
 8002d96:	1dfb      	adds	r3, r7, #7
 8002d98:	2201      	movs	r2, #1
 8002d9a:	213f      	movs	r1, #63	; 0x3f
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fcef 	bl	8002780 <ACCELERO_IO_Write>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop

08002dac <LIS302DL_Click_IntClear>:
/**
 * @brief  Clear LIS302DL click Interrupt 
 * @param  None
 * @retval None
 */
void LIS302DL_Click_IntClear(void) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
	uint8_t buffer[6], clickreg = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	71fb      	strb	r3, [r7, #7]

	/* Read click and status registers if the available MEMS Accelerometer is LIS302DL */
	ACCELERO_IO_Read(&clickreg, LIS302DL_CLICK_SRC_REG_ADDR, 1);
 8002db6:	1dfb      	adds	r3, r7, #7
 8002db8:	2201      	movs	r2, #1
 8002dba:	2139      	movs	r1, #57	; 0x39
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fd11 	bl	80027e4 <ACCELERO_IO_Read>
	ACCELERO_IO_Read(buffer, LIS302DL_STATUS_REG_ADDR, 6);
 8002dc2:	f107 0308 	add.w	r3, r7, #8
 8002dc6:	2206      	movs	r2, #6
 8002dc8:	2127      	movs	r1, #39	; 0x27
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fd0a 	bl	80027e4 <ACCELERO_IO_Read>
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <LIS302DL_RebootCmd>:
/**
 * @brief  Reboot memory content of LIS302DL.
 * @param  None
 * @retval None
 */
void LIS302DL_RebootCmd(void) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
	uint8_t tmpreg;
	/* Read CTRL_REG2 register */
	ACCELERO_IO_Read(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	2201      	movs	r2, #1
 8002de2:	2121      	movs	r1, #33	; 0x21
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fcfd 	bl	80027e4 <ACCELERO_IO_Read>

	/* Enable or Disable the reboot memory */
	tmpreg |= LIS302DL_BOOT_REBOOTMEMORY;
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	71fb      	strb	r3, [r7, #7]

	/* Write value to MEMS CTRL_REG2 register */
	ACCELERO_IO_Write(&tmpreg, LIS302DL_CTRL_REG2_ADDR, 1);
 8002df4:	1dfb      	adds	r3, r7, #7
 8002df6:	2201      	movs	r2, #1
 8002df8:	2121      	movs	r1, #33	; 0x21
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fcc0 	bl	8002780 <ACCELERO_IO_Write>
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <LIS302DL_ReadACC>:
 * @brief  Read LIS302DL output register, and calculate the acceleration 
 *         ACC[mg]=SENSITIVITY* (out_h*256+out_l)/16 (12 bit rappresentation)
 * @param  pfData: Data out pointer
 * @retval None
 */
void LIS302DL_ReadACC(int16_t *pData) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];
	int16_t pnRawData[3];
	uint8_t sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8002e10:	2312      	movs	r3, #18
 8002e12:	77fb      	strb	r3, [r7, #31]
	uint8_t crtl, i = 0x00;
 8002e14:	2300      	movs	r3, #0
 8002e16:	77bb      	strb	r3, [r7, #30]

	ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
 8002e18:	f107 030f 	add.w	r3, r7, #15
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	2120      	movs	r1, #32
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fcdf 	bl	80027e4 <ACCELERO_IO_Read>
	ACCELERO_IO_Read((uint8_t*) buffer, LIS302DL_OUT_X_ADDR, 6);
 8002e26:	f107 0318 	add.w	r3, r7, #24
 8002e2a:	2206      	movs	r2, #6
 8002e2c:	2129      	movs	r1, #41	; 0x29
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff fcd8 	bl	80027e4 <ACCELERO_IO_Read>

	for (i = 0; i < 3; i++) {
 8002e34:	2300      	movs	r3, #0
 8002e36:	77bb      	strb	r3, [r7, #30]
 8002e38:	e011      	b.n	8002e5e <LIS302DL_ReadACC+0x56>
		pnRawData[i] = buffer[2 * i];
 8002e3a:	7fbb      	ldrb	r3, [r7, #30]
 8002e3c:	7fba      	ldrb	r2, [r7, #30]
 8002e3e:	0052      	lsls	r2, r2, #1
 8002e40:	f107 0120 	add.w	r1, r7, #32
 8002e44:	440a      	add	r2, r1
 8002e46:	f912 2c08 	ldrsb.w	r2, [r2, #-8]
 8002e4a:	b212      	sxth	r2, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	f107 0120 	add.w	r1, r7, #32
 8002e52:	440b      	add	r3, r1
 8002e54:	f823 2c10 	strh.w	r2, [r3, #-16]
	uint8_t crtl, i = 0x00;

	ACCELERO_IO_Read(&crtl, LIS302DL_CTRL_REG1_ADDR, 1);
	ACCELERO_IO_Read((uint8_t*) buffer, LIS302DL_OUT_X_ADDR, 6);

	for (i = 0; i < 3; i++) {
 8002e58:	7fbb      	ldrb	r3, [r7, #30]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	77bb      	strb	r3, [r7, #30]
 8002e5e:	7fbb      	ldrb	r3, [r7, #30]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d9ea      	bls.n	8002e3a <LIS302DL_ReadACC+0x32>
		pnRawData[i] = buffer[2 * i];
	}

	switch (crtl & LIS302DL_FULLSCALE_9_2) {
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <LIS302DL_ReadACC+0x6c>
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d003      	beq.n	8002e7a <LIS302DL_ReadACC+0x72>
	case LIS302DL_FULLSCALE_9_2:
		sensitivity = LIS302DL_SENSITIVITY_9_2G;
		break;

	default:
		break;
 8002e72:	e005      	b.n	8002e80 <LIS302DL_ReadACC+0x78>
	}

	switch (crtl & LIS302DL_FULLSCALE_9_2) {
	/* FS bit = 0 ==> Sensitivity typical value = 18milligals/digit*/
	case LIS302DL_FULLSCALE_2_3:
		sensitivity = LIS302DL_SENSITIVITY_2_3G;
 8002e74:	2312      	movs	r3, #18
 8002e76:	77fb      	strb	r3, [r7, #31]
		break;
 8002e78:	e002      	b.n	8002e80 <LIS302DL_ReadACC+0x78>

		/* FS bit = 1 ==> Sensitivity typical value = 72milligals/digit*/
	case LIS302DL_FULLSCALE_9_2:
		sensitivity = LIS302DL_SENSITIVITY_9_2G;
 8002e7a:	2348      	movs	r3, #72	; 0x48
 8002e7c:	77fb      	strb	r3, [r7, #31]
		break;
 8002e7e:	bf00      	nop
	default:
		break;
	}

	/* Obtain the mg value for the three axis */
	for (i = 0; i < 3; i++) {
 8002e80:	2300      	movs	r3, #0
 8002e82:	77bb      	strb	r3, [r7, #30]
 8002e84:	e015      	b.n	8002eb2 <LIS302DL_ReadACC+0xaa>
		pData[i] = (pnRawData[i] * sensitivity);
 8002e86:	7fbb      	ldrb	r3, [r7, #30]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	441a      	add	r2, r3
 8002e8e:	7fbb      	ldrb	r3, [r7, #30]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	f107 0120 	add.w	r1, r7, #32
 8002e96:	440b      	add	r3, r1
 8002e98:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002e9c:	b299      	uxth	r1, r3
 8002e9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	fb11 f303 	smulbb	r3, r1, r3
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	b21b      	sxth	r3, r3
 8002eaa:	8013      	strh	r3, [r2, #0]
	default:
		break;
	}

	/* Obtain the mg value for the three axis */
	for (i = 0; i < 3; i++) {
 8002eac:	7fbb      	ldrb	r3, [r7, #30]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	77bb      	strb	r3, [r7, #30]
 8002eb2:	7fbb      	ldrb	r3, [r7, #30]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d9e6      	bls.n	8002e86 <LIS302DL_ReadACC+0x7e>
		pData[i] = (pnRawData[i] * sensitivity);
	}
}
 8002eb8:	bf00      	nop
 8002eba:	3720      	adds	r7, #32
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <__libc_init_array>:
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <__libc_init_array+0x3c>)
 8002ec4:	4c0e      	ldr	r4, [pc, #56]	; (8002f00 <__libc_init_array+0x40>)
 8002ec6:	1ae4      	subs	r4, r4, r3
 8002ec8:	10a4      	asrs	r4, r4, #2
 8002eca:	2500      	movs	r5, #0
 8002ecc:	461e      	mov	r6, r3
 8002ece:	42a5      	cmp	r5, r4
 8002ed0:	d004      	beq.n	8002edc <__libc_init_array+0x1c>
 8002ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed6:	4798      	blx	r3
 8002ed8:	3501      	adds	r5, #1
 8002eda:	e7f8      	b.n	8002ece <__libc_init_array+0xe>
 8002edc:	f000 f816 	bl	8002f0c <_init>
 8002ee0:	4c08      	ldr	r4, [pc, #32]	; (8002f04 <__libc_init_array+0x44>)
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <__libc_init_array+0x48>)
 8002ee4:	1ae4      	subs	r4, r4, r3
 8002ee6:	10a4      	asrs	r4, r4, #2
 8002ee8:	2500      	movs	r5, #0
 8002eea:	461e      	mov	r6, r3
 8002eec:	42a5      	cmp	r5, r4
 8002eee:	d004      	beq.n	8002efa <__libc_init_array+0x3a>
 8002ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef4:	4798      	blx	r3
 8002ef6:	3501      	adds	r5, #1
 8002ef8:	e7f8      	b.n	8002eec <__libc_init_array+0x2c>
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	08002f3c 	.word	0x08002f3c
 8002f00:	08002f3c 	.word	0x08002f3c
 8002f04:	08002f40 	.word	0x08002f40
 8002f08:	08002f3c 	.word	0x08002f3c

08002f0c <_init>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	bf00      	nop
 8002f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f12:	bc08      	pop	{r3}
 8002f14:	469e      	mov	lr, r3
 8002f16:	4770      	bx	lr

08002f18 <_fini>:
 8002f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1a:	bf00      	nop
 8002f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1e:	bc08      	pop	{r3}
 8002f20:	469e      	mov	lr, r3
 8002f22:	4770      	bx	lr
