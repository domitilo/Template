
Template2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001458  08001458  00011458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001468  08001468  00011468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800146c  0800146c  0001146c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001470  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000005c  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000060  20000060  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006bf7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001064  00000000  00000000  00026c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000840  00000000  00000000  00027c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000798  00000000  00000000  000284d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000365c  00000000  00000000  00028c68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000029a3  00000000  00000000  0002c2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0002ec67  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002134  00000000  00000000  0002ece8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00030e1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001440 	.word	0x08001440

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001440 	.word	0x08001440

080001c8 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2)); /* set CP10 and CP11 Full Access */
 80001cc:	4a16      	ldr	r2, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001ce:	4b16      	ldr	r3, [pc, #88]	; (8000228 <SystemInit+0x60>)
 80001d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 80001dc:	4a13      	ldr	r2, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001de:	4b13      	ldr	r3, [pc, #76]	; (800022c <SystemInit+0x64>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80001e8:	4b10      	ldr	r3, [pc, #64]	; (800022c <SystemInit+0x64>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 80001ee:	4a0f      	ldr	r2, [pc, #60]	; (800022c <SystemInit+0x64>)
 80001f0:	4b0e      	ldr	r3, [pc, #56]	; (800022c <SystemInit+0x64>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80001f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <SystemInit+0x64>)
 8000200:	4a0b      	ldr	r2, [pc, #44]	; (8000230 <SystemInit+0x68>)
 8000202:	605a      	str	r2, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8000204:	4a09      	ldr	r2, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000206:	4b09      	ldr	r3, [pc, #36]	; (800022c <SystemInit+0x64>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800020e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIR = 0x00000000;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <SystemInit+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	60da      	str	r2, [r3, #12]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
	SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000216:	4b04      	ldr	r3, [pc, #16]	; (8000228 <SystemInit+0x60>)
 8000218:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800021c:	609a      	str	r2, [r3, #8]
#endif
}
 800021e:	bf00      	nop
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00
 800022c:	40023800 	.word	0x40023800
 8000230:	24003010 	.word	0x24003010

08000234 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
}
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop

08000244 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000248:	e7fe      	b.n	8000248 <HardFault_Handler+0x4>
 800024a:	bf00      	nop

0800024c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000250:	e7fe      	b.n	8000250 <MemManage_Handler+0x4>
 8000252:	bf00      	nop

08000254 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000258:	e7fe      	b.n	8000258 <BusFault_Handler+0x4>
 800025a:	bf00      	nop

0800025c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000260:	e7fe      	b.n	8000260 <UsageFault_Handler+0x4>
 8000262:	bf00      	nop

08000264 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop

08000274 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop

08000284 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop

08000294 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000298:	f001 f886 	bl	80013a8 <HAL_IncTick>
}
 800029c:	bf00      	nop
 800029e:	bd80      	pop	{r7, pc}

080002a0 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually  
            modified by the user
   */ 
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002b6:	e003      	b.n	80002c0 <LoopCopyDataInit>

080002b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002b8:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002be:	3104      	adds	r1, #4

080002c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002c0:	480b      	ldr	r0, [pc, #44]	; (80002f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002c2:	4b0c      	ldr	r3, [pc, #48]	; (80002f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002c8:	d3f6      	bcc.n	80002b8 <CopyDataInit>
  ldr  r2, =_sbss
 80002ca:	4a0b      	ldr	r2, [pc, #44]	; (80002f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002cc:	e002      	b.n	80002d4 <LoopFillZerobss>

080002ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002d0:	f842 3b04 	str.w	r3, [r2], #4

080002d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002d8:	d3f9      	bcc.n	80002ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002da:	f7ff ff75 	bl	80001c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002de:	f001 f889 	bl	80013f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002e2:	f000 f80f 	bl	8000304 <main>
  bx  lr    
 80002e6:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80002e8:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80002ec:	08001470 	.word	0x08001470
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002f4:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80002f8:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002fc:	20000060 	.word	0x20000060

08000300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000300:	e7fe      	b.n	8000300 <ADC_IRQHandler>
	...

08000304 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
             timer for example or other time source), keeping in mind that Time base 
             duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
             handled in milliseconds basis.
       - Low Level Initialization
     */
  HAL_Init();
 8000308:	f001 f832 	bl	8001370 <HAL_Init>

  /* Configure the system clock to 168 MHz */
  SystemClock_Config();
 800030c:	f000 f802 	bl	8000314 <SystemClock_Config>


  /* Infinite loop */
  while (1)
  {
  }
 8000310:	e7fe      	b.n	8000310 <main+0xc>
 8000312:	bf00      	nop

08000314 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b094      	sub	sp, #80	; 0x50
 8000318:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	4a2f      	ldr	r2, [pc, #188]	; (80003dc <SystemClock_Config+0xc8>)
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemClock_Config+0xc8>)
 8000322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000328:	6413      	str	r3, [r2, #64]	; 0x40
 800032a:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <SystemClock_Config+0xc8>)
 800032c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800032e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000332:	60bb      	str	r3, [r7, #8]
 8000334:	68bb      	ldr	r3, [r7, #8]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000336:	2300      	movs	r3, #0
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	4a29      	ldr	r2, [pc, #164]	; (80003e0 <SystemClock_Config+0xcc>)
 800033c:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemClock_Config+0xcc>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000344:	6013      	str	r3, [r2, #0]
 8000346:	4b26      	ldr	r3, [pc, #152]	; (80003e0 <SystemClock_Config+0xcc>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800034e:	607b      	str	r3, [r7, #4]
 8000350:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000352:	2301      	movs	r3, #1
 8000354:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000364:	2308      	movs	r3, #8
 8000366:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000368:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800036c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800036e:	2302      	movs	r3, #2
 8000370:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000372:	2307      	movs	r3, #7
 8000374:	63bb      	str	r3, [r7, #56]	; 0x38
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	4618      	mov	r0, r3
 800037c:	f000 faf0 	bl	8000960 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x76>
  {
    /* Initialization Error */
    Error_Handler();
 8000386:	f000 f82f 	bl	80003e8 <Error_Handler>
  }
  
  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800038a:	230f      	movs	r3, #15
 800038c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800038e:	2302      	movs	r3, #2
 8000390:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
 8000396:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800039a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 800039c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80003a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003a6:	2105      	movs	r1, #5
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fd03 	bl	8000db4 <HAL_RCC_ClockConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0xa4>
  {
    /* Initialization Error */
    Error_Handler();
 80003b4:	f000 f818 	bl	80003e8 <Error_Handler>
  }

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 80003b8:	f001 f810 	bl	80013dc <HAL_GetREVID>
 80003bc:	4602      	mov	r2, r0
 80003be:	f241 0301 	movw	r3, #4097	; 0x1001
 80003c2:	429a      	cmp	r2, r3
 80003c4:	d105      	bne.n	80003d2 <SystemClock_Config+0xbe>
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003c6:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <SystemClock_Config+0xd0>)
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <SystemClock_Config+0xd0>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d0:	6013      	str	r3, [r2, #0]
  }
}
 80003d2:	bf00      	nop
 80003d4:	3750      	adds	r7, #80	; 0x50
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800
 80003e0:	40007000 	.word	0x40007000
 80003e4:	40023c00 	.word	0x40023c00

080003e8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* TODO: User may add here some code to deal with this error */
  while(1)
  {
  }
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x4>
 80003ee:	bf00      	nop

080003f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b08c      	sub	sp, #48	; 0x30
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80003f8:	2300      	movs	r3, #0
 80003fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 80003fc:	2300      	movs	r3, #0
 80003fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000400:	2200      	movs	r2, #0
 8000402:	6879      	ldr	r1, [r7, #4]
 8000404:	2036      	movs	r0, #54	; 0x36
 8000406:	f000 ff89 	bl	800131c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800040a:	2036      	movs	r0, #54	; 0x36
 800040c:	f000 ffa2 	bl	8001354 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000410:	2300      	movs	r3, #0
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	4a24      	ldr	r2, [pc, #144]	; (80004a8 <HAL_InitTick+0xb8>)
 8000416:	4b24      	ldr	r3, [pc, #144]	; (80004a8 <HAL_InitTick+0xb8>)
 8000418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800041a:	f043 0310 	orr.w	r3, r3, #16
 800041e:	6413      	str	r3, [r2, #64]	; 0x40
 8000420:	4b21      	ldr	r3, [pc, #132]	; (80004a8 <HAL_InitTick+0xb8>)
 8000422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000424:	f003 0310 	and.w	r3, r3, #16
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800042c:	f107 020c 	add.w	r2, r7, #12
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	4611      	mov	r1, r2
 8000436:	4618      	mov	r0, r3
 8000438:	f000 fe88 	bl	800114c <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800043c:	69fb      	ldr	r3, [r7, #28]
 800043e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000442:	2b00      	cmp	r3, #0
 8000444:	d103      	bne.n	800044e <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000446:	f000 fe5b 	bl	8001100 <HAL_RCC_GetPCLK1Freq>
 800044a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800044c:	e004      	b.n	8000458 <HAL_InitTick+0x68>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800044e:	f000 fe57 	bl	8001100 <HAL_RCC_GetPCLK1Freq>
 8000452:	4603      	mov	r3, r0
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800045a:	4a14      	ldr	r2, [pc, #80]	; (80004ac <HAL_InitTick+0xbc>)
 800045c:	fba2 2303 	umull	r2, r3, r2, r3
 8000460:	0c9b      	lsrs	r3, r3, #18
 8000462:	3b01      	subs	r3, #1
 8000464:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <HAL_InitTick+0xc0>)
 8000468:	4a12      	ldr	r2, [pc, #72]	; (80004b4 <HAL_InitTick+0xc4>)
 800046a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <HAL_InitTick+0xc0>)
 800046e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000472:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000474:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <HAL_InitTick+0xc0>)
 8000476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000478:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 800047a:	4b0d      	ldr	r3, [pc, #52]	; (80004b0 <HAL_InitTick+0xc0>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000480:	4b0b      	ldr	r3, [pc, #44]	; (80004b0 <HAL_InitTick+0xc0>)
 8000482:	2200      	movs	r2, #0
 8000484:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000486:	480a      	ldr	r0, [pc, #40]	; (80004b0 <HAL_InitTick+0xc0>)
 8000488:	f000 f83e 	bl	8000508 <HAL_TIM_Base_Init>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d104      	bne.n	800049c <HAL_InitTick+0xac>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8000492:	4807      	ldr	r0, [pc, #28]	; (80004b0 <HAL_InitTick+0xc0>)
 8000494:	f000 f86e 	bl	8000574 <HAL_TIM_Base_Start_IT>
 8000498:	4603      	mov	r3, r0
 800049a:	e000      	b.n	800049e <HAL_InitTick+0xae>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800049c:	2301      	movs	r3, #1
}
 800049e:	4618      	mov	r0, r3
 80004a0:	3730      	adds	r7, #48	; 0x30
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40023800 	.word	0x40023800
 80004ac:	431bde83 	.word	0x431bde83
 80004b0:	20000020 	.word	0x20000020
 80004b4:	40001000 	.word	0x40001000

080004b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 80004c0:	f000 ff72 	bl	80013a8 <HAL_IncTick>
}
 80004c4:	bf00      	nop
 80004c6:	3708      	adds	r7, #8
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}

080004cc <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80004d0:	4802      	ldr	r0, [pc, #8]	; (80004dc <TIM6_DAC_IRQHandler+0x10>)
 80004d2:	f000 f86b 	bl	80005ac <HAL_TIM_IRQHandler>
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	20000020 	.word	0x20000020

080004e0 <HAL_TIMEx_CommutationCallback>:
 * @brief  Hall commutation changed callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim) {
 80004e0:	b480      	push	{r7}
 80004e2:	b083      	sub	sp, #12
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIMEx_CommutationCallback could be implemented in the user file
	 */
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <HAL_TIMEx_BreakCallback>:
 * @brief  Hall Break detection callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim) {
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIMEx_BreakCallback could be implemented in the user file
	 */
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <HAL_TIM_Base_Init>:
 *         parameters in the TIM_HandleTypeDef and create the associated handle.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d101      	bne.n	800051a <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 8000516:	2301      	movs	r3, #1
 8000518:	e01d      	b.n	8000556 <HAL_TIM_Base_Init+0x4e>
	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

	if (htim->State == HAL_TIM_STATE_RESET) {
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d106      	bne.n	8000534 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 800052e:	6878      	ldr	r0, [r7, #4]
 8000530:	f000 f816 	bl	8000560 <HAL_TIM_Base_MspInit>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2202      	movs	r2, #2
 8000538:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3304      	adds	r3, #4
 8000544:	4619      	mov	r1, r3
 8000546:	4610      	mov	r0, r2
 8000548:	f000 f960 	bl	800080c <TIM_Base_SetConfig>

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2201      	movs	r2, #1
 8000550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	return HAL_OK;
 8000554:	2300      	movs	r3, #0
}
 8000556:	4618      	mov	r0, r3
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop

08000560 <HAL_TIM_Base_MspInit>:
 * @brief  Initializes the TIM Base MSP.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim) {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIM_Base_MspInit could be implemented in the user file
	 */
}
 8000568:	bf00      	nop
 800056a:	370c      	adds	r7, #12
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <HAL_TIM_Base_Start_IT>:
 * @brief  Starts the TIM Base generation in interrupt mode.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim) {
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Enable the TIM Update interrupt */
	__HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	687a      	ldr	r2, [r7, #4]
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	68d2      	ldr	r2, [r2, #12]
 8000586:	f042 0201 	orr.w	r2, r2, #1
 800058a:	60da      	str	r2, [r3, #12]

	/* Enable the Peripheral */
	__HAL_TIM_ENABLE(htim);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	687a      	ldr	r2, [r7, #4]
 8000592:	6812      	ldr	r2, [r2, #0]
 8000594:	6812      	ldr	r2, [r2, #0]
 8000596:	f042 0201 	orr.w	r2, r2, #1
 800059a:	601a      	str	r2, [r3, #0]

	/* Return function status */
	return HAL_OK;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <HAL_TIM_IRQHandler>:
 * @brief  This function handles TIM interrupts requests.
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	/* Capture compare 1 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET) {
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	691b      	ldr	r3, [r3, #16]
 80005ba:	f003 0302 	and.w	r3, r3, #2
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d022      	beq.n	8000608 <HAL_TIM_IRQHandler+0x5c>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	f003 0302 	and.w	r3, r3, #2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d01b      	beq.n	8000608 <HAL_TIM_IRQHandler+0x5c>
			{
				__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f06f 0202 	mvn.w	r2, #2
 80005d8:	611a      	str	r2, [r3, #16]
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2201      	movs	r2, #1
 80005de:	761a      	strb	r2, [r3, #24]

				/* Input capture event */
				if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f003 0303 	and.w	r3, r3, #3
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d003      	beq.n	80005f6 <HAL_TIM_IRQHandler+0x4a>
					HAL_TIM_IC_CaptureCallback(htim);
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f000 f8ee 	bl	80007d0 <HAL_TIM_IC_CaptureCallback>
 80005f4:	e005      	b.n	8000602 <HAL_TIM_IRQHandler+0x56>
				}
				/* Output compare event */
				else {
					HAL_TIM_OC_DelayElapsedCallback(htim);
 80005f6:	6878      	ldr	r0, [r7, #4]
 80005f8:	f000 f8e0 	bl	80007bc <HAL_TIM_OC_DelayElapsedCallback>
					HAL_TIM_PWM_PulseFinishedCallback(htim);
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f8f1 	bl	80007e4 <HAL_TIM_PWM_PulseFinishedCallback>
				}
				htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2200      	movs	r2, #0
 8000606:	761a      	strb	r2, [r3, #24]
			}
		}
	}
	/* Capture compare 2 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET) {
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	f003 0304 	and.w	r3, r3, #4
 8000612:	2b00      	cmp	r3, #0
 8000614:	d022      	beq.n	800065c <HAL_TIM_IRQHandler+0xb0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET) {
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	2b00      	cmp	r3, #0
 8000622:	d01b      	beq.n	800065c <HAL_TIM_IRQHandler+0xb0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f06f 0204 	mvn.w	r2, #4
 800062c:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2202      	movs	r2, #2
 8000632:	761a      	strb	r2, [r3, #24]
			/* Input capture event */
			if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800063e:	2b00      	cmp	r3, #0
 8000640:	d003      	beq.n	800064a <HAL_TIM_IRQHandler+0x9e>
				HAL_TIM_IC_CaptureCallback(htim);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f8c4 	bl	80007d0 <HAL_TIM_IC_CaptureCallback>
 8000648:	e005      	b.n	8000656 <HAL_TIM_IRQHandler+0xaa>
			}
			/* Output compare event */
			else {
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f8b6 	bl	80007bc <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f000 f8c7 	bl	80007e4 <HAL_TIM_PWM_PulseFinishedCallback>
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
		}
	}
	/* Capture compare 3 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET) {
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	691b      	ldr	r3, [r3, #16]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d022      	beq.n	80006b0 <HAL_TIM_IRQHandler+0x104>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	68db      	ldr	r3, [r3, #12]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	2b00      	cmp	r3, #0
 8000676:	d01b      	beq.n	80006b0 <HAL_TIM_IRQHandler+0x104>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f06f 0208 	mvn.w	r2, #8
 8000680:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2204      	movs	r2, #4
 8000686:	761a      	strb	r2, [r3, #24]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	f003 0303 	and.w	r3, r3, #3
 8000692:	2b00      	cmp	r3, #0
 8000694:	d003      	beq.n	800069e <HAL_TIM_IRQHandler+0xf2>
				HAL_TIM_IC_CaptureCallback(htim);
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f000 f89a 	bl	80007d0 <HAL_TIM_IC_CaptureCallback>
 800069c:	e005      	b.n	80006aa <HAL_TIM_IRQHandler+0xfe>
			}
			/* Output compare event */
			else {
				HAL_TIM_OC_DelayElapsedCallback(htim);
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f88c 	bl	80007bc <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f89d 	bl	80007e4 <HAL_TIM_PWM_PulseFinishedCallback>
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	761a      	strb	r2, [r3, #24]
		}
	}
	/* Capture compare 4 event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	f003 0310 	and.w	r3, r3, #16
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d022      	beq.n	8000704 <HAL_TIM_IRQHandler+0x158>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET) {
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	f003 0310 	and.w	r3, r3, #16
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d01b      	beq.n	8000704 <HAL_TIM_IRQHandler+0x158>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f06f 0210 	mvn.w	r2, #16
 80006d4:	611a      	str	r2, [r3, #16]
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2208      	movs	r2, #8
 80006da:	761a      	strb	r2, [r3, #24]
			/* Input capture event */
			if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d003      	beq.n	80006f2 <HAL_TIM_IRQHandler+0x146>
				HAL_TIM_IC_CaptureCallback(htim);
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f870 	bl	80007d0 <HAL_TIM_IC_CaptureCallback>
 80006f0:	e005      	b.n	80006fe <HAL_TIM_IRQHandler+0x152>
			}
			/* Output compare event */
			else {
				HAL_TIM_OC_DelayElapsedCallback(htim);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f000 f862 	bl	80007bc <HAL_TIM_OC_DelayElapsedCallback>
				HAL_TIM_PWM_PulseFinishedCallback(htim);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f000 f873 	bl	80007e4 <HAL_TIM_PWM_PulseFinishedCallback>
			}
			htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	761a      	strb	r2, [r3, #24]
		}
	}
	/* TIM Update event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	2b00      	cmp	r3, #0
 8000710:	d00e      	beq.n	8000730 <HAL_TIM_IRQHandler+0x184>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET) {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b00      	cmp	r3, #0
 800071e:	d007      	beq.n	8000730 <HAL_TIM_IRQHandler+0x184>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f06f 0201 	mvn.w	r2, #1
 8000728:	611a      	str	r2, [r3, #16]
			HAL_TIM_PeriodElapsedCallback(htim);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fec4 	bl	80004b8 <HAL_TIM_PeriodElapsedCallback>
		}
	}
	/* TIM Break input event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET) {
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	691b      	ldr	r3, [r3, #16]
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00e      	beq.n	800075c <HAL_TIM_IRQHandler+0x1b0>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET) {
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000748:	2b00      	cmp	r3, #0
 800074a:	d007      	beq.n	800075c <HAL_TIM_IRQHandler+0x1b0>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000754:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_BreakCallback(htim);
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff fecc 	bl	80004f4 <HAL_TIMEx_BreakCallback>
		}
	}
	/* TIM Trigger detection event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	691b      	ldr	r3, [r3, #16]
 8000762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000766:	2b00      	cmp	r3, #0
 8000768:	d00e      	beq.n	8000788 <HAL_TIM_IRQHandler+0x1dc>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000774:	2b00      	cmp	r3, #0
 8000776:	d007      	beq.n	8000788 <HAL_TIM_IRQHandler+0x1dc>
			__HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000780:	611a      	str	r2, [r3, #16]
			HAL_TIM_TriggerCallback(htim);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 f838 	bl	80007f8 <HAL_TIM_TriggerCallback>
		}
	}
	/* TIM commutation event */
	if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	691b      	ldr	r3, [r3, #16]
 800078e:	f003 0320 	and.w	r3, r3, #32
 8000792:	2b00      	cmp	r3, #0
 8000794:	d00e      	beq.n	80007b4 <HAL_TIM_IRQHandler+0x208>
		if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET) {
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f003 0320 	and.w	r3, r3, #32
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d007      	beq.n	80007b4 <HAL_TIM_IRQHandler+0x208>
			__HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f06f 0220 	mvn.w	r2, #32
 80007ac:	611a      	str	r2, [r3, #16]
			HAL_TIMEx_CommutationCallback(htim);
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff fe96 	bl	80004e0 <HAL_TIMEx_CommutationCallback>
		}
	}
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_TIM_OC_DelayElapsedCallback>:
 * @brief  Output Compare callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
	 */
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <HAL_TIM_IC_CaptureCallback>:
 * @brief  Input Capture callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
	 */
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <HAL_TIM_PWM_PulseFinishedCallback>:
 * @brief  PWM Pulse finished callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
	 */
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <HAL_TIM_TriggerCallback>:
 * @brief  Hall Trigger detection callback in non blocking mode 
 * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
 *                the configuration information for TIM module.
 * @retval None
 */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim) {
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(htim);
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_TIM_TriggerCallback could be implemented in the user file
	 */
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx: TIM peripheral
 * @param  Structure: pointer on TIM Time Base required parameters  
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1 = 0U;
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
	tmpcr1 = TIMx->CR1;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_CC3_INSTANCE(TIMx) != RESET) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a44      	ldr	r2, [pc, #272]	; (8000934 <TIM_Base_SetConfig+0x128>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d013      	beq.n	8000850 <TIM_Base_SetConfig+0x44>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800082e:	d00f      	beq.n	8000850 <TIM_Base_SetConfig+0x44>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a41      	ldr	r2, [pc, #260]	; (8000938 <TIM_Base_SetConfig+0x12c>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d00b      	beq.n	8000850 <TIM_Base_SetConfig+0x44>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a40      	ldr	r2, [pc, #256]	; (800093c <TIM_Base_SetConfig+0x130>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d007      	beq.n	8000850 <TIM_Base_SetConfig+0x44>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a3f      	ldr	r2, [pc, #252]	; (8000940 <TIM_Base_SetConfig+0x134>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d003      	beq.n	8000850 <TIM_Base_SetConfig+0x44>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4a3e      	ldr	r2, [pc, #248]	; (8000944 <TIM_Base_SetConfig+0x138>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d101      	bne.n	8000854 <TIM_Base_SetConfig+0x48>
 8000850:	2301      	movs	r3, #1
 8000852:	e000      	b.n	8000856 <TIM_Base_SetConfig+0x4a>
 8000854:	2300      	movs	r3, #0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d008      	beq.n	800086c <TIM_Base_SetConfig+0x60>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000860:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4313      	orrs	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CC1_INSTANCE(TIMx) != RESET) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a31      	ldr	r2, [pc, #196]	; (8000934 <TIM_Base_SetConfig+0x128>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d02b      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800087a:	d027      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <TIM_Base_SetConfig+0x12c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d023      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a2d      	ldr	r2, [pc, #180]	; (800093c <TIM_Base_SetConfig+0x130>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d01f      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a2c      	ldr	r2, [pc, #176]	; (8000940 <TIM_Base_SetConfig+0x134>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d01b      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a2b      	ldr	r2, [pc, #172]	; (8000944 <TIM_Base_SetConfig+0x138>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d017      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a2a      	ldr	r2, [pc, #168]	; (8000948 <TIM_Base_SetConfig+0x13c>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d013      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a29      	ldr	r2, [pc, #164]	; (800094c <TIM_Base_SetConfig+0x140>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d00f      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a28      	ldr	r2, [pc, #160]	; (8000950 <TIM_Base_SetConfig+0x144>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d00b      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4a27      	ldr	r2, [pc, #156]	; (8000954 <TIM_Base_SetConfig+0x148>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d007      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a26      	ldr	r2, [pc, #152]	; (8000958 <TIM_Base_SetConfig+0x14c>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d003      	beq.n	80008cc <TIM_Base_SetConfig+0xc0>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4a25      	ldr	r2, [pc, #148]	; (800095c <TIM_Base_SetConfig+0x150>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d101      	bne.n	80008d0 <TIM_Base_SetConfig+0xc4>
 80008cc:	2301      	movs	r3, #1
 80008ce:	e000      	b.n	80008d2 <TIM_Base_SetConfig+0xc6>
 80008d0:	2300      	movs	r3, #0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d008      	beq.n	80008e8 <TIM_Base_SetConfig+0xdc>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008dc:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
	}

	TIMx->CR1 = tmpcr1;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	601a      	str	r2, [r3, #0]

	/* Set the Auto-reload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	689a      	ldr	r2, [r3, #8]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = (uint32_t) Structure->Prescaler;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET) {
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a0c      	ldr	r2, [pc, #48]	; (8000934 <TIM_Base_SetConfig+0x128>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d003      	beq.n	800090e <TIM_Base_SetConfig+0x102>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <TIM_Base_SetConfig+0x138>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d101      	bne.n	8000912 <TIM_Base_SetConfig+0x106>
 800090e:	2301      	movs	r3, #1
 8000910:	e000      	b.n	8000914 <TIM_Base_SetConfig+0x108>
 8000912:	2300      	movs	r3, #0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d003      	beq.n	8000920 <TIM_Base_SetConfig+0x114>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler 
	 and the repetition counter(only for TIM1 and TIM8) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2201      	movs	r2, #1
 8000924:	615a      	str	r2, [r3, #20]
}
 8000926:	bf00      	nop
 8000928:	3714      	adds	r7, #20
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40010000 	.word	0x40010000
 8000938:	40000400 	.word	0x40000400
 800093c:	40000800 	.word	0x40000800
 8000940:	40000c00 	.word	0x40000c00
 8000944:	40010400 	.word	0x40010400
 8000948:	40014000 	.word	0x40014000
 800094c:	40014400 	.word	0x40014400
 8000950:	40014800 	.word	0x40014800
 8000954:	40001800 	.word	0x40001800
 8000958:	40001c00 	.word	0x40001c00
 800095c:	40002000 	.word	0x40002000

08000960 <HAL_RCC_OscConfig>:
 *         first and then HSE On or HSE Bypass.
 
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(
		RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b098      	sub	sp, #96	; 0x60
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8000968:	2300      	movs	r3, #0
 800096a:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f003 0301 	and.w	r3, r3, #1
 8000974:	2b00      	cmp	r3, #0
 8000976:	d04f      	beq.n	8000a18 <HAL_RCC_OscConfig+0xb8>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000978:	4ba4      	ldr	r3, [pc, #656]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f003 030c 	and.w	r3, r3, #12
 8000980:	2b04      	cmp	r3, #4
 8000982:	d00b      	beq.n	800099c <HAL_RCC_OscConfig+0x3c>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000984:	4ba1      	ldr	r3, [pc, #644]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f003 030c 	and.w	r3, r3, #12
 800098c:	2b08      	cmp	r3, #8
 800098e:	d111      	bne.n	80009b4 <HAL_RCC_OscConfig+0x54>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8000990:	4b9e      	ldr	r3, [pc, #632]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00b      	beq.n	80009b4 <HAL_RCC_OscConfig+0x54>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800099c:	4b9b      	ldr	r3, [pc, #620]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d036      	beq.n	8000a16 <HAL_RCC_OscConfig+0xb6>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d132      	bne.n	8000a16 <HAL_RCC_OscConfig+0xb6>
				return HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e1f6      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009b4:	4a96      	ldr	r2, [pc, #600]	; (8000c10 <HAL_RCC_OscConfig+0x2b0>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	7013      	strb	r3, [r2, #0]

			/* Check the HSE State */
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d013      	beq.n	80009ee <HAL_RCC_OscConfig+0x8e>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80009c6:	f000 fcfd 	bl	80013c4 <HAL_GetTick>
 80009ca:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80009cc:	e008      	b.n	80009e0 <HAL_RCC_OscConfig+0x80>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80009ce:	f000 fcf9 	bl	80013c4 <HAL_GetTick>
 80009d2:	4602      	mov	r2, r0
 80009d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	2b64      	cmp	r3, #100	; 0x64
 80009da:	d901      	bls.n	80009e0 <HAL_RCC_OscConfig+0x80>
						return HAL_TIMEOUT;
 80009dc:	2303      	movs	r3, #3
 80009de:	e1e0      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>
			if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF) {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 80009e0:	4b8a      	ldr	r3, [pc, #552]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0f0      	beq.n	80009ce <HAL_RCC_OscConfig+0x6e>
 80009ec:	e014      	b.n	8000a18 <HAL_RCC_OscConfig+0xb8>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80009ee:	f000 fce9 	bl	80013c4 <HAL_GetTick>
 80009f2:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 80009f4:	e008      	b.n	8000a08 <HAL_RCC_OscConfig+0xa8>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 80009f6:	f000 fce5 	bl	80013c4 <HAL_GetTick>
 80009fa:	4602      	mov	r2, r0
 80009fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	2b64      	cmp	r3, #100	; 0x64
 8000a02:	d901      	bls.n	8000a08 <HAL_RCC_OscConfig+0xa8>
						return HAL_TIMEOUT;
 8000a04:	2303      	movs	r3, #3
 8000a06:	e1cc      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8000a08:	4b80      	ldr	r3, [pc, #512]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f0      	bne.n	80009f6 <HAL_RCC_OscConfig+0x96>
 8000a14:	e000      	b.n	8000a18 <HAL_RCC_OscConfig+0xb8>
		/* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a16:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f003 0302 	and.w	r3, r3, #2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f000 8082 	beq.w	8000b2a <HAL_RCC_OscConfig+0x1ca>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000a26:	4b79      	ldr	r3, [pc, #484]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f003 030c 	and.w	r3, r3, #12
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00b      	beq.n	8000a4a <HAL_RCC_OscConfig+0xea>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000a32:	4b76      	ldr	r3, [pc, #472]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	f003 030c 	and.w	r3, r3, #12
 8000a3a:	2b08      	cmp	r3, #8
 8000a3c:	d12b      	bne.n	8000a96 <HAL_RCC_OscConfig+0x136>
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 8000a3e:	4b73      	ldr	r3, [pc, #460]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d125      	bne.n	8000a96 <HAL_RCC_OscConfig+0x136>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a4a:	4b70      	ldr	r3, [pc, #448]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d005      	beq.n	8000a62 <HAL_RCC_OscConfig+0x102>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d001      	beq.n	8000a62 <HAL_RCC_OscConfig+0x102>
				return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e19f      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8000a62:	486a      	ldr	r0, [pc, #424]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000a64:	4b69      	ldr	r3, [pc, #420]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	21f8      	movs	r1, #248	; 0xf8
 8000a72:	64f9      	str	r1, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000a76:	fa91 f1a1 	rbit	r1, r1
 8000a7a:	62f9      	str	r1, [r7, #44]	; 0x2c
   return(result);
 8000a7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000a7e:	6379      	str	r1, [r7, #52]	; 0x34
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8000a80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a82:	fab1 f181 	clz	r1, r1
 8000a86:	f887 1033 	strb.w	r1, [r7, #51]	; 0x33
  return(result);
 8000a8a:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8000a8e:	408b      	lsls	r3, r1
 8000a90:	4313      	orrs	r3, r2
 8000a92:	6003      	str	r3, [r0, #0]
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a94:	e049      	b.n	8000b2a <HAL_RCC_OscConfig+0x1ca>
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d02f      	beq.n	8000afe <HAL_RCC_OscConfig+0x19e>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8000a9e:	4b5d      	ldr	r3, [pc, #372]	; (8000c14 <HAL_RCC_OscConfig+0x2b4>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8000aa4:	f000 fc8e 	bl	80013c4 <HAL_GetTick>
 8000aa8:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8000aaa:	e008      	b.n	8000abe <HAL_RCC_OscConfig+0x15e>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8000aac:	f000 fc8a 	bl	80013c4 <HAL_GetTick>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d901      	bls.n	8000abe <HAL_RCC_OscConfig+0x15e>
						return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e171      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8000abe:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f0      	beq.n	8000aac <HAL_RCC_OscConfig+0x14c>
						return HAL_TIMEOUT;
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 8000aca:	4850      	ldr	r0, [pc, #320]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000acc:	4b4f      	ldr	r3, [pc, #316]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	21f8      	movs	r1, #248	; 0xf8
 8000ada:	6579      	str	r1, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000adc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000ade:	fa91 f1a1 	rbit	r1, r1
 8000ae2:	6279      	str	r1, [r7, #36]	; 0x24
   return(result);
 8000ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ae6:	6539      	str	r1, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8000ae8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000aea:	fab1 f181 	clz	r1, r1
 8000aee:	f887 102b 	strb.w	r1, [r7, #43]	; 0x2b
  return(result);
 8000af2:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 8000af6:	408b      	lsls	r3, r1
 8000af8:	4313      	orrs	r3, r2
 8000afa:	6003      	str	r3, [r0, #0]
 8000afc:	e015      	b.n	8000b2a <HAL_RCC_OscConfig+0x1ca>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8000afe:	4b45      	ldr	r3, [pc, #276]	; (8000c14 <HAL_RCC_OscConfig+0x2b4>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8000b04:	f000 fc5e 	bl	80013c4 <HAL_GetTick>
 8000b08:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8000b0a:	e008      	b.n	8000b1e <HAL_RCC_OscConfig+0x1be>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8000b0c:	f000 fc5a 	bl	80013c4 <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d901      	bls.n	8000b1e <HAL_RCC_OscConfig+0x1be>
						return HAL_TIMEOUT;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	e141      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8000b1e:	4b3b      	ldr	r3, [pc, #236]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d1f0      	bne.n	8000b0c <HAL_RCC_OscConfig+0x1ac>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d030      	beq.n	8000b98 <HAL_RCC_OscConfig+0x238>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d016      	beq.n	8000b6c <HAL_RCC_OscConfig+0x20c>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8000b3e:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <HAL_RCC_OscConfig+0x2b8>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8000b44:	f000 fc3e 	bl	80013c4 <HAL_GetTick>
 8000b48:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8000b4a:	e008      	b.n	8000b5e <HAL_RCC_OscConfig+0x1fe>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8000b4c:	f000 fc3a 	bl	80013c4 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d901      	bls.n	8000b5e <HAL_RCC_OscConfig+0x1fe>
					return HAL_TIMEOUT;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e121      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>

			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f0      	beq.n	8000b4c <HAL_RCC_OscConfig+0x1ec>
 8000b6a:	e015      	b.n	8000b98 <HAL_RCC_OscConfig+0x238>
					return HAL_TIMEOUT;
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <HAL_RCC_OscConfig+0x2b8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8000b72:	f000 fc27 	bl	80013c4 <HAL_GetTick>
 8000b76:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8000b78:	e008      	b.n	8000b8c <HAL_RCC_OscConfig+0x22c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8000b7a:	f000 fc23 	bl	80013c4 <HAL_GetTick>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d901      	bls.n	8000b8c <HAL_RCC_OscConfig+0x22c>
					return HAL_TIMEOUT;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	e10a      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>

			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f0      	bne.n	8000b7a <HAL_RCC_OscConfig+0x21a>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d066      	beq.n	8000c72 <HAL_RCC_OscConfig+0x312>
			== RCC_OSCILLATORTYPE_LSE) {
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_RCC_OscConfig+0x2ac>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]

		/* Enable write access to Backup domain */
		PWR->CR |= PWR_CR_DBP;
 8000bc0:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_RCC_OscConfig+0x2bc>)
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_RCC_OscConfig+0x2bc>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bca:	6013      	str	r3, [r2, #0]

		/* Wait for Backup domain Write protection enable */
		tickstart = HAL_GetTick();
 8000bcc:	f000 fbfa 	bl	80013c4 <HAL_GetTick>
 8000bd0:	65f8      	str	r0, [r7, #92]	; 0x5c

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0x286>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8000bd4:	f000 fbf6 	bl	80013c4 <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0x286>
				return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e0dd      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>
		PWR->CR |= PWR_CR_DBP;

		/* Wait for Backup domain Write protection enable */
		tickstart = HAL_GetTick();

		while ((PWR->CR & PWR_CR_DBP) == RESET) {
 8000be6:	4b0d      	ldr	r3, [pc, #52]	; (8000c1c <HAL_RCC_OscConfig+0x2bc>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f0      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x274>
				return HAL_TIMEOUT;
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bf2:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_RCC_OscConfig+0x2c0>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	7013      	strb	r3, [r2, #0]
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d021      	beq.n	8000c48 <HAL_RCC_OscConfig+0x2e8>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8000c04:	f000 fbde 	bl	80013c4 <HAL_GetTick>
 8000c08:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8000c0a:	e016      	b.n	8000c3a <HAL_RCC_OscConfig+0x2da>
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40023802 	.word	0x40023802
 8000c14:	42470000 	.word	0x42470000
 8000c18:	42470e80 	.word	0x42470e80
 8000c1c:	40007000 	.word	0x40007000
 8000c20:	40023870 	.word	0x40023870
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8000c24:	f000 fbce 	bl	80013c4 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d901      	bls.n	8000c3a <HAL_RCC_OscConfig+0x2da>
					return HAL_TIMEOUT;
 8000c36:	2303      	movs	r3, #3
 8000c38:	e0b3      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8000c3a:	4b5c      	ldr	r3, [pc, #368]	; (8000dac <HAL_RCC_OscConfig+0x44c>)
 8000c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d0ee      	beq.n	8000c24 <HAL_RCC_OscConfig+0x2c4>
 8000c46:	e014      	b.n	8000c72 <HAL_RCC_OscConfig+0x312>
					return HAL_TIMEOUT;
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 8000c48:	f000 fbbc 	bl	80013c4 <HAL_GetTick>
 8000c4c:	65f8      	str	r0, [r7, #92]	; 0x5c

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8000c4e:	e00a      	b.n	8000c66 <HAL_RCC_OscConfig+0x306>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8000c50:	f000 fbb8 	bl	80013c4 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x306>
					return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e09d      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8000c66:	4b51      	ldr	r3, [pc, #324]	; (8000dac <HAL_RCC_OscConfig+0x44c>)
 8000c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1ee      	bne.n	8000c50 <HAL_RCC_OscConfig+0x2f0>
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	f000 8092 	beq.w	8000da0 <HAL_RCC_OscConfig+0x440>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL) {
 8000c7c:	4b4b      	ldr	r3, [pc, #300]	; (8000dac <HAL_RCC_OscConfig+0x44c>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	f003 030c 	and.w	r3, r3, #12
 8000c84:	2b08      	cmp	r3, #8
 8000c86:	f000 8089 	beq.w	8000d9c <HAL_RCC_OscConfig+0x43c>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d16d      	bne.n	8000d6e <HAL_RCC_OscConfig+0x40e>
				assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
				assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
				assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8000c92:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <HAL_RCC_OscConfig+0x450>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8000c98:	f000 fb94 	bl	80013c4 <HAL_GetTick>
 8000c9c:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8000c9e:	e008      	b.n	8000cb2 <HAL_RCC_OscConfig+0x352>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8000ca0:	f000 fb90 	bl	80013c4 <HAL_GetTick>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d901      	bls.n	8000cb2 <HAL_RCC_OscConfig+0x352>
						return HAL_TIMEOUT;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e077      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8000cb2:	4b3e      	ldr	r3, [pc, #248]	; (8000dac <HAL_RCC_OscConfig+0x44c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f0      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x340>
						return HAL_TIMEOUT;
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
				WRITE_REG(RCC->PLLCFGR,
 8000cbe:	483b      	ldr	r0, [pc, #236]	; (8000dac <HAL_RCC_OscConfig+0x44c>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	69da      	ldr	r2, [r3, #28]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a1b      	ldr	r3, [r3, #32]
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cce:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000cd2:	64b9      	str	r1, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cd4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000cd6:	fa91 f1a1 	rbit	r1, r1
 8000cda:	60f9      	str	r1, [r7, #12]
   return(result);
 8000cdc:	68f9      	ldr	r1, [r7, #12]
 8000cde:	6479      	str	r1, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8000ce0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8000ce2:	fab1 f181 	clz	r1, r1
 8000ce6:	74f9      	strb	r1, [r7, #19]
  return(result);
 8000ce8:	7cf9      	ldrb	r1, [r7, #19]
 8000cea:	408b      	lsls	r3, r1
 8000cec:	431a      	orrs	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 8000cfa:	6439      	str	r1, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000cfe:	fa91 f1a1 	rbit	r1, r1
 8000d02:	6179      	str	r1, [r7, #20]
   return(result);
 8000d04:	6979      	ldr	r1, [r7, #20]
 8000d06:	63f9      	str	r1, [r7, #60]	; 0x3c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8000d08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d0a:	fab1 f181 	clz	r1, r1
 8000d0e:	76f9      	strb	r1, [r7, #27]
  return(result);
 8000d10:	7ef9      	ldrb	r1, [r7, #27]
 8000d12:	408b      	lsls	r3, r1
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000d1e:	63b9      	str	r1, [r7, #56]	; 0x38
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000d22:	fa91 f1a1 	rbit	r1, r1
 8000d26:	61f9      	str	r1, [r7, #28]
   return(result);
 8000d28:	69f9      	ldr	r1, [r7, #28]
 8000d2a:	65b9      	str	r1, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8000d2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d2e:	fab1 f181 	clz	r1, r1
 8000d32:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
  return(result);
 8000d36:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000d3a:	408b      	lsls	r3, r1
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	6043      	str	r3, [r0, #4]
								| (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)
										<< POSITION_VAL(RCC_PLLCFGR_PLLP))
								| (RCC_OscInitStruct->PLL.PLLQ
										<< POSITION_VAL(RCC_PLLCFGR_PLLQ))));
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8000d40:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <HAL_RCC_OscConfig+0x450>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8000d46:	f000 fb3d 	bl	80013c4 <HAL_GetTick>
 8000d4a:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8000d4c:	e008      	b.n	8000d60 <HAL_RCC_OscConfig+0x400>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8000d4e:	f000 fb39 	bl	80013c4 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d901      	bls.n	8000d60 <HAL_RCC_OscConfig+0x400>
						return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e020      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_RCC_OscConfig+0x44c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0f0      	beq.n	8000d4e <HAL_RCC_OscConfig+0x3ee>
 8000d6c:	e018      	b.n	8000da0 <HAL_RCC_OscConfig+0x440>
						return HAL_TIMEOUT;
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_RCC_OscConfig+0x450>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8000d74:	f000 fb26 	bl	80013c4 <HAL_GetTick>
 8000d78:	65f8      	str	r0, [r7, #92]	; 0x5c

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8000d7a:	e008      	b.n	8000d8e <HAL_RCC_OscConfig+0x42e>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8000d7c:	f000 fb22 	bl	80013c4 <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d901      	bls.n	8000d8e <HAL_RCC_OscConfig+0x42e>
						return HAL_TIMEOUT;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e009      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>

				/* Get Start Tick*/
				tickstart = HAL_GetTick();

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_RCC_OscConfig+0x44c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d1f0      	bne.n	8000d7c <HAL_RCC_OscConfig+0x41c>
 8000d9a:	e001      	b.n	8000da0 <HAL_RCC_OscConfig+0x440>
						return HAL_TIMEOUT;
					}
				}
			}
		} else {
			return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <HAL_RCC_OscConfig+0x442>
		}
	}
	return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3760      	adds	r7, #96	; 0x60
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40023800 	.word	0x40023800
 8000db0:	42470060 	.word	0x42470060

08000db4 <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = 0U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
	 must be correctly programmed according to the frequency of the CPU clock 
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > (FLASH->ACR & FLASH_ACR_LATENCY)) {
 8000dc2:	4b73      	ldr	r3, [pc, #460]	; (8000f90 <HAL_RCC_ClockConfig+0x1dc>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f003 020f 	and.w	r2, r3, #15
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d20c      	bcs.n	8000dea <HAL_RCC_ClockConfig+0x36>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8000dd0:	4b6f      	ldr	r3, [pc, #444]	; (8000f90 <HAL_RCC_ClockConfig+0x1dc>)
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8000dd8:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <HAL_RCC_ClockConfig+0x1dc>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 020f 	and.w	r2, r3, #15
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d001      	beq.n	8000dea <HAL_RCC_ClockConfig+0x36>
			return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e0ce      	b.n	8000f88 <HAL_RCC_ClockConfig+0x1d4>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d008      	beq.n	8000e08 <HAL_RCC_ClockConfig+0x54>
			== RCC_CLOCKTYPE_HCLK) {
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000df6:	4967      	ldr	r1, [pc, #412]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000df8:	4b66      	ldr	r3, [pc, #408]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f000 8082 	beq.w	8000f1a <HAL_RCC_ClockConfig+0x166>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d107      	bne.n	8000e2e <HAL_RCC_ClockConfig+0x7a>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8000e1e:	4b5d      	ldr	r3, [pc, #372]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d119      	bne.n	8000e5e <HAL_RCC_ClockConfig+0xaa>
				return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0ac      	b.n	8000f88 <HAL_RCC_ClockConfig+0x1d4>
			}
		}
		/* PLL is selected as System Clock Source */
		else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d003      	beq.n	8000e3e <HAL_RCC_ClockConfig+0x8a>
				|| (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d107      	bne.n	8000e4e <HAL_RCC_ClockConfig+0x9a>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8000e3e:	4b55      	ldr	r3, [pc, #340]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d109      	bne.n	8000e5e <HAL_RCC_ClockConfig+0xaa>
				return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e09c      	b.n	8000f88 <HAL_RCC_ClockConfig+0x1d4>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8000e4e:	4b51      	ldr	r3, [pc, #324]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <HAL_RCC_ClockConfig+0xaa>
				return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e094      	b.n	8000f88 <HAL_RCC_ClockConfig+0x1d4>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e5e:	494d      	ldr	r1, [pc, #308]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000e60:	4b4c      	ldr	r3, [pc, #304]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f023 0203 	bic.w	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	608b      	str	r3, [r1, #8]
		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8000e70:	f000 faa8 	bl	80013c4 <HAL_GetTick>
 8000e74:	60f8      	str	r0, [r7, #12]

		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d112      	bne.n	8000ea4 <HAL_RCC_ClockConfig+0xf0>
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE) {
 8000e7e:	e00a      	b.n	8000e96 <HAL_RCC_ClockConfig+0xe2>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8000e80:	f000 faa0 	bl	80013c4 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_ClockConfig+0xe2>
					return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e078      	b.n	8000f88 <HAL_RCC_ClockConfig+0x1d4>
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
		/* Get Start Tick*/
		tickstart = HAL_GetTick();

		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE) {
 8000e96:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d1ee      	bne.n	8000e80 <HAL_RCC_ClockConfig+0xcc>
 8000ea2:	e03a      	b.n	8000f1a <HAL_RCC_ClockConfig+0x166>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d112      	bne.n	8000ed2 <HAL_RCC_ClockConfig+0x11e>
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8000eac:	e00a      	b.n	8000ec4 <HAL_RCC_ClockConfig+0x110>
					!= RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8000eae:	f000 fa89 	bl	80013c4 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_ClockConfig+0x110>
					return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e061      	b.n	8000f88 <HAL_RCC_ClockConfig+0x1d4>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8000ec4:	4b33      	ldr	r3, [pc, #204]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d1ee      	bne.n	8000eae <HAL_RCC_ClockConfig+0xfa>
 8000ed0:	e023      	b.n	8000f1a <HAL_RCC_ClockConfig+0x166>
					!= RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d119      	bne.n	8000f0e <HAL_RCC_ClockConfig+0x15a>
				== RCC_SYSCLKSOURCE_PLLRCLK) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8000eda:	e00a      	b.n	8000ef2 <HAL_RCC_ClockConfig+0x13e>
					!= RCC_SYSCLKSOURCE_STATUS_PLLRCLK) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8000edc:	f000 fa72 	bl	80013c4 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_ClockConfig+0x13e>
					return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e04a      	b.n	8000f88 <HAL_RCC_ClockConfig+0x1d4>
					return HAL_TIMEOUT;
				}
			}
		} else if (RCC_ClkInitStruct->SYSCLKSource
				== RCC_SYSCLKSOURCE_PLLRCLK) {
			while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	e7f1      	b.n	8000edc <HAL_RCC_ClockConfig+0x128>
					return HAL_TIMEOUT;
				}
			}
		} else {
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8000ef8:	f000 fa64 	bl	80013c4 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_ClockConfig+0x15a>
					return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e03c      	b.n	8000f88 <HAL_RCC_ClockConfig+0x1d4>
				if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
					return HAL_TIMEOUT;
				}
			}
		} else {
			while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 030c 	and.w	r3, r3, #12
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1ee      	bne.n	8000ef8 <HAL_RCC_ClockConfig+0x144>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < (FLASH->ACR & FLASH_ACR_LATENCY)) {
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <HAL_RCC_ClockConfig+0x1dc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 020f 	and.w	r2, r3, #15
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d90c      	bls.n	8000f42 <HAL_RCC_ClockConfig+0x18e>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8000f28:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_RCC_ClockConfig+0x1dc>)
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	701a      	strb	r2, [r3, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency) {
 8000f30:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <HAL_RCC_ClockConfig+0x1dc>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 020f 	and.w	r2, r3, #15
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d001      	beq.n	8000f42 <HAL_RCC_ClockConfig+0x18e>
			return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e022      	b.n	8000f88 <HAL_RCC_ClockConfig+0x1d4>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d008      	beq.n	8000f60 <HAL_RCC_ClockConfig+0x1ac>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8000f4e:	4911      	ldr	r1, [pc, #68]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000f50:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d009      	beq.n	8000f80 <HAL_RCC_ClockConfig+0x1cc>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8000f6c:	4909      	ldr	r1, [pc, #36]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_RCC_ClockConfig+0x1e0>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
	}

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(TICK_INT_PRIORITY);
 8000f80:	200f      	movs	r0, #15
 8000f82:	f7ff fa35 	bl	80003f0 <HAL_InitTick>

	return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023c00 	.word	0x40023c00
 8000f94:	40023800 	.word	0x40023800

08000f98 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *         
 *               
 * @retval SYSCLK frequency
 */
__weak uint32_t HAL_RCC_GetSysClockFreq(void) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b091      	sub	sp, #68	; 0x44
 8000f9c:	af00      	add	r7, sp, #0
uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	633b      	str	r3, [r7, #48]	; 0x30
uint32_t sysclockfreq = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	63bb      	str	r3, [r7, #56]	; 0x38

/* Get SYSCLK source -------------------------------------------------------*/
switch (RCC->CFGR & RCC_CFGR_SWS) {
 8000fae:	4b3c      	ldr	r3, [pc, #240]	; (80010a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d006      	beq.n	8000fc8 <HAL_RCC_GetSysClockFreq+0x30>
 8000fba:	2b08      	cmp	r3, #8
 8000fbc:	d007      	beq.n	8000fce <HAL_RCC_GetSysClockFreq+0x36>
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d163      	bne.n	800108a <HAL_RCC_GetSysClockFreq+0xf2>
case RCC_CFGR_SWS_HSI: /* HSI used as system clock source */
{
sysclockfreq = HSI_VALUE;
 8000fc2:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8000fc6:	e063      	b.n	8001090 <HAL_RCC_GetSysClockFreq+0xf8>
}
case RCC_CFGR_SWS_HSE: /* HSE used as system clock  source */
{
sysclockfreq = HSE_VALUE;
 8000fc8:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8000fcc:	e060      	b.n	8001090 <HAL_RCC_GetSysClockFreq+0xf8>
}
case RCC_CFGR_SWS_PLL: /* PLL used as system clock  source */
{
/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 SYSCLK = PLL_VCO / PLLP */
pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fce:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
 8000fd8:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d01b      	beq.n	800101c <HAL_RCC_GetSysClockFreq+0x84>
	/* HSE used as PLL clock source */
	pllvco = ((HSE_VALUE / pllm)
 8000fe4:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8000fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe8:	fbb2 f2f3 	udiv	r2, r2, r3
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8000fec:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8000fee:	6859      	ldr	r1, [r3, #4]
 8000ff0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ff4:	400b      	ands	r3, r1
 8000ff6:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000ffa:	62b9      	str	r1, [r7, #40]	; 0x28
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ffe:	fa91 f1a1 	rbit	r1, r1
 8001002:	6139      	str	r1, [r7, #16]
   return(result);
 8001004:	6939      	ldr	r1, [r7, #16]
 8001006:	61b9      	str	r1, [r7, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001008:	69b9      	ldr	r1, [r7, #24]
 800100a:	fab1 f181 	clz	r1, r1
 800100e:	75f9      	strb	r1, [r7, #23]
  return(result);
 8001010:	7df9      	ldrb	r1, [r7, #23]
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001012:	40cb      	lsrs	r3, r1
/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 SYSCLK = PLL_VCO / PLLP */
pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI) {
	/* HSE used as PLL clock source */
	pllvco = ((HSE_VALUE / pllm)
 8001014:	fb03 f302 	mul.w	r3, r3, r2
 8001018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800101a:	e01a      	b.n	8001052 <HAL_RCC_GetSysClockFreq+0xba>
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
} else {
	/* HSI used as PLL clock source */
	pllvco = ((HSI_VALUE / pllm)
 800101c:	4a21      	ldr	r2, [pc, #132]	; (80010a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800101e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001020:	fbb2 f2f3 	udiv	r2, r2, r3
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800102c:	400b      	ands	r3, r1
 800102e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001032:	6239      	str	r1, [r7, #32]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	6a39      	ldr	r1, [r7, #32]
 8001036:	fa91 f1a1 	rbit	r1, r1
 800103a:	60b9      	str	r1, [r7, #8]
   return(result);
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	62f9      	str	r1, [r7, #44]	; 0x2c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001040:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001042:	fab1 f181 	clz	r1, r1
 8001046:	73f9      	strb	r1, [r7, #15]
  return(result);
 8001048:	7bf9      	ldrb	r1, [r7, #15]
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800104a:	40cb      	lsrs	r3, r1
	pllvco = ((HSE_VALUE / pllm)
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
} else {
	/* HSI used as PLL clock source */
	pllvco = ((HSI_VALUE / pllm)
 800104c:	fb03 f302 	mul.w	r3, r3, r2
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
}
pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP))
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800105a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800105e:	61fa      	str	r2, [r7, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	fa92 f2a2 	rbit	r2, r2
 8001066:	603a      	str	r2, [r7, #0]
   return(result);
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	627a      	str	r2, [r7, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800106c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106e:	fab2 f282 	clz	r2, r2
 8001072:	71fa      	strb	r2, [r7, #7]
  return(result);
 8001074:	79fa      	ldrb	r2, [r7, #7]
 8001076:	40d3      	lsrs	r3, r2
		+ 1U) * 2U);
 8001078:	3301      	adds	r3, #1
	/* HSI used as PLL clock source */
	pllvco = ((HSI_VALUE / pllm)
			* ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
					>> POSITION_VAL(RCC_PLLCFGR_PLLN)));
}
pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP))
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
		+ 1U) * 2U);

sysclockfreq = pllvco / pllp;
 800107e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 8001088:	e002      	b.n	8001090 <HAL_RCC_GetSysClockFreq+0xf8>
}
default: {
sysclockfreq = HSI_VALUE;
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800108c:	63bb      	str	r3, [r7, #56]	; 0x38
break;
 800108e:	bf00      	nop
}
}
return sysclockfreq;
 8001090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001092:	4618      	mov	r0, r3
 8001094:	3744      	adds	r7, #68	; 0x44
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	00f42400 	.word	0x00f42400
 80010a8:	007a1200 	.word	0x007a1200

080010ac <HAL_RCC_GetHCLKFreq>:
 * 
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80010b2:	f7ff ff71 	bl	8000f98 <HAL_RCC_GetSysClockFreq>
 80010b6:	4601      	mov	r1, r0
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_RCC_GetHCLKFreq+0x48>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010c0:	22f0      	movs	r2, #240	; 0xf0
 80010c2:	60fa      	str	r2, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c4:	68fa      	ldr	r2, [r7, #12]
 80010c6:	fa92 f2a2 	rbit	r2, r2
 80010ca:	603a      	str	r2, [r7, #0]
   return(result);
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	60ba      	str	r2, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	fab2 f282 	clz	r2, r2
 80010d6:	71fa      	strb	r2, [r7, #7]
  return(result);
 80010d8:	79fa      	ldrb	r2, [r7, #7]
			>> POSITION_VAL(RCC_CFGR_HPRE)];
 80010da:	40d3      	lsrs	r3, r2
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
SystemCoreClock = HAL_RCC_GetSysClockFreq()
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_RCC_GetHCLKFreq+0x4c>)
 80010de:	5cd3      	ldrb	r3, [r2, r3]
 80010e0:	fa21 f303 	lsr.w	r3, r1, r3
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
SystemCoreClock = HAL_RCC_GetSysClockFreq()
 80010e4:	4a05      	ldr	r2, [pc, #20]	; (80010fc <HAL_RCC_GetHCLKFreq+0x50>)
 80010e6:	6013      	str	r3, [r2, #0]
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)
			>> POSITION_VAL(RCC_CFGR_HPRE)];
return SystemCoreClock;
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <HAL_RCC_GetHCLKFreq+0x50>)
 80010ea:	681b      	ldr	r3, [r3, #0]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40023800 	.word	0x40023800
 80010f8:	08001458 	.word	0x08001458
 80010fc:	20000000 	.word	0x20000000

08001100 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency     
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
return (HAL_RCC_GetHCLKFreq()
 8001106:	f7ff ffd1 	bl	80010ac <HAL_RCC_GetHCLKFreq>
 800110a:	4601      	mov	r1, r0
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)
 800110c:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <HAL_RCC_GetPCLK1Freq+0x44>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001114:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001118:	60fa      	str	r2, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	fa92 f2a2 	rbit	r2, r2
 8001120:	603a      	str	r2, [r7, #0]
   return(result);
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	60ba      	str	r2, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint8_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	fab2 f282 	clz	r2, r2
 800112c:	71fa      	strb	r2, [r7, #7]
  return(result);
 800112e:	79fa      	ldrb	r2, [r7, #7]
			>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001130:	40d3      	lsrs	r3, r2
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
return (HAL_RCC_GetHCLKFreq()
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <HAL_RCC_GetPCLK1Freq+0x48>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
return (HAL_RCC_GetHCLKFreq()
 8001136:	fa21 f303 	lsr.w	r3, r1, r3
	>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)
			>> POSITION_VAL(RCC_CFGR_PPRE1)]);
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	08001458 	.word	0x08001458

0800114c <HAL_RCC_GetClockConfig>:
 * will be configured.
 * @param  pFLatency: Pointer on the Flash Latency.
 * @retval None
 */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
uint32_t *pFLatency) {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
/* Set all possible values for the Clock type parameter --------------------*/
RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	220f      	movs	r2, #15
 800115a:	601a      	str	r2, [r3, #0]
	| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

/* Get the SYSCLK configuration --------------------------------------------*/
RCC_ClkInitStruct->SYSCLKSource = (uint32_t) (RCC->CFGR & RCC_CFGR_SW);
 800115c:	4b12      	ldr	r3, [pc, #72]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 0203 	and.w	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	605a      	str	r2, [r3, #4]

/* Get the HCLK configuration ----------------------------------------------*/
RCC_ClkInitStruct->AHBCLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_HPRE);
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	609a      	str	r2, [r3, #8]

/* Get the APB1 configuration ----------------------------------------------*/
RCC_ClkInitStruct->APB1CLKDivider = (uint32_t) (RCC->CFGR & RCC_CFGR_PPRE1);
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60da      	str	r2, [r3, #12]

/* Get the APB2 configuration ----------------------------------------------*/
RCC_ClkInitStruct->APB2CLKDivider = (uint32_t) ((RCC->CFGR & RCC_CFGR_PPRE2)
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	611a      	str	r2, [r3, #16]
	>> 3U);

/* Get the Flash Wait State (Latency) configuration ------------------------*/
*pFLatency = (uint32_t) (FLASH->ACR & FLASH_ACR_LATENCY);
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_RCC_GetClockConfig+0x60>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 020f 	and.w	r2, r3, #15
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	601a      	str	r2, [r3, #0]
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40023c00 	.word	0x40023c00

080011b0 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001204:	0a1b      	lsrs	r3, r3, #8
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 800121e:	4909      	ldr	r1, [pc, #36]	; (8001244 <NVIC_EnableIRQ+0x30>)
 8001220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001224:	095b      	lsrs	r3, r3, #5
 8001226:	79fa      	ldrb	r2, [r7, #7]
 8001228:	f002 021f 	and.w	r2, r2, #31
 800122c:	2001      	movs	r0, #1
 800122e:	fa00 f202 	lsl.w	r2, r0, r2
 8001232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100

08001248 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	da0b      	bge.n	8001274 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800125c:	490d      	ldr	r1, [pc, #52]	; (8001294 <NVIC_SetPriority+0x4c>)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 030f 	and.w	r3, r3, #15
 8001264:	3b04      	subs	r3, #4
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8001272:	e009      	b.n	8001288 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8001274:	4908      	ldr	r1, [pc, #32]	; (8001298 <NVIC_SetPriority+0x50>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	0112      	lsls	r2, r2, #4
 8001280:	b2d2      	uxtb	r2, r2
 8001282:	440b      	add	r3, r1
 8001284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	e000e100 	.word	0xe000e100

0800129c <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80012d0:	2201      	movs	r2, #1
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	3b01      	subs	r3, #1
 80012da:	461a      	mov	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80012e4:	2101      	movs	r1, #1
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	3b01      	subs	r3, #1
 80012ee:	4619      	mov	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 80012f4:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop

08001304 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ff4f 	bl	80011b0 <NVIC_SetPriorityGrouping>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop

0800131c <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
 8001328:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 800132e:	f7ff ff63 	bl	80011f8 <NVIC_GetPriorityGrouping>
 8001332:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	68b9      	ldr	r1, [r7, #8]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ffaf 	bl	800129c <NVIC_EncodePriority>
 800133e:	4602      	mov	r2, r0
 8001340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff7e 	bl	8001248 <NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	4618      	mov	r0, r3
 8001364:	f7ff ff56 	bl	8001214 <NVIC_EnableIRQ>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	/* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_Init+0x34>)
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_Init+0x34>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8001380:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_Init+0x34>)
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_Init+0x34>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800138a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f7ff ffb9 	bl	8001304 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	200f      	movs	r0, #15
 8001394:	f7ff f82c 	bl	80003f0 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8001398:	f7fe ff82 	bl	80002a0 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023c00 	.word	0x40023c00

080013a8 <HAL_IncTick>:
 *       in Systick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	uwTick++;
 80013ac:	4b04      	ldr	r3, [pc, #16]	; (80013c0 <HAL_IncTick+0x18>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a03      	ldr	r2, [pc, #12]	; (80013c0 <HAL_IncTick+0x18>)
 80013b4:	6013      	str	r3, [r2, #0]
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2000005c 	.word	0x2000005c

080013c4 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
	return uwTick;
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_GetTick+0x14>)
 80013ca:	681b      	ldr	r3, [r3, #0]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000005c 	.word	0x2000005c

080013dc <HAL_GetREVID>:

/**
 * @brief  Returns the device revision identifier.
 * @retval Device revision identifier
 */
uint32_t HAL_GetREVID(void) {
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	return ((DBGMCU->IDCODE) >> 16U);
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <HAL_GetREVID+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	0c1b      	lsrs	r3, r3, #16
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e0042000 	.word	0xe0042000

080013f4 <__libc_init_array>:
 80013f4:	b570      	push	{r4, r5, r6, lr}
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <__libc_init_array+0x3c>)
 80013f8:	4c0e      	ldr	r4, [pc, #56]	; (8001434 <__libc_init_array+0x40>)
 80013fa:	1ae4      	subs	r4, r4, r3
 80013fc:	10a4      	asrs	r4, r4, #2
 80013fe:	2500      	movs	r5, #0
 8001400:	461e      	mov	r6, r3
 8001402:	42a5      	cmp	r5, r4
 8001404:	d004      	beq.n	8001410 <__libc_init_array+0x1c>
 8001406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800140a:	4798      	blx	r3
 800140c:	3501      	adds	r5, #1
 800140e:	e7f8      	b.n	8001402 <__libc_init_array+0xe>
 8001410:	f000 f816 	bl	8001440 <_init>
 8001414:	4c08      	ldr	r4, [pc, #32]	; (8001438 <__libc_init_array+0x44>)
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <__libc_init_array+0x48>)
 8001418:	1ae4      	subs	r4, r4, r3
 800141a:	10a4      	asrs	r4, r4, #2
 800141c:	2500      	movs	r5, #0
 800141e:	461e      	mov	r6, r3
 8001420:	42a5      	cmp	r5, r4
 8001422:	d004      	beq.n	800142e <__libc_init_array+0x3a>
 8001424:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001428:	4798      	blx	r3
 800142a:	3501      	adds	r5, #1
 800142c:	e7f8      	b.n	8001420 <__libc_init_array+0x2c>
 800142e:	bd70      	pop	{r4, r5, r6, pc}
 8001430:	08001468 	.word	0x08001468
 8001434:	08001468 	.word	0x08001468
 8001438:	0800146c 	.word	0x0800146c
 800143c:	08001468 	.word	0x08001468

08001440 <_init>:
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001442:	bf00      	nop
 8001444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001446:	bc08      	pop	{r3}
 8001448:	469e      	mov	lr, r3
 800144a:	4770      	bx	lr

0800144c <_fini>:
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	bf00      	nop
 8001450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001452:	bc08      	pop	{r3}
 8001454:	469e      	mov	lr, r3
 8001456:	4770      	bx	lr
